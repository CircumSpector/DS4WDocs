{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Under construction \u2692\ufe0f Landing page for ViGEm.org \ud83d\udc49 Download latest ViGEm Bus Driver here \ud83d\udc48 Discussions & Support This page is work in progress, please stay with me \ud83d\ude01 Right now the place to lookup information or ask for help is either the forums or on Discord , see you soon! \ud83d\ude18","title":"Welcome"},{"location":"#welcome","text":"Under construction \u2692\ufe0f Landing page for ViGEm.org \ud83d\udc49 Download latest ViGEm Bus Driver here \ud83d\udc48","title":"Welcome"},{"location":"#discussions-support","text":"This page is work in progress, please stay with me \ud83d\ude01 Right now the place to lookup information or ask for help is either the forums or on Discord , see you soon! \ud83d\ude18","title":"Discussions &amp; Support"},{"location":"Community-Support/","text":"Community and Support Don't email developers for support requests It's sad that it has to be addressed but please use the resources below to seek assistance, free support has to happen via public channels , thank you for understanding \ud83e\udd70 Mails in violation of this simple request will be discarded without any further comment \ud83d\udc6e Struggling with some project and need help? We've got you covered! In addition to the articles on this site there's the possibility of human interaction \ud83d\ude09 Discord Wanna have a quick chat? Be our guest on Discord ! Various helpful people can be found here happy to chat. Do keep in mind that time zones are a thing so answers might come with a delay \ud83d\ude09 Read and respect the rules \u2764\ufe0f Forums Browse the forums to find discussions about similar issues you face or start a new conversation. Sign-up only requires an email account, wait for approval and you're ready to go \u2764\ufe0f GitHub issues Please respect that the GitHub issue tracker of the individual repositories is a collaboration platform for mainly developers and advanced users; kindly don't use it to ask for help, use the channels mentioned above. Mods shall close non-relevant issues without further notice to keep discussions clean \ud83d\udc6e","title":"Community and Support"},{"location":"Community-Support/#community-and-support","text":"Don't email developers for support requests It's sad that it has to be addressed but please use the resources below to seek assistance, free support has to happen via public channels , thank you for understanding \ud83e\udd70 Mails in violation of this simple request will be discarded without any further comment \ud83d\udc6e Struggling with some project and need help? We've got you covered! In addition to the articles on this site there's the possibility of human interaction \ud83d\ude09","title":"Community and Support"},{"location":"Community-Support/#discord","text":"Wanna have a quick chat? Be our guest on Discord ! Various helpful people can be found here happy to chat. Do keep in mind that time zones are a thing so answers might come with a delay \ud83d\ude09 Read and respect the rules \u2764\ufe0f","title":"Discord"},{"location":"Community-Support/#forums","text":"Browse the forums to find discussions about similar issues you face or start a new conversation. Sign-up only requires an email account, wait for approval and you're ready to go \u2764\ufe0f","title":"Forums"},{"location":"Community-Support/#github-issues","text":"Please respect that the GitHub issue tracker of the individual repositories is a collaboration platform for mainly developers and advanced users; kindly don't use it to ask for help, use the channels mentioned above. Mods shall close non-relevant issues without further notice to keep discussions clean \ud83d\udc6e","title":"GitHub issues"},{"location":"Donations/","text":"Donations A token of appreciation \u2764\ufe0f I accept donations solely as a token of appreciation if my work has brought you joy. I do not offer any services in return for donations. If you wish to contract me to carry out specific work for financial reimbursement you can hire my skills through my company. B2B relationships most welcome! Contact vigem [_at] nefarius [dot_] at to talk business \ud83d\ude18 A vast majority of my work is available for free under permissive licenses, for both private individuals and enterprises alike. Maintaining this many popular projects requires time and skill and over the years a tremendous portion of my life has been dedicated to Free and Open Source Software. I usually work independent and without an \"agenda\" so if my chaotic creations have been useful to you consider supporting my path by tossing a coin or two \ud83d\udc96 Reoccurring subscriptions If you wanna stay a while and listen you can use these reoccurring services: One-time donations If you wanna \"drive-by-contribute\" and throw a few coins in the hat you can do so through:","title":"Donations"},{"location":"Donations/#donations","text":"A token of appreciation \u2764\ufe0f I accept donations solely as a token of appreciation if my work has brought you joy. I do not offer any services in return for donations. If you wish to contract me to carry out specific work for financial reimbursement you can hire my skills through my company. B2B relationships most welcome! Contact vigem [_at] nefarius [dot_] at to talk business \ud83d\ude18 A vast majority of my work is available for free under permissive licenses, for both private individuals and enterprises alike. Maintaining this many popular projects requires time and skill and over the years a tremendous portion of my life has been dedicated to Free and Open Source Software. I usually work independent and without an \"agenda\" so if my chaotic creations have been useful to you consider supporting my path by tossing a coin or two \ud83d\udc96","title":"Donations"},{"location":"Donations/#reoccurring-subscriptions","text":"If you wanna stay a while and listen you can use these reoccurring services:","title":"Reoccurring subscriptions"},{"location":"Donations/#one-time-donations","text":"If you wanna \"drive-by-contribute\" and throw a few coins in the hat you can do so through:","title":"One-time donations"},{"location":"Downloads/","text":"Downloads Welcome to the download hub \u2764\ufe0f Here you'll find quick-links to binaries for popular projects \ud83d\udc47 Production-ready releases Product ViGEm Bus Driver Setup BthPS3 Bluetooth Drivers Setup DsHidMini Driver HidHide Setup Mirrors & Archives You can explore mirror copies or archived binaries on the file server , these are typically in \"working conditions\" but may no longer be maintained or have been superseded by other solutions. Use with care \u2728 Buildbot Archive Copies of build artifacts spit out by AppVeyor are mirrored on a separate file server since they get removed automatically from their infrastructure after 6 months. Drivers hosted there are unsigned (or test-signed) and therefore won't work on a non-developer-machine with the right preparations. Build artifacts are of interest typically only to developers or beta-testing folks, explore at your own risk \ud83e\udd8b","title":"Downloads"},{"location":"Downloads/#downloads","text":"Welcome to the download hub \u2764\ufe0f Here you'll find quick-links to binaries for popular projects \ud83d\udc47","title":"Downloads"},{"location":"Downloads/#production-ready-releases","text":"Product ViGEm Bus Driver Setup BthPS3 Bluetooth Drivers Setup DsHidMini Driver HidHide Setup","title":"Production-ready releases"},{"location":"Downloads/#mirrors-archives","text":"You can explore mirror copies or archived binaries on the file server , these are typically in \"working conditions\" but may no longer be maintained or have been superseded by other solutions. Use with care \u2728","title":"Mirrors &amp; Archives"},{"location":"Downloads/#buildbot-archive","text":"Copies of build artifacts spit out by AppVeyor are mirrored on a separate file server since they get removed automatically from their infrastructure after 6 months. Drivers hosted there are unsigned (or test-signed) and therefore won't work on a non-developer-machine with the right preparations. Build artifacts are of interest typically only to developers or beta-testing folks, explore at your own risk \ud83e\udd8b","title":"Buildbot Archive"},{"location":"projects/","text":"About Projects Welcome! \ud83d\udc4b Here you can find an overview over past and actively maintained projects under the wings of the ViGEm \"ecosystem\" \ud83d\ude01 Most of them - if they're open-source - you'll find on GitHub primarily; these sites here are meant to provide extended user documentation (less developer-heavy), a bit of history insights for discontinued projects and announcements or in-progress information for solutions currently cooking in the labs \ud83d\ude0e","title":"About Projects"},{"location":"projects/#about-projects","text":"Welcome! \ud83d\udc4b Here you can find an overview over past and actively maintained projects under the wings of the ViGEm \"ecosystem\" \ud83d\ude01 Most of them - if they're open-source - you'll find on GitHub primarily; these sites here are meant to provide extended user documentation (less developer-heavy), a bit of history insights for discontinued projects and announcements or in-progress information for solutions currently cooking in the labs \ud83d\ude0e","title":"About Projects"},{"location":"projects/AirBender/","text":"About AirBender AirBender was a user-mode driver providing a custom Bluetooth stack for USB Bluetooth dongles to support Sony PlayStation 3 Controllers on Windows. It was in development from August 2016 to February 2018 until it got archived in favour of better solutions. Its direct successor is BthPS3. The driver is a C-port of the C# implementation used in ScpToolkit and therefore \"occupies\" an entire Bluetooth dongle (radio) to function, making it impossible to use with conventional Bluetooth device (headphones, mice, ...) until uninstalled. It requires the .NET companion service Shibari to detect connected controllers and have them translated into virtual Xbox 360 or DualShock 4 devices using the ViGEm Framework. It is not advised to use AirBender due to missing support and potentially remaining issues in design and code.","title":"About AirBender"},{"location":"projects/AirBender/#about-airbender","text":"AirBender was a user-mode driver providing a custom Bluetooth stack for USB Bluetooth dongles to support Sony PlayStation 3 Controllers on Windows. It was in development from August 2016 to February 2018 until it got archived in favour of better solutions. Its direct successor is BthPS3. The driver is a C-port of the C# implementation used in ScpToolkit and therefore \"occupies\" an entire Bluetooth dongle (radio) to function, making it impossible to use with conventional Bluetooth device (headphones, mice, ...) until uninstalled. It requires the .NET companion service Shibari to detect connected controllers and have them translated into virtual Xbox 360 or DualShock 4 devices using the ViGEm Framework. It is not advised to use AirBender due to missing support and potentially remaining issues in design and code.","title":"About AirBender"},{"location":"projects/AirBender/Removal-Guide/","text":"AirBender Removal Guide AirBender didn't ship with an (un-)installer but with a little help of 3rd party tools removal is simple and painless \ud83d\ude03 How to tell if I have it Great question! You might not use Bluetooth regularly at all and might have installed it a long time ago and forgotten all about it. No worries though, easiest way is to have a look in Device Manager. Press Win + X and click on Device Manager. Have a look at the Bluetooth section, it might look like so: Look at that, we found it! \ud83d\ude04 Onwards with the next step! How to get rid of it Download, extract and run Driver Store Explorer and look for the AirBender device there, tick it, tick the Force Deletion box and finally hit the Delete Driver(s) button. After that, simply unplug and plugin your Bluetooth dongle or reboot the machine and let Windows download the manufacturer drivers. Done! \ud83c\udf89","title":"AirBender Removal Guide"},{"location":"projects/AirBender/Removal-Guide/#airbender-removal-guide","text":"AirBender didn't ship with an (un-)installer but with a little help of 3rd party tools removal is simple and painless \ud83d\ude03","title":"AirBender Removal Guide"},{"location":"projects/AirBender/Removal-Guide/#how-to-tell-if-i-have-it","text":"Great question! You might not use Bluetooth regularly at all and might have installed it a long time ago and forgotten all about it. No worries though, easiest way is to have a look in Device Manager. Press Win + X and click on Device Manager. Have a look at the Bluetooth section, it might look like so: Look at that, we found it! \ud83d\ude04 Onwards with the next step!","title":"How to tell if I have it"},{"location":"projects/AirBender/Removal-Guide/#how-to-get-rid-of-it","text":"Download, extract and run Driver Store Explorer and look for the AirBender device there, tick it, tick the Force Deletion box and finally hit the Delete Driver(s) button. After that, simply unplug and plugin your Bluetooth dongle or reboot the machine and let Windows download the manufacturer drivers. Done! \ud83c\udf89","title":"How to get rid of it"},{"location":"projects/BthPS3/","text":"About BthPS3 Welcome to the BthPS3 extended documentation! Here you can find extended documentation about the different parts of this project, the devices it supports and answers to common issues and questions. Wanna know if your particular Bluetooth host radio has been confirmed working or help documenting a new one? Take a look at this collection of compatible devices . Those pesky controllers refusing to connect? Kindly take a peek over here . Having troubles getting the DualShock 4 to work while this solution is installed? We've got you covered . Explore the inner workings of the drivers by enabling the trace log .","title":"About BthPS3"},{"location":"projects/BthPS3/#about-bthps3","text":"Welcome to the BthPS3 extended documentation! Here you can find extended documentation about the different parts of this project, the devices it supports and answers to common issues and questions. Wanna know if your particular Bluetooth host radio has been confirmed working or help documenting a new one? Take a look at this collection of compatible devices . Those pesky controllers refusing to connect? Kindly take a peek over here . Having troubles getting the DualShock 4 to work while this solution is installed? We've got you covered . Explore the inner workings of the drivers by enabling the trace log .","title":"About BthPS3"},{"location":"projects/BthPS3/API-Documentation/","text":"API Documentation Topic intended for developers This topic is intended for developers who'd like to build upon the capabilities of BthPS3 and directly talk to devices for prototyping or other experimental tasks. Devices connected through BthPS3 can be interfaced with \"driverless\" by opening a handle and directly communicating with the HID Control and Interrupt channels. They can be enumerated via SetupAPI by using the Device Interface GUIDs documented in the project sources . Reading from and writing to the L2CAP channels is done via DeviceIoControl utilizing these IOCTL commands . Example implementation Check out this archived project for a reference implementation on how to enumerate and interact with devices exposed by BthPS3 (C#/.NET).","title":"API Documentation"},{"location":"projects/BthPS3/API-Documentation/#api-documentation","text":"Topic intended for developers This topic is intended for developers who'd like to build upon the capabilities of BthPS3 and directly talk to devices for prototyping or other experimental tasks. Devices connected through BthPS3 can be interfaced with \"driverless\" by opening a handle and directly communicating with the HID Control and Interrupt channels. They can be enumerated via SetupAPI by using the Device Interface GUIDs documented in the project sources . Reading from and writing to the L2CAP channels is done via DeviceIoControl utilizing these IOCTL commands .","title":"API Documentation"},{"location":"projects/BthPS3/API-Documentation/#example-implementation","text":"Check out this archived project for a reference implementation on how to enumerate and interact with devices exposed by BthPS3 (C#/.NET).","title":"Example implementation"},{"location":"projects/BthPS3/About-Controller-Compatibility/","text":"A word about controller compatibility TL;DR: If your controller works, great! If it doesn't, well, life's not always fair \ud83d\ude1c An important statement from the author, I highly encourage the read \ud83d\ude42 This set of drivers has been designed for and tested with the original Sony PlayStation 3 peripherals, better known by the names SIXAXIS, DualShock and Navigation controller. Over time many aftermarket and just blatant ripoff devices have appeared on the market, primarily aiming for compatibility with the original PlayStation 3 platform. It's even been observed, that official Sony gear can behave differently on platforms other than the PlayStation, most probably due to slight changes in both controller and PlayStation firmware. While this project has been designed with highest compatibility towards cheaper and aftermarket devices in mind it is impossible to support them all with the same level of quality the legit hardware delivers. Some chips used by aftermarket/ripoff/fake controllers behave differently to variations in certain Bluetooth properties not always possible to influence on Windows, some are timing sensitive and fail if packets don't arrive exactly as engineered for the PlayStation 3. Some simply refuse to connect at all despite many other devices working flawlessly. That's just how it is and will most probably not change in the near future. I encourage any user to test this solution with their hardware, yet keep in mind, that \"my BlyatShock 3.5 from VeryLowPriceStore LLC. doesn't work\" issue reports will be discarded without further comment. It is simply not my desire nor my job to fix other el cheapo manufacturers broken firmware. You can send me the hardware in question though for analysis, maybe one day I can be the proud owner of Bluetooth Classic sniffer equipment \ud83d\ude07 Or someone finds a way to soft-mod a PlayStation 3 so a packet capture of the Bluetooth host module becomes possible.","title":"A word about controller compatibility"},{"location":"projects/BthPS3/About-Controller-Compatibility/#a-word-about-controller-compatibility","text":"TL;DR: If your controller works, great! If it doesn't, well, life's not always fair \ud83d\ude1c An important statement from the author, I highly encourage the read \ud83d\ude42 This set of drivers has been designed for and tested with the original Sony PlayStation 3 peripherals, better known by the names SIXAXIS, DualShock and Navigation controller. Over time many aftermarket and just blatant ripoff devices have appeared on the market, primarily aiming for compatibility with the original PlayStation 3 platform. It's even been observed, that official Sony gear can behave differently on platforms other than the PlayStation, most probably due to slight changes in both controller and PlayStation firmware. While this project has been designed with highest compatibility towards cheaper and aftermarket devices in mind it is impossible to support them all with the same level of quality the legit hardware delivers. Some chips used by aftermarket/ripoff/fake controllers behave differently to variations in certain Bluetooth properties not always possible to influence on Windows, some are timing sensitive and fail if packets don't arrive exactly as engineered for the PlayStation 3. Some simply refuse to connect at all despite many other devices working flawlessly. That's just how it is and will most probably not change in the near future. I encourage any user to test this solution with their hardware, yet keep in mind, that \"my BlyatShock 3.5 from VeryLowPriceStore LLC. doesn't work\" issue reports will be discarded without further comment. It is simply not my desire nor my job to fix other el cheapo manufacturers broken firmware. You can send me the hardware in question though for analysis, maybe one day I can be the proud owner of Bluetooth Classic sniffer equipment \ud83d\ude07 Or someone finds a way to soft-mod a PlayStation 3 so a packet capture of the Bluetooth host module becomes possible.","title":"A word about controller compatibility"},{"location":"projects/BthPS3/Amazon-Choice-Pro-Controller/","text":"Amazon's Choice \"Pro Controller\" Compatibility This Controller can't be connected to Windows Bluetooth This controller doesn't obey the Bluetooth specification regarding channel encryption and can therefore not be connected to Windows. Details below. It has been tested with the legacy ScpToolkit and BthPS3. About This is a 3rd party aftermarket controller modeled after the original Sony DualShock 3 compatible with the PlayStation 3. Alternative names: Diswoe Wireless Controller Product page Molyhood Wireless Controller for PS3, Wireless Controller, Double Shock Gaming Controller, 6-Axis Bluetooth Gamepad Joystick with Charging Cable for PS3 Controller for Playstation 3 Product pictures Wireshark A packet capture exposes the channel open response sent by the Windows Bluetooth stack as set to Result: Refused - security block (0x0003) : Event Viewer This type of connection error is logged in the Windows Event Log in the System log, reported by BTHUSB as Windows rejected a device connection because the device didn't establish encryption prior to the service level connection. :","title":"Amazon's Choice \"Pro Controller\" Compatibility"},{"location":"projects/BthPS3/Amazon-Choice-Pro-Controller/#amazons-choice-pro-controller-compatibility","text":"This Controller can't be connected to Windows Bluetooth This controller doesn't obey the Bluetooth specification regarding channel encryption and can therefore not be connected to Windows. Details below. It has been tested with the legacy ScpToolkit and BthPS3.","title":"Amazon's Choice \"Pro Controller\" Compatibility"},{"location":"projects/BthPS3/Amazon-Choice-Pro-Controller/#about","text":"This is a 3rd party aftermarket controller modeled after the original Sony DualShock 3 compatible with the PlayStation 3. Alternative names: Diswoe Wireless Controller","title":"About"},{"location":"projects/BthPS3/Amazon-Choice-Pro-Controller/#product-page","text":"Molyhood Wireless Controller for PS3, Wireless Controller, Double Shock Gaming Controller, 6-Axis Bluetooth Gamepad Joystick with Charging Cable for PS3 Controller for Playstation 3","title":"Product page"},{"location":"projects/BthPS3/Amazon-Choice-Pro-Controller/#product-pictures","text":"","title":"Product pictures"},{"location":"projects/BthPS3/Amazon-Choice-Pro-Controller/#wireshark","text":"A packet capture exposes the channel open response sent by the Windows Bluetooth stack as set to Result: Refused - security block (0x0003) :","title":"Wireshark"},{"location":"projects/BthPS3/Amazon-Choice-Pro-Controller/#event-viewer","text":"This type of connection error is logged in the Windows Event Log in the System log, reported by BTHUSB as Windows rejected a device connection because the device didn't establish encryption prior to the service level connection. :","title":"Event Viewer"},{"location":"projects/BthPS3/Compatible-Bluetooth-Devices/","text":"Compatible Bluetooth Devices Non-exhaustive list of Bluetooth host devices known to work with the drivers and supported controller devices. Meaning of Status column: \u2714\ufe0f = tested and confirmed working \u2754 = assumed to work (ported over from old Wiki) \u274c = has issues (see Remarks) USB Dongles Hardware ID Name Status Remarks USB\\VID_0A12&PID_0001 Hama Nano Bluetooth USB Adapter \u2714\ufe0f Very common chip used in multiple brands, typically displayed in Windows as \"Generic Bluetooth Radio\". USB\\VID_0461&PID_4D75 Rocketfish\u2122 Bluetooth USB Adapter RF-FLBTAD \u2754 USB\\VID_050D&PID_065A Belkin F8T065bf \u2754 USB\\VID_07D1&PID_F101 DBT-122 Wireless USB Bluetooth Adapter \u2754 USB\\VID_0B05&PID_17CB ASUS USB-BT400 \u2714\ufe0f USB\\VID_0DF6&PID_2200 Sitecom CN-512 \u2754 USB\\VID_0E5E&PID_6622 Conwise CW6622 \u2754 USB\\VID_1131&PID_1001 ISSC KY-BT100 \u2754 USB\\VID_0BB4&PID_0306 Broadcom BCM20703 \u274c HTC VIVE (Steam OpenVR) customized device. Can be used in parallel with \"vanilla\" dongle without issues though. Integrated Modules/Chips in Laptops or other Devices Hardware ID Name Status Remarks USB\\VID_8087&PID_07DC Intel(R) Wireless Bluetooth(R) \u2714\ufe0f USB\\VID_0489&PID_E052 Broadcom BCM20702 Bluetooth USB Device \u2714\ufe0f USB\\VID_03F0&PID_231D HP Integrated module with Bluetooth wireless technology (Broadcom BCM2070) \u2754 USB\\VID_044E&PID_3010 ALPS-UGPZ9-BCM2046 \u2754 USB\\VID_046D&PID_C709 HP Bluetooth Module with trace filter \u2754 USB\\VID_047D&PID_105E Kensington Bluetooth EDR Dongle \u2754 USB\\VID_0489&PID_E011 Broadcom BCM2046 \u2754 USB\\VID_0489&PID_E027 Atheros AR3011 Bluetooth(R) Adapter \u2754 USB\\VID_0489&PID_E042 Broadcom BCM20702 \u2754 USB\\VID_0489&PID_E04D Atheros AR3012 Bluetooth(R) Adapter \u2754 USB\\VID_0489&PID_E04E Bluetooth USB Module \u2754 USB\\VID_04CA&PID_3006 BlueSoleil Generic Bluetooth Driver \u2754 USB\\VID_050D&PID_016A Broadcom BCM2046B1 (Belkin) \u2754 USB\\VID_05AC&PID_8216 Broadcom Bluetooth 2.1 (MacBookAir2) \u2754 USB\\VID_05AC&PID_821A Apple Broadcom Built-in Bluetooth (MacBookPro8) \u2754 USB\\VID_05AC&PID_821D Apple Broadcom Built-in Bluetooth (MacBookPro9) \u2754 USB\\VID_05AC&PID_821F Apple Broadcom Built-in Bluetooth (MacBookAir4) \u2754 USB\\VID_05AC&PID_8286 Apple Broadcom Built-in Bluetooth (MacBookPro10) \u2754 USB\\VID_0930&PID_0214 Bluetooth USB Controller-9 from TOSHIBA (Broadcom BCM2070) \u2754 USB\\VID_0930&PID_0215 Bluetooth USB Controller-10 from TOSHIBA \u2754 USB\\VID_0A5C&PID_200A Broadcom BCM2035 \u2754 USB\\VID_0A5C&PID_2021 Broadcom BCM2035B3 \u2754 USB\\VID_0A5C&PID_2100 Broadcom BCM2045 \u2754 USB\\VID_0A5C&PID_2101 Broadcom BCM2045 \u2754 USB\\VID_0A5C&PID_2146 Broadcom BCM2046 \u2754 USB\\VID_0A5C&PID_2148 Broadcom BCM92046DG \u2754 USB\\VID_0A5C&PID_2150 Broadcom BCM2046 \u2754 USB\\VID_0A5C&PID_2153 Broadcom BCM2046 \u2754 USB\\VID_0A5C&PID_2154 Broadcom BCM92046DG-CL1ROM Bluetooth 2.1 UHE Dongle \u2754 USB\\VID_0A5C&PID_217D HP Bluetooth module \u2754 USB\\VID_0A5C&PID_2190 Broadcom BCM2070 \u2754 USB\\VID_0A5C&PID_2198 Broadcom BCM2070 \u2754 USB\\VID_0A5C&PID_21B4 Broadcom BCM2070 \u2754 USB\\VID_0A5C&PID_21E1 Broadcom BCM20702A0 (Driver for Hewlett-Packard) \u2754 USB\\VID_0A5C&PID_21E3 Broadcom BCM20702A0 (Driver for Hewlett-Packard) \u2754 USB\\VID_0A5C&PID_21E8 Broadcom BCM20702A0 \u2714\ufe0f Uses manufacturer-specific driver from 2015 (from Microsoft Update Catalog) USB\\VID_0B05&PID_1715 ASUS Bluetooth Dongle (Broadcom BCM2045) \u2754 USB\\VID_0B05&PID_1783 ASUS Bluetooth v2.1 USB Adapter \u2754 USB\\VID_0B05&PID_1788 BT-270 (ASUS) \u2754 USB\\VID_0B05&PID_179C Bluetooth (ASUS) \u2754 USB\\VID_0B05&PID_17B5 Bluetooth (ASUS) \u2754 USB\\VID_0B05&PID_B700 BT-253 (ASUS) \u2754 USB\\VID_0BDA&PID_0724 Realtek Bluetooth 4.0 \u2754 USB\\VID_0BDA&PID_8723 Realtek Bluetooth 4.0 \u2754 USB\\VID_0CF3&PID_3002 Atheros AR3011 \u2754 USB\\VID_0CF3&PID_3004 Atheros AR3012 \u2754 USB\\VID_0CF3&PID_3005 Atheros AR3011 \u2754 USB\\VID_0DB0&PID_3801 Motorola Bluetooth 2.1+EDR Device (MSI) \u2754 USB\\VID_1131&PID_1004 ISSC (EDR) Bluetooth USB Adapter \u2754 USB\\VID_1286&PID_2044 Marvell AVASTAR Bluetooth Radio Adapter (Microsoft Surface) \u2754 USB\\VID_13D3&PID_3304 Atheros AR3011 (Azurewave Janus 3304) \u2754 USB\\VID_13D3&PID_3315 Bluetooth module (ASUS) \u2754 USB\\VID_413C&PID_8126 Dell Wireless 355 Module with Bluetooth 2.0 + EDR Technology \u2754 USB\\VID_413C&PID_8197 Dell Wireless 380 Bluetooth 4.0 Module (Broadcom BCM20702A0) \u2754 USB\\VID_8086&PID_0189 Intel Centrino Advanced-N 6230 Bluetooth adapter \u2754 USB\\VID_8087&PID_07DA Intel Centrino Wireless Bluetooth 4.0 + High Speed Adapter \u2754 Unknown Devices Hardware ID Name Status Remarks USB\\VID_045E&PID_3500 \u2754 \u2754 USB\\VID_0B05&PID_1785 \u2754 \u2754","title":"Compatible Bluetooth Devices"},{"location":"projects/BthPS3/Compatible-Bluetooth-Devices/#compatible-bluetooth-devices","text":"Non-exhaustive list of Bluetooth host devices known to work with the drivers and supported controller devices. Meaning of Status column: \u2714\ufe0f = tested and confirmed working \u2754 = assumed to work (ported over from old Wiki) \u274c = has issues (see Remarks)","title":"Compatible Bluetooth Devices"},{"location":"projects/BthPS3/Compatible-Bluetooth-Devices/#usb-dongles","text":"Hardware ID Name Status Remarks USB\\VID_0A12&PID_0001 Hama Nano Bluetooth USB Adapter \u2714\ufe0f Very common chip used in multiple brands, typically displayed in Windows as \"Generic Bluetooth Radio\". USB\\VID_0461&PID_4D75 Rocketfish\u2122 Bluetooth USB Adapter RF-FLBTAD \u2754 USB\\VID_050D&PID_065A Belkin F8T065bf \u2754 USB\\VID_07D1&PID_F101 DBT-122 Wireless USB Bluetooth Adapter \u2754 USB\\VID_0B05&PID_17CB ASUS USB-BT400 \u2714\ufe0f USB\\VID_0DF6&PID_2200 Sitecom CN-512 \u2754 USB\\VID_0E5E&PID_6622 Conwise CW6622 \u2754 USB\\VID_1131&PID_1001 ISSC KY-BT100 \u2754 USB\\VID_0BB4&PID_0306 Broadcom BCM20703 \u274c HTC VIVE (Steam OpenVR) customized device. Can be used in parallel with \"vanilla\" dongle without issues though.","title":"USB Dongles"},{"location":"projects/BthPS3/Compatible-Bluetooth-Devices/#integrated-moduleschips-in-laptops-or-other-devices","text":"Hardware ID Name Status Remarks USB\\VID_8087&PID_07DC Intel(R) Wireless Bluetooth(R) \u2714\ufe0f USB\\VID_0489&PID_E052 Broadcom BCM20702 Bluetooth USB Device \u2714\ufe0f USB\\VID_03F0&PID_231D HP Integrated module with Bluetooth wireless technology (Broadcom BCM2070) \u2754 USB\\VID_044E&PID_3010 ALPS-UGPZ9-BCM2046 \u2754 USB\\VID_046D&PID_C709 HP Bluetooth Module with trace filter \u2754 USB\\VID_047D&PID_105E Kensington Bluetooth EDR Dongle \u2754 USB\\VID_0489&PID_E011 Broadcom BCM2046 \u2754 USB\\VID_0489&PID_E027 Atheros AR3011 Bluetooth(R) Adapter \u2754 USB\\VID_0489&PID_E042 Broadcom BCM20702 \u2754 USB\\VID_0489&PID_E04D Atheros AR3012 Bluetooth(R) Adapter \u2754 USB\\VID_0489&PID_E04E Bluetooth USB Module \u2754 USB\\VID_04CA&PID_3006 BlueSoleil Generic Bluetooth Driver \u2754 USB\\VID_050D&PID_016A Broadcom BCM2046B1 (Belkin) \u2754 USB\\VID_05AC&PID_8216 Broadcom Bluetooth 2.1 (MacBookAir2) \u2754 USB\\VID_05AC&PID_821A Apple Broadcom Built-in Bluetooth (MacBookPro8) \u2754 USB\\VID_05AC&PID_821D Apple Broadcom Built-in Bluetooth (MacBookPro9) \u2754 USB\\VID_05AC&PID_821F Apple Broadcom Built-in Bluetooth (MacBookAir4) \u2754 USB\\VID_05AC&PID_8286 Apple Broadcom Built-in Bluetooth (MacBookPro10) \u2754 USB\\VID_0930&PID_0214 Bluetooth USB Controller-9 from TOSHIBA (Broadcom BCM2070) \u2754 USB\\VID_0930&PID_0215 Bluetooth USB Controller-10 from TOSHIBA \u2754 USB\\VID_0A5C&PID_200A Broadcom BCM2035 \u2754 USB\\VID_0A5C&PID_2021 Broadcom BCM2035B3 \u2754 USB\\VID_0A5C&PID_2100 Broadcom BCM2045 \u2754 USB\\VID_0A5C&PID_2101 Broadcom BCM2045 \u2754 USB\\VID_0A5C&PID_2146 Broadcom BCM2046 \u2754 USB\\VID_0A5C&PID_2148 Broadcom BCM92046DG \u2754 USB\\VID_0A5C&PID_2150 Broadcom BCM2046 \u2754 USB\\VID_0A5C&PID_2153 Broadcom BCM2046 \u2754 USB\\VID_0A5C&PID_2154 Broadcom BCM92046DG-CL1ROM Bluetooth 2.1 UHE Dongle \u2754 USB\\VID_0A5C&PID_217D HP Bluetooth module \u2754 USB\\VID_0A5C&PID_2190 Broadcom BCM2070 \u2754 USB\\VID_0A5C&PID_2198 Broadcom BCM2070 \u2754 USB\\VID_0A5C&PID_21B4 Broadcom BCM2070 \u2754 USB\\VID_0A5C&PID_21E1 Broadcom BCM20702A0 (Driver for Hewlett-Packard) \u2754 USB\\VID_0A5C&PID_21E3 Broadcom BCM20702A0 (Driver for Hewlett-Packard) \u2754 USB\\VID_0A5C&PID_21E8 Broadcom BCM20702A0 \u2714\ufe0f Uses manufacturer-specific driver from 2015 (from Microsoft Update Catalog) USB\\VID_0B05&PID_1715 ASUS Bluetooth Dongle (Broadcom BCM2045) \u2754 USB\\VID_0B05&PID_1783 ASUS Bluetooth v2.1 USB Adapter \u2754 USB\\VID_0B05&PID_1788 BT-270 (ASUS) \u2754 USB\\VID_0B05&PID_179C Bluetooth (ASUS) \u2754 USB\\VID_0B05&PID_17B5 Bluetooth (ASUS) \u2754 USB\\VID_0B05&PID_B700 BT-253 (ASUS) \u2754 USB\\VID_0BDA&PID_0724 Realtek Bluetooth 4.0 \u2754 USB\\VID_0BDA&PID_8723 Realtek Bluetooth 4.0 \u2754 USB\\VID_0CF3&PID_3002 Atheros AR3011 \u2754 USB\\VID_0CF3&PID_3004 Atheros AR3012 \u2754 USB\\VID_0CF3&PID_3005 Atheros AR3011 \u2754 USB\\VID_0DB0&PID_3801 Motorola Bluetooth 2.1+EDR Device (MSI) \u2754 USB\\VID_1131&PID_1004 ISSC (EDR) Bluetooth USB Adapter \u2754 USB\\VID_1286&PID_2044 Marvell AVASTAR Bluetooth Radio Adapter (Microsoft Surface) \u2754 USB\\VID_13D3&PID_3304 Atheros AR3011 (Azurewave Janus 3304) \u2754 USB\\VID_13D3&PID_3315 Bluetooth module (ASUS) \u2754 USB\\VID_413C&PID_8126 Dell Wireless 355 Module with Bluetooth 2.0 + EDR Technology \u2754 USB\\VID_413C&PID_8197 Dell Wireless 380 Bluetooth 4.0 Module (Broadcom BCM20702A0) \u2754 USB\\VID_8086&PID_0189 Intel Centrino Advanced-N 6230 Bluetooth adapter \u2754 USB\\VID_8087&PID_07DA Intel Centrino Wireless Bluetooth 4.0 + High Speed Adapter \u2754","title":"Integrated Modules/Chips in Laptops or other Devices"},{"location":"projects/BthPS3/Compatible-Bluetooth-Devices/#unknown-devices","text":"Hardware ID Name Status Remarks USB\\VID_045E&PID_3500 \u2754 \u2754 USB\\VID_0B05&PID_1785 \u2754 \u2754","title":"Unknown Devices"},{"location":"projects/BthPS3/Debugging-the-drivers/","text":"Getting a kernel driver to talk Kernel Drivers typically don't write traditional log files that end up on the disk somewhere, instead Event Tracing for Windows is used to write messages to a special logging facility we can tap into with a bit of command line magic. Prepare verbose tracing Fire up PowerShell with administrative privileges by pressing Win + X and selecting it from the appearing menu like so: Keep it open until we're done, we'll need it throughout the process \ud83d\ude09 By default verbose tracing is off , which means we will lose a lot of potentially interesting information. To enable verbose tracing, execute the following commands in PowerShell: PowerShell Set-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\BthPS3\\Parameters\" -Name \"VerboseOn\" -Type DWord -Value 1 -Force Set-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\BthPS3\\Parameters\\Wdf\" -Name \"VerboseOn\" -Type DWord -Value 1 -Force After that reboot the machine before you proceed with the next step! Capture the trace Start trace session Once you've got PowerShell open again, paste the following three lines into it \"as is\" and hit enter: PowerShell New-EtwTraceSession -Name BthPS3 -LogFileMode 0x8100 -FlushTimer 1 -LocalFilePath \"C:\\BthPS3.etl\" Add-EtwTraceProvider -SessionName BthPS3 -Guid \u2018 { 37dcd579-e844 - 4c80 - 9c8b-a10850b6fac6 } \u2019 -MatchAnyKeyword 0x0FFFFFFFFFFFFFFF -Level 0xFF -Property 0x40 Add-EtwTraceProvider -SessionName BthPS3 -Guid \u2018 { 586aa8b1 - 53a6 - 404f - 9b3e - 14483e514a2c } \u2019 -MatchAnyKeyword 0x0FFFFFFFFFFFFFFF -Level 0xFF -Property 0x40 Should looks similar to this: Perform the action you want captured Now is the time to attempt pairing a controller or whatever logic you wish to test and get captured in the trace log file. Stop trace session Once everything we like to know has been captured, stop the session so the data collection stops and the log file is closed: PowerShell Remove-EtwTraceSession -Name BthPS3 The log file should now exist under the C:\\-Drive: Great, I got it, what now So we've captured the BthPS3.etl file, but what now? Well, the easy way is to submit it to Nefarius for analysis \ud83d\ude01 Or, you can take a peek at its contents for yourself if you read on. Decipher the trace file content The trace files are not readable with a traditional text editor, some special tools are required to get the spicy bits out of it. Microsoft provides tools for the task but they are awfully verbose and not easy on the beginner in the authors humble opinion, so use of a 3rd party tool is highly recommended. Using MGTEK TraceView Plus 3 Obtain a copy of MGTEK TraceView Plus 3 and install it. MGTEK TraceView Plus 3 This software is not freeware. It offers a free evaluation version with a generous time of 30 days trial limit and a simple nag screen. If you plan on utilizing its features frequently you can obtain a licensed copy on their shop . Thanks for supporting great software \ud83e\udd70 You should now be able to simply double-click the BthPS3.etl we created before and it should open in TraceView Plus. If not, open Trace View Plus and use File / Open Trace Log... and navigate to the BthPS3.etl file like so: Once opened you should see some oddly formatted lines similar to this: Trat's no good, TraceView Plus needs some information on how to decode the content into a useful format. So we navigate to Session / Add Trace Files... like so: Now navigate to the BthPS3 installation folder on your local drive and select both PDB files like shown: Now the display should change and readable text will appear: Alright, now you can navigate the content of the trace, newest events on the bottom, oldest on top. Fancy, but what do I do with that Once you've made it this far, you can see the inner workings of the drivers. Have a look for the levels TRACE_LEVEL_WARNING or TRACE_LEVEL_ERROR , which indicates a failure in the driver. This hints at the potential issue with the connection, which may or may not be solvable.","title":"Getting a kernel driver to talk"},{"location":"projects/BthPS3/Debugging-the-drivers/#getting-a-kernel-driver-to-talk","text":"Kernel Drivers typically don't write traditional log files that end up on the disk somewhere, instead Event Tracing for Windows is used to write messages to a special logging facility we can tap into with a bit of command line magic.","title":"Getting a kernel driver to talk"},{"location":"projects/BthPS3/Debugging-the-drivers/#prepare-verbose-tracing","text":"Fire up PowerShell with administrative privileges by pressing Win + X and selecting it from the appearing menu like so: Keep it open until we're done, we'll need it throughout the process \ud83d\ude09 By default verbose tracing is off , which means we will lose a lot of potentially interesting information. To enable verbose tracing, execute the following commands in PowerShell: PowerShell Set-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\BthPS3\\Parameters\" -Name \"VerboseOn\" -Type DWord -Value 1 -Force Set-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\BthPS3\\Parameters\\Wdf\" -Name \"VerboseOn\" -Type DWord -Value 1 -Force After that reboot the machine before you proceed with the next step!","title":"Prepare verbose tracing"},{"location":"projects/BthPS3/Debugging-the-drivers/#capture-the-trace","text":"","title":"Capture the trace"},{"location":"projects/BthPS3/Debugging-the-drivers/#start-trace-session","text":"Once you've got PowerShell open again, paste the following three lines into it \"as is\" and hit enter: PowerShell New-EtwTraceSession -Name BthPS3 -LogFileMode 0x8100 -FlushTimer 1 -LocalFilePath \"C:\\BthPS3.etl\" Add-EtwTraceProvider -SessionName BthPS3 -Guid \u2018 { 37dcd579-e844 - 4c80 - 9c8b-a10850b6fac6 } \u2019 -MatchAnyKeyword 0x0FFFFFFFFFFFFFFF -Level 0xFF -Property 0x40 Add-EtwTraceProvider -SessionName BthPS3 -Guid \u2018 { 586aa8b1 - 53a6 - 404f - 9b3e - 14483e514a2c } \u2019 -MatchAnyKeyword 0x0FFFFFFFFFFFFFFF -Level 0xFF -Property 0x40 Should looks similar to this:","title":"Start trace session"},{"location":"projects/BthPS3/Debugging-the-drivers/#perform-the-action-you-want-captured","text":"Now is the time to attempt pairing a controller or whatever logic you wish to test and get captured in the trace log file.","title":"Perform the action you want captured"},{"location":"projects/BthPS3/Debugging-the-drivers/#stop-trace-session","text":"Once everything we like to know has been captured, stop the session so the data collection stops and the log file is closed: PowerShell Remove-EtwTraceSession -Name BthPS3 The log file should now exist under the C:\\-Drive:","title":"Stop trace session"},{"location":"projects/BthPS3/Debugging-the-drivers/#great-i-got-it-what-now","text":"So we've captured the BthPS3.etl file, but what now? Well, the easy way is to submit it to Nefarius for analysis \ud83d\ude01 Or, you can take a peek at its contents for yourself if you read on.","title":"Great, I got it, what now"},{"location":"projects/BthPS3/Debugging-the-drivers/#decipher-the-trace-file-content","text":"The trace files are not readable with a traditional text editor, some special tools are required to get the spicy bits out of it. Microsoft provides tools for the task but they are awfully verbose and not easy on the beginner in the authors humble opinion, so use of a 3rd party tool is highly recommended.","title":"Decipher the trace file content"},{"location":"projects/BthPS3/Debugging-the-drivers/#using-mgtek-traceview-plus-3","text":"Obtain a copy of MGTEK TraceView Plus 3 and install it. MGTEK TraceView Plus 3 This software is not freeware. It offers a free evaluation version with a generous time of 30 days trial limit and a simple nag screen. If you plan on utilizing its features frequently you can obtain a licensed copy on their shop . Thanks for supporting great software \ud83e\udd70 You should now be able to simply double-click the BthPS3.etl we created before and it should open in TraceView Plus. If not, open Trace View Plus and use File / Open Trace Log... and navigate to the BthPS3.etl file like so: Once opened you should see some oddly formatted lines similar to this: Trat's no good, TraceView Plus needs some information on how to decode the content into a useful format. So we navigate to Session / Add Trace Files... like so: Now navigate to the BthPS3 installation folder on your local drive and select both PDB files like shown: Now the display should change and readable text will appear: Alright, now you can navigate the content of the trace, newest events on the bottom, oldest on top.","title":"Using MGTEK TraceView Plus 3"},{"location":"projects/BthPS3/Debugging-the-drivers/#fancy-but-what-do-i-do-with-that","text":"Once you've made it this far, you can see the inner workings of the drivers. Have a look for the levels TRACE_LEVEL_WARNING or TRACE_LEVEL_ERROR , which indicates a failure in the driver. This hints at the potential issue with the connection, which may or may not be solvable.","title":"Fancy, but what do I do with that"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/","text":"Driver Configuration Utility Explained The BthPS3 Driver Configuration Tool is a small self-contained .NET application shipped with the setup providing the user with a simple way to adapt the drivers operation to their liking. You can find it in your start menu, just search for it \ud83d\ude09 Profile Driver Settings These settings control the profile driver (the component which has the logic of detecting and connecting controllers in it) behavior. Depending on the companion solutions you have installed or want to install some of the following switches can or even need to be adjusted for the solution to work properly. Enable SIXAXIS\u2122\ufe0f/DualShock\u2122\ufe0f 3 Support TL;DR: This needs to be on if you want your DS3 to work wireless \ud83d\ude1c PS3 peripherals don't report much useful identification data like VendorID/ProductID fields or other common descriptors. Therefore the driver uses the remote name the device reports upon connection as an indicator to identify the type/make/model. The driver package ships with a set of well-known pre-configured names that get compared to identify a SIXAXIS-compatible device. This process is not flawless but it is reliable enough to cover the bulk of original and aftermarket devices. If this setting is ticked, the driver attempts to compar the remote name to a well-known set of names and if successful connects it as a SIXAXIS compatible. If this setting is disabled, the detection process is skipped completely and the connection gets denied. The following PowerShell snippet returns the currently configured names which identify a SIXAXIS-ish device: PowerShell Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\BthPS3\\Parameters\" -Name \"SIXAXISSupportedNames\" | Select-Object -ExpandProperty \"SIXAXISSupportedNames\" An adventurous user can tinker with this setting and edit or add names in the registry to experiment with devices who report different and untested names. The comparison is case-sensitive, so make sure the names match a 100% (including spelling mistakes \ud83d\ude09). Enable PlayStation\u00ae\ufe0f Move Navigation Support If ticked, the pre-configured list of remote device names will be used to attempt to identify and connect a Move Navigation compatible device. The process is skipped and the connection denied, if the setting is off. The following PowerShell snippet returns the currently configured names which identify a Navigation-ish device: PowerShell Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\BthPS3\\Parameters\" -Name \"NAVIGATIONSupportedNames\" | Select-Object -ExpandProperty \"NAVIGATIONSupportedNames\" Enable PlayStation\u00ae\ufe0f Move Motion Support If ticked, the pre-configured list of remote device names will be used to attempt to identify and connect a Move Motion compatible device. The process is skipped and the connection denied, if the setting is off. The following PowerShell snippet returns the currently configured names which identify a Motion-ish device: PowerShell Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\BthPS3\\Parameters\" -Name \"MOTIONSupportedNames\" | Select-Object -ExpandProperty \"MOTIONSupportedNames\" This setting is off by default to not conflict with the PSMoveService project. Enable Wireless Controller (DualShock\u2122\ufe0f 4) Support If ticked, the pre-configured list of remote device names will be used to attempt to identify and connect a Wireless/DualShock 4 compatible device. The process is skipped and the connection denied, if the setting is off. The following PowerShell snippet returns the currently configured names which identify a DualShock 4-ish device: PowerShell Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\BthPS3\\Parameters\" -Name \"WIRELESSSupportedNames\" | Select-Object -ExpandProperty \"WIRELESSSupportedNames\" This setting is off by default to not conflict with the DS4Windows project. Automatically re-enable filter after grace period has passed The profile driver can instruct the filter driver to enable or disable its patching (re-routing) capabilities if necessary. This is particularly useful if you want to connect a DualShock 4 the \"traditional\" way (pair and connect it in \"PC mode\" which needs no special drivers) which will accidentally be picked up by the profile driver due to the way the connection logic in the DS4 is designed. It might be undesired to connect a DS4 \"through\" BthPS3 since it works perfectly with stock drivers, so the profile driver will drop the connection, disable the filter for a specified amount of seconds, let the DS4 connect in \"vanilla\" mode and re-enable the patch again to continue supporting the other PS3 peripherals. Leaving this on is the default behavior. If you turn it off, you need to control filter behavior yourself (see Filter Driver Settings ). Re-enable filter after... A time span (in seconds) to wait until the filter enables itself again. If you experience issues connecting a DS4 (or Xbox One Wireless Controllers or similar via Bluetooth) try increasing this value and make sure to attempt to power on your controller a few times in order to make it work. If this mechanism still fails your, see Filter Driver Settings . Automatically disable filter on unsupported device arrival If the remote device identification mechanism fails (unrecognized remote name or other issues in the connection process), the profile driver can automatically instruct the filter to temporarily disabling its capabilities, basically restoring \"vanilla\" operation of the Bluetooth stack. BthPS3 can interfere with the connection process of other well-known wireless controller devices due to design flaws of the PS3 peripherals, this automatism is meant to aid in working around those issues. It is recommended to keep this setting active. Filter Driver Settings The filter driver has one simple, powerful job: re-route HID-related traffic to the profile driver to investigate if a compatible PS3 peripherals is attempting to connect. This feature can be be altered on the fly with the settings outlined below. Enable PSM patching If on, the filter re-routes the \"paths\" necessary to connect a PS3 peripheral to the profile driver, which then can work its magic to further present the controller to the system. If off, the entire Bluetooth stack behaves as if BthPS3 wasn't there, which can help when experiencing troubles connecting other well-known Bluetooth gaming devices, in turn disables PS3 peripherals support entirely though. Can't have everything in life \ud83d\ude00 If you want to use e.g. a DS3, DS4 and Xbox One controller at the same time simply follow this: Leave the filter on Connect the DS3 and wait a few seconds until it is online Turn the filter off Now connect the DS4 and Xbox Wireless devices Either leave the filter off and enable it later or enable it immediately again Enjoy the game \ud83e\udd73 Danger Zone It's called Danger Zone for a reason \ud83d\ude1c Depending on some companion solutions (like Shibari or DsHidMini) you may need to alter some of these settings. Read carefully though, some might cause system instability if configured incorrectly. You have been warned \ud83d\udc6e The Danger Zone hosts some of the more advanced settings of the solution. You're welcome to tinker with them as long as you can live with the consequences \ud83d\ude1c Some companion solutions (like Shibari or DsHidMini) even require a specific combination of settings as explained below. Expose PDO as RAW device to user-land Companion Required state Shibari On DsHidMini Off If this setting is on, the resulting child devices (PDO, Physical Device Object) of the profile driver can be brought up \"driverless\" and will be accessible for communication by any non-driver user-land application (like Shibari). Its HID Control/Interrupt channels can directly be consumed by the Windows API in any high-level language (see API-Documentation ). This mode is great for prototyping and experimenting with the devices without the need to write any (kernel- or user-mode) driver code. The default is on. Hide PDO from Device Manager When enabled, the connected controller devices will be hidden in Device Manager. They can still be examined by enabling View / Show hidden devices . This setting has no effect on any other operational logic and is there only for cosmetics. The default is off. Restrict PDO access to elevated users If enabled, devices in RAW mode can only be enumerated and accessed from elevated processes (applications started as Administrator, System services). This might be useful if some companion solutions have to run as an elevated process anyway for whatever reason. The default is off which allows any user to enumerate the devices. Exclusive PDO access enforced When in RAW mode, many processes can enumerate and open the devices at the same time. For game controllers presented through BthPS3 this behavior is undesired, since by design one driver/process needs authority of the exchanged packets, otherwise input information will be split across many processes resulting in unpredictable and lost button/axis change events and conflicting LED state events from different sources. It is recommended to leave this setting enabled unless a specific solution requires multiple open handles to the device. PDO S0 Idle Timeout Once PS3 peripherals have received their \"magic start packet\" they will continue sending input state changes to the host radio until disconnected (turned off) again. This process allocates buffer memory which needs to be consumed by either a function driver or user-land process. If both of these companion solutions are absent, this setting kicks in and drops the connection after the set amount of time has passed where no I/O traffic has happened. It is usually not required to increase (or decrease) this value, leaving it at the default is recommended.","title":"Driver Configuration Utility Explained"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#driver-configuration-utility-explained","text":"The BthPS3 Driver Configuration Tool is a small self-contained .NET application shipped with the setup providing the user with a simple way to adapt the drivers operation to their liking. You can find it in your start menu, just search for it \ud83d\ude09","title":"Driver Configuration Utility Explained"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#profile-driver-settings","text":"These settings control the profile driver (the component which has the logic of detecting and connecting controllers in it) behavior. Depending on the companion solutions you have installed or want to install some of the following switches can or even need to be adjusted for the solution to work properly.","title":"Profile Driver Settings"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#enable-sixaxistmdualshocktm-3-support","text":"TL;DR: This needs to be on if you want your DS3 to work wireless \ud83d\ude1c PS3 peripherals don't report much useful identification data like VendorID/ProductID fields or other common descriptors. Therefore the driver uses the remote name the device reports upon connection as an indicator to identify the type/make/model. The driver package ships with a set of well-known pre-configured names that get compared to identify a SIXAXIS-compatible device. This process is not flawless but it is reliable enough to cover the bulk of original and aftermarket devices. If this setting is ticked, the driver attempts to compar the remote name to a well-known set of names and if successful connects it as a SIXAXIS compatible. If this setting is disabled, the detection process is skipped completely and the connection gets denied. The following PowerShell snippet returns the currently configured names which identify a SIXAXIS-ish device: PowerShell Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\BthPS3\\Parameters\" -Name \"SIXAXISSupportedNames\" | Select-Object -ExpandProperty \"SIXAXISSupportedNames\" An adventurous user can tinker with this setting and edit or add names in the registry to experiment with devices who report different and untested names. The comparison is case-sensitive, so make sure the names match a 100% (including spelling mistakes \ud83d\ude09).","title":"Enable SIXAXIS\u2122\ufe0f/DualShock\u2122\ufe0f 3 Support"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#enable-playstation-move-navigation-support","text":"If ticked, the pre-configured list of remote device names will be used to attempt to identify and connect a Move Navigation compatible device. The process is skipped and the connection denied, if the setting is off. The following PowerShell snippet returns the currently configured names which identify a Navigation-ish device: PowerShell Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\BthPS3\\Parameters\" -Name \"NAVIGATIONSupportedNames\" | Select-Object -ExpandProperty \"NAVIGATIONSupportedNames\"","title":"Enable PlayStation\u00ae\ufe0f Move Navigation Support"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#enable-playstation-move-motion-support","text":"If ticked, the pre-configured list of remote device names will be used to attempt to identify and connect a Move Motion compatible device. The process is skipped and the connection denied, if the setting is off. The following PowerShell snippet returns the currently configured names which identify a Motion-ish device: PowerShell Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\BthPS3\\Parameters\" -Name \"MOTIONSupportedNames\" | Select-Object -ExpandProperty \"MOTIONSupportedNames\" This setting is off by default to not conflict with the PSMoveService project.","title":"Enable PlayStation\u00ae\ufe0f Move Motion Support"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#enable-wireless-controller-dualshocktm-4-support","text":"If ticked, the pre-configured list of remote device names will be used to attempt to identify and connect a Wireless/DualShock 4 compatible device. The process is skipped and the connection denied, if the setting is off. The following PowerShell snippet returns the currently configured names which identify a DualShock 4-ish device: PowerShell Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\BthPS3\\Parameters\" -Name \"WIRELESSSupportedNames\" | Select-Object -ExpandProperty \"WIRELESSSupportedNames\" This setting is off by default to not conflict with the DS4Windows project.","title":"Enable Wireless Controller (DualShock\u2122\ufe0f 4) Support"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#automatically-re-enable-filter-after-grace-period-has-passed","text":"The profile driver can instruct the filter driver to enable or disable its patching (re-routing) capabilities if necessary. This is particularly useful if you want to connect a DualShock 4 the \"traditional\" way (pair and connect it in \"PC mode\" which needs no special drivers) which will accidentally be picked up by the profile driver due to the way the connection logic in the DS4 is designed. It might be undesired to connect a DS4 \"through\" BthPS3 since it works perfectly with stock drivers, so the profile driver will drop the connection, disable the filter for a specified amount of seconds, let the DS4 connect in \"vanilla\" mode and re-enable the patch again to continue supporting the other PS3 peripherals. Leaving this on is the default behavior. If you turn it off, you need to control filter behavior yourself (see Filter Driver Settings ).","title":"Automatically re-enable filter after grace period has passed"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#re-enable-filter-after","text":"A time span (in seconds) to wait until the filter enables itself again. If you experience issues connecting a DS4 (or Xbox One Wireless Controllers or similar via Bluetooth) try increasing this value and make sure to attempt to power on your controller a few times in order to make it work. If this mechanism still fails your, see Filter Driver Settings .","title":"Re-enable filter after..."},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#automatically-disable-filter-on-unsupported-device-arrival","text":"If the remote device identification mechanism fails (unrecognized remote name or other issues in the connection process), the profile driver can automatically instruct the filter to temporarily disabling its capabilities, basically restoring \"vanilla\" operation of the Bluetooth stack. BthPS3 can interfere with the connection process of other well-known wireless controller devices due to design flaws of the PS3 peripherals, this automatism is meant to aid in working around those issues. It is recommended to keep this setting active.","title":"Automatically disable filter on unsupported device arrival"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#filter-driver-settings","text":"The filter driver has one simple, powerful job: re-route HID-related traffic to the profile driver to investigate if a compatible PS3 peripherals is attempting to connect. This feature can be be altered on the fly with the settings outlined below.","title":"Filter Driver Settings"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#enable-psm-patching","text":"If on, the filter re-routes the \"paths\" necessary to connect a PS3 peripheral to the profile driver, which then can work its magic to further present the controller to the system. If off, the entire Bluetooth stack behaves as if BthPS3 wasn't there, which can help when experiencing troubles connecting other well-known Bluetooth gaming devices, in turn disables PS3 peripherals support entirely though. Can't have everything in life \ud83d\ude00 If you want to use e.g. a DS3, DS4 and Xbox One controller at the same time simply follow this: Leave the filter on Connect the DS3 and wait a few seconds until it is online Turn the filter off Now connect the DS4 and Xbox Wireless devices Either leave the filter off and enable it later or enable it immediately again Enjoy the game \ud83e\udd73","title":"Enable PSM patching"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#danger-zone","text":"It's called Danger Zone for a reason \ud83d\ude1c Depending on some companion solutions (like Shibari or DsHidMini) you may need to alter some of these settings. Read carefully though, some might cause system instability if configured incorrectly. You have been warned \ud83d\udc6e The Danger Zone hosts some of the more advanced settings of the solution. You're welcome to tinker with them as long as you can live with the consequences \ud83d\ude1c Some companion solutions (like Shibari or DsHidMini) even require a specific combination of settings as explained below.","title":"Danger Zone"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#expose-pdo-as-raw-device-to-user-land","text":"Companion Required state Shibari On DsHidMini Off If this setting is on, the resulting child devices (PDO, Physical Device Object) of the profile driver can be brought up \"driverless\" and will be accessible for communication by any non-driver user-land application (like Shibari). Its HID Control/Interrupt channels can directly be consumed by the Windows API in any high-level language (see API-Documentation ). This mode is great for prototyping and experimenting with the devices without the need to write any (kernel- or user-mode) driver code. The default is on.","title":"Expose PDO as RAW device to user-land"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#hide-pdo-from-device-manager","text":"When enabled, the connected controller devices will be hidden in Device Manager. They can still be examined by enabling View / Show hidden devices . This setting has no effect on any other operational logic and is there only for cosmetics. The default is off.","title":"Hide PDO from Device Manager"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#restrict-pdo-access-to-elevated-users","text":"If enabled, devices in RAW mode can only be enumerated and accessed from elevated processes (applications started as Administrator, System services). This might be useful if some companion solutions have to run as an elevated process anyway for whatever reason. The default is off which allows any user to enumerate the devices.","title":"Restrict PDO access to elevated users"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#exclusive-pdo-access-enforced","text":"When in RAW mode, many processes can enumerate and open the devices at the same time. For game controllers presented through BthPS3 this behavior is undesired, since by design one driver/process needs authority of the exchanged packets, otherwise input information will be split across many processes resulting in unpredictable and lost button/axis change events and conflicting LED state events from different sources. It is recommended to leave this setting enabled unless a specific solution requires multiple open handles to the device.","title":"Exclusive PDO access enforced"},{"location":"projects/BthPS3/Driver-Configuration-Utility-Explained/#pdo-s0-idle-timeout","text":"Once PS3 peripherals have received their \"magic start packet\" they will continue sending input state changes to the host radio until disconnected (turned off) again. This process allocates buffer memory which needs to be consumed by either a function driver or user-land process. If both of these companion solutions are absent, this setting kicks in and drops the connection after the set amount of time has passed where no I/O traffic has happened. It is usually not required to increase (or decrease) this value, leaving it at the default is recommended.","title":"PDO S0 Idle Timeout"},{"location":"projects/BthPS3/DualShock-4-FAQ/","text":"Frequently Asked Questions about the DS4 Pairing a DualShock 4 to Windows The pairing process of the controller on Windows does not change. Press the dedicated PC mode pairing button combination and the controller becomes visible to Windows. Use the search engine of your choice to find out how to do that, it's documented quite well. Reconnecting an already paired DualShock 4 to Windows Reconnecting the controller (a.k.a. powering it on via the PS button and letting it connect via Bluetooth) follows a different pattern when these drivers are present. Without BthPS3 installed, the reconnecting process of the DS4 to Windows is as follows: Wake Up the PS4 controller with the PS button Controller successfully connects to Windows after a few seconds With BthPS3 installed, the reconnecting process of the DS4 to Windows requires 2 attempts: 1st Attempt: Wake Up the PS4 controller with the PS Button Controller's Lightbar will blink white for a few short seconds before the controller turns itself off again ( expected ) 2nd Attempt: After the 1st Attempt fails, the user has 10 seconds to turn on the controller again and wait for the controller to successfully connect to Windows. If the controller does not connect in this 10s time windows, the user will have to go back to the 1st Attempt and retry What is different after installing BthPS3 for the reconnect process? With BthPS3 installed there are two modes of operation: BthPS3's filter is enabled PS3 controllers can be connected to Windows, but not the DS4 (DS4 will connect, but Windows won't recognize it as a controller and tools like DS4Windows, Steam etc. will not detect it). BthPS3's filter is disabled: you can connect DS4 controllers normally, but DS3s won't connect anymore. Unless BthPS3's registry parameters have been altered from the defaults, this is what happens normally when trying to reconnect a DS4 to Windows with BthPS3 present: Filter is enabled. DS3 controllers can be connected at will. User wakes up an already paired DS4 controller that then tries to reconnect to Windows. DS4 connects, but doesn't work properly because the filter is enabled. The filter will consider the DS4 an unsupported device and will almost instantly drop the DS4 connection (DS4 will turn turn off the process). This is what happens on \"1st Attempt\" stated above. After the unsupported device is detected (DS4 that tried to connect) and its connection dropped, the filter will disable itself. If PS3 controllers are already connected their connection will NOT be dropped, they will stay connected normally to either Shibari or companion drivers even with the filter disabled, but the user won't be able to connect new PS3 controllers for now. After being disabled, the filter will re-enable itself in 10 seconds. Now, since the filter will enable itself after some time (10s by default) and you need it disabled to connect a DS4 controller, this means that after the 1st attempt to connect the controller \"fails\" the user needs to turn on again the DS4 in this 10s time window to allow it to properly reconnect to Windows before the filter is enabled again. So, while the filter is Disabled \ud83d\udc49 DS4 controller is turned on again \ud83d\udc49 DS4 should connect normally to Windows After 10s, the filter is re-enabled, allowing the user to connect PS3 controllers again. Since the DS4 is already properly connected to Windows, its connection won't be dropped and you will be able to use it normally.","title":"Frequently Asked Questions about the DS4"},{"location":"projects/BthPS3/DualShock-4-FAQ/#frequently-asked-questions-about-the-ds4","text":"","title":"Frequently Asked Questions about the DS4"},{"location":"projects/BthPS3/DualShock-4-FAQ/#pairing-a-dualshock-4-to-windows","text":"The pairing process of the controller on Windows does not change. Press the dedicated PC mode pairing button combination and the controller becomes visible to Windows. Use the search engine of your choice to find out how to do that, it's documented quite well.","title":"Pairing a DualShock 4 to Windows"},{"location":"projects/BthPS3/DualShock-4-FAQ/#reconnecting-an-already-paired-dualshock-4-to-windows","text":"Reconnecting the controller (a.k.a. powering it on via the PS button and letting it connect via Bluetooth) follows a different pattern when these drivers are present. Without BthPS3 installed, the reconnecting process of the DS4 to Windows is as follows: Wake Up the PS4 controller with the PS button Controller successfully connects to Windows after a few seconds With BthPS3 installed, the reconnecting process of the DS4 to Windows requires 2 attempts: 1st Attempt: Wake Up the PS4 controller with the PS Button Controller's Lightbar will blink white for a few short seconds before the controller turns itself off again ( expected ) 2nd Attempt: After the 1st Attempt fails, the user has 10 seconds to turn on the controller again and wait for the controller to successfully connect to Windows. If the controller does not connect in this 10s time windows, the user will have to go back to the 1st Attempt and retry","title":"Reconnecting an already paired DualShock 4 to Windows"},{"location":"projects/BthPS3/DualShock-4-FAQ/#what-is-different-after-installing-bthps3-for-the-reconnect-process","text":"With BthPS3 installed there are two modes of operation: BthPS3's filter is enabled PS3 controllers can be connected to Windows, but not the DS4 (DS4 will connect, but Windows won't recognize it as a controller and tools like DS4Windows, Steam etc. will not detect it). BthPS3's filter is disabled: you can connect DS4 controllers normally, but DS3s won't connect anymore. Unless BthPS3's registry parameters have been altered from the defaults, this is what happens normally when trying to reconnect a DS4 to Windows with BthPS3 present: Filter is enabled. DS3 controllers can be connected at will. User wakes up an already paired DS4 controller that then tries to reconnect to Windows. DS4 connects, but doesn't work properly because the filter is enabled. The filter will consider the DS4 an unsupported device and will almost instantly drop the DS4 connection (DS4 will turn turn off the process). This is what happens on \"1st Attempt\" stated above. After the unsupported device is detected (DS4 that tried to connect) and its connection dropped, the filter will disable itself. If PS3 controllers are already connected their connection will NOT be dropped, they will stay connected normally to either Shibari or companion drivers even with the filter disabled, but the user won't be able to connect new PS3 controllers for now. After being disabled, the filter will re-enable itself in 10 seconds. Now, since the filter will enable itself after some time (10s by default) and you need it disabled to connect a DS4 controller, this means that after the 1st attempt to connect the controller \"fails\" the user needs to turn on again the DS4 in this 10s time window to allow it to properly reconnect to Windows before the filter is enabled again. So, while the filter is Disabled \ud83d\udc49 DS4 controller is turned on again \ud83d\udc49 DS4 should connect normally to Windows After 10s, the filter is re-enabled, allowing the user to connect PS3 controllers again. Since the DS4 is already properly connected to Windows, its connection won't be dropped and you will be able to use it normally.","title":"What is different after installing BthPS3 for the reconnect process?"},{"location":"projects/BthPS3/Frequently-Asked-Questions/","text":"Frequently Asked Questions about BthPS3 Got questions? Who can blame you \ud83d\ude05 we can provide some answers, though! Read on, traveler! How to fix this setup message? Your Bluetooth isn't working \ud83d\ude42 If you're on a Laptop, make sure you haven't disabled wireless either via a physical switch or a key combination (depends on the device model). On Desktop, make sure you actually have a Bluetooth dongle plugged in \ud83d\ude09 If you had other solutions like ScpToolkit or AirBender installed, make sure they have been removed completely and you run stock drivers. If you don't see the little Bluetooth tray icon in your taskbar, chances are your Bluetooth isn't working or turned on. Fix it and setup will be happy \ud83d\ude18 What Bluetooth hosts are supported? In short: all of them manufactured within the last decade and running proper stock drivers (means no ScpServer/ScpToolkit, no AirBender, stock as the manufacturer intended). For details see this article . There's a catch Only host radios using USB are supported! This includes the majority of external dongles or integrated cards (they use USB under the hood to connect to the rest of the system). So if your device is using something more exotic like I\u00b2C or UART, I'm afraid that's not gonna work \ud83d\ude14 What controllers are supported? TL;DR The genuine original Sony hardware, anything else is a nice-to-have that may or may not work \u2728 This is unfortunately impossible to answer a 100% correctly. These drivers have been designed with compromises in mind. They aim to support the original genuine Sony SIXAXIS/DualShock 3 (and Navigation, Move) controllers while operating within the realms of possibilities the Microsoft Bluetooth stack offers and allows. The DualShock 3 (or DS3 in short) has been a fairly popular piece of hardware and many clones have arisen over time, some coming close to the quality of the original, some... well, not quite as much. Aftermarket devices spoof (forge) the Hardware Identification Information that Windows sees and the labels and manufacturer notes on the housing itself. There simply is no rock-solid way to properly identify these devices to separate the good from the ugly. That's the inconvenient truth, any other statement would be a wild guess and not facts. For details see this article . Can I use my wireless Keyboard/Mouse/Headphones with this? Yes, that's the whole purpose of this design \ud83d\ude09 BthPS3 extends the existing vanilla Bluetooth stack, it doesn't replace it (like ScpToolkit and alike did). This means it can never be as close to the original PlayStation Bluetooth stack (we need to play by Microsoft's design rules, remember?) as other solutions but the trade-off of keeping your stock wireless functionality should be worth it. How many devices can I connect at the same time? There is no definitive answer to that one, as it depends heavily on the Bluetooth host hardware (quality, antenna design, size and position) and the amount of \"noise\" in your environment (Bluetooth is a fairly \"weak\" protocol compared to all the other radio chatter that's constantly happening in a common household). Users have reported all sorts of working constellations; like up to 6 controllers connected and working concurrently without any human-noticeable delay. So it's up to you to figure this one out! \ud83d\ude01 Can it emulate another common controller, like Xbox One? Controller emulation is not the job of these drivers, they provide the plumbing required to get them connected to Windows (and stay connected and keep talk), nothing more, nothing less. Other drivers (which you can find on this site) handle the controller-specific work required. Is there any noticeable input lag over Bluetooth? Another stellar question! With no definite answer \ud83d\ude05 The truthful answer would be: don't know, don't care since it hasn't been measured with scientific equipment. The more down-to-earth answer comes from simple experience and interaction, human to machine: no. You might feel it working better or worse compared to USB, real or placebo. Those who ask this question usually just wanna hear \"nope, it's all fine\" so that they can move on. Well, there you have it, you can move on now \ud83d\ude18 Why is the DualShock 4 even supported? Because I can \ud83d\ude1c literally. It wasn't much extra work to add DS4 compatibility, as under the hood it operates quite similar to the DS3, without the unnecessary quirks. The DualShock 4 works natively without any custom drivers on Windows if paired in \"PC mode\" (PS and share button pressed at the same time until the light bar flashes rapidly), but a little known \"secret\" about this device is, that by default it operates in \"PS mode\" (PlayStation Bluetooth compatible) which BthPS3 can emulate! For now this doesn't really have any real-world advantages but leaves a backdoor for experimentation, if adventurous developers wanna talk to it they way the PlayStation originally does. How do I uninstall this? In case you don't want/need the software anymore or you're getting this setup message: Simply head over to Apps & features and uninstall from there: Follow the instructions of the uninstaller and you're all set! \ud83d\udc4b","title":"Frequently Asked Questions about BthPS3"},{"location":"projects/BthPS3/Frequently-Asked-Questions/#frequently-asked-questions-about-bthps3","text":"Got questions? Who can blame you \ud83d\ude05 we can provide some answers, though! Read on, traveler!","title":"Frequently Asked Questions about BthPS3"},{"location":"projects/BthPS3/Frequently-Asked-Questions/#how-to-fix-this-setup-message","text":"Your Bluetooth isn't working \ud83d\ude42 If you're on a Laptop, make sure you haven't disabled wireless either via a physical switch or a key combination (depends on the device model). On Desktop, make sure you actually have a Bluetooth dongle plugged in \ud83d\ude09 If you had other solutions like ScpToolkit or AirBender installed, make sure they have been removed completely and you run stock drivers. If you don't see the little Bluetooth tray icon in your taskbar, chances are your Bluetooth isn't working or turned on. Fix it and setup will be happy \ud83d\ude18","title":"How to fix this setup message?"},{"location":"projects/BthPS3/Frequently-Asked-Questions/#what-bluetooth-hosts-are-supported","text":"In short: all of them manufactured within the last decade and running proper stock drivers (means no ScpServer/ScpToolkit, no AirBender, stock as the manufacturer intended). For details see this article . There's a catch Only host radios using USB are supported! This includes the majority of external dongles or integrated cards (they use USB under the hood to connect to the rest of the system). So if your device is using something more exotic like I\u00b2C or UART, I'm afraid that's not gonna work \ud83d\ude14","title":"What Bluetooth hosts are supported?"},{"location":"projects/BthPS3/Frequently-Asked-Questions/#what-controllers-are-supported","text":"TL;DR The genuine original Sony hardware, anything else is a nice-to-have that may or may not work \u2728 This is unfortunately impossible to answer a 100% correctly. These drivers have been designed with compromises in mind. They aim to support the original genuine Sony SIXAXIS/DualShock 3 (and Navigation, Move) controllers while operating within the realms of possibilities the Microsoft Bluetooth stack offers and allows. The DualShock 3 (or DS3 in short) has been a fairly popular piece of hardware and many clones have arisen over time, some coming close to the quality of the original, some... well, not quite as much. Aftermarket devices spoof (forge) the Hardware Identification Information that Windows sees and the labels and manufacturer notes on the housing itself. There simply is no rock-solid way to properly identify these devices to separate the good from the ugly. That's the inconvenient truth, any other statement would be a wild guess and not facts. For details see this article .","title":"What controllers are supported?"},{"location":"projects/BthPS3/Frequently-Asked-Questions/#can-i-use-my-wireless-keyboardmouseheadphones-with-this","text":"Yes, that's the whole purpose of this design \ud83d\ude09 BthPS3 extends the existing vanilla Bluetooth stack, it doesn't replace it (like ScpToolkit and alike did). This means it can never be as close to the original PlayStation Bluetooth stack (we need to play by Microsoft's design rules, remember?) as other solutions but the trade-off of keeping your stock wireless functionality should be worth it.","title":"Can I use my wireless Keyboard/Mouse/Headphones with this?"},{"location":"projects/BthPS3/Frequently-Asked-Questions/#how-many-devices-can-i-connect-at-the-same-time","text":"There is no definitive answer to that one, as it depends heavily on the Bluetooth host hardware (quality, antenna design, size and position) and the amount of \"noise\" in your environment (Bluetooth is a fairly \"weak\" protocol compared to all the other radio chatter that's constantly happening in a common household). Users have reported all sorts of working constellations; like up to 6 controllers connected and working concurrently without any human-noticeable delay. So it's up to you to figure this one out! \ud83d\ude01","title":"How many devices can I connect at the same time?"},{"location":"projects/BthPS3/Frequently-Asked-Questions/#can-it-emulate-another-common-controller-like-xbox-one","text":"Controller emulation is not the job of these drivers, they provide the plumbing required to get them connected to Windows (and stay connected and keep talk), nothing more, nothing less. Other drivers (which you can find on this site) handle the controller-specific work required.","title":"Can it emulate another common controller, like Xbox One?"},{"location":"projects/BthPS3/Frequently-Asked-Questions/#is-there-any-noticeable-input-lag-over-bluetooth","text":"Another stellar question! With no definite answer \ud83d\ude05 The truthful answer would be: don't know, don't care since it hasn't been measured with scientific equipment. The more down-to-earth answer comes from simple experience and interaction, human to machine: no. You might feel it working better or worse compared to USB, real or placebo. Those who ask this question usually just wanna hear \"nope, it's all fine\" so that they can move on. Well, there you have it, you can move on now \ud83d\ude18","title":"Is there any noticeable input lag over Bluetooth?"},{"location":"projects/BthPS3/Frequently-Asked-Questions/#why-is-the-dualshock-4-even-supported","text":"Because I can \ud83d\ude1c literally. It wasn't much extra work to add DS4 compatibility, as under the hood it operates quite similar to the DS3, without the unnecessary quirks. The DualShock 4 works natively without any custom drivers on Windows if paired in \"PC mode\" (PS and share button pressed at the same time until the light bar flashes rapidly), but a little known \"secret\" about this device is, that by default it operates in \"PS mode\" (PlayStation Bluetooth compatible) which BthPS3 can emulate! For now this doesn't really have any real-world advantages but leaves a backdoor for experimentation, if adventurous developers wanna talk to it they way the PlayStation originally does.","title":"Why is the DualShock 4 even supported?"},{"location":"projects/BthPS3/Frequently-Asked-Questions/#how-do-i-uninstall-this","text":"In case you don't want/need the software anymore or you're getting this setup message: Simply head over to Apps & features and uninstall from there: Follow the instructions of the uninstaller and you're all set! \ud83d\udc4b","title":"How do I uninstall this?"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/","text":"Installation Guide (Shibari Edition) \ud83d\udea8 Obsolete solution \ud83d\udea8 DsHidMini (official successor) has been released, please use that instead! This article will remain online for historic reasons but use is discouraged as no more updates will follow! What's this Ever wanted to use those pesky outdated yet absolutely lovely game controller devices shipped with your PlayStation(R) 3 on the Windows platform without constantly tripping over wires in your living room and risking becoming a victim of gravity? Well fear no more, you've come to the right place, mate! We got just the piece of magnificent software you need and all it will cost you is a few minutes of your precious time! Coming to you from the Austrian University of Awesome (AUA ), BthPS3 has surfaced as the result of research and development by one crazed fella; Dr. Nefarius ! Known for his expertise of building software nobody knows how to even install or, for that matter, getting rid of! Sounds exciting? Want to join the herd and risk getting your PC turned into something even greater than before? Well, what are you even waiting for, keep on reading, spirited traveler! Uh, what do you need from me Simple! Just latest Windows 10 and any Bluetooth USB device or integrated card (like those you commonly find in portable computers, a.k.a. Laptops) running stock (a.k.a vanilla) drivers! No SCP , no AirBender , just the defaults (well, not quite, but keep on reading 'till the bottom of the page! ) Sweet, give me! How to install Download Setup for Windows 10 Latest BthPS3 Bluetooth Drivers Grab and run the setup, it will tell you everything you need to know, just click through it Now is the time to plug in your Bluetooth dongle, if you haven't already If you have an integrated card - like on laptops - make sure it is turned ON before you continue! If you don't, setup will be very sad and will abort mission. So play along and ensure it's happy, will ya Alright, that was scary, what to do next? Fear not, we're almost at the finish line! Now comes the part that's a bit rough but together we shall succeed! Get all the files Download and store all the fun listed here somewhere on your battle station Get the latest Shibari.zip from here (always pick the highest version number from the bottom for most recent release) This plays the \"middle man\" between all those drivers you'll install Get the latest FireShock.zip from here This is required for USB connection and automatic pairing Get the latest ViGEm Bus Driver from here This is required for presenting the devices as either Xbox 360 or DualShock 4 controllers to games Install drivers Extract the FireShock archive somewhere and simply execute the dpinst (or dpinst64 ) tool included which will install the USB driver Run the ViGEm Bus Driver setup and simply click through it until finished Ready for some action You made it this far? Great! Remember that Shibari archive from earlier? Extract that somewhere and have a look into the resulting folder. Simply fire up Shibari.Dom.Server.exe in there and your connected DS3 should spawn a virtual Xbox 360 and DualShock 4 controller which your games can pick up. Keep Shibari running for everything to work properly! Check the following F.A.Q. to see how to make it run permanently. Enjoy! F.A.Q. Have you gone insane? Maybe! When you stare into the kernel for too long, the kernel stares back Is this some official Sony thing? Well, obviously not, as clearly stated literally everywhere! It's a research project I started for fun and pushed towards becoming production-ready and thought it might be of use to my fellow gamers! Does this thing phone home? I see some network traffic once a day... I ship a self-updater with my drivers since pushing security/stability critical enhancements is vital for drivers. The updater checks updates.vigem.org once a day and remains silent if you're sporting the most recent version. There's a scheduled task called BthPS3Updater you can disable/delete by hand if this makes you nervous. Not a thing anymore since v1.3.x of BthPS3. Why don't you cover Windows versions lower than 10? Production-signing is unfortunately fairly annoying and unnecessary complicated for drivers targeting multiple major revisions of Windows so to keep my sanity I went for Windows 10 only. The code of BthPS3 is - as we speak - technically compatible from Windows 7 to 10 so it could be back-ported in the future with little efforts. Starting with this commit Windows 7 support is no longer given due to the introduction of a dependency not present in older OS versions. Why is this Shibari thingy necessary to run this clutter? I have plans for getting completely rid of this requirement, but that requires additional drivers which I've started working on but currently don't have the drive or capacity to deal with. Maybe if support and interest from the community rises above a certain threshold I'll tackle that topic some day again! No need, use DsHidMini instead of Shibari and FireShock! How do I get pressure sensitive buttons in PCSX2 with this? That is possible but out of the scope of this project. DsHidMini can do that for you ! Can I use the motion capabilities of the PS3 controllers? That is possible but out of the scope of this project. I want some battery charge indicator, like SCP! That is possible but out of the scope of this project. DsHidMini can do that for you ! Can I have all SCP features like quick disconnect combo etc.? That is possible but out of the scope of this project. DsHidMini can do that for you ! I sometimes need to power on the controller twice or more until it stays connected... That's due to how certain connection details get stored within the Microsoft Bluetooth DDIs and when the driver attaches, there's no way around that other than just powering the controller on again! The setup version doesn't match the driver version it installs... That's intentional; not every tweak and fix the setup itself receives necessarily requires an update of the driver binaries. So all fine there! I want a DualShock 4 emulated, not an Xbox 360 controller! Open settings.json in your Shibari folder and check out the comments in the \"sinks\" section Ever since I've installed this, my DS3 isn't working anymore in PSNow! FireShock and Sonys official sixaxis driver they ship with PSNow unfortunately can't coexist on the same system, if you want \"traditional\" USB support back you need to uninstall FireShock : Use DsHidMini instead to get that feature back! Ever since I've installed this, my DS4 isn't connecting anymore at all! This is a bit tricky at the moment; I've added a workaround to combat this where you should be able to use it like before without any troubles if you simply power it on, let it shut off after one or two seconds and then within a time span of ten seconds power it on again and it should work. How can I keep Shibari running in the background? Shibari can easily be installed as a Windows Service running in the background without the need to start it every time you'd like to use your devices and have an additional Window open all the time. Fire up PowerShell as Administrator and run the Shibari.Dom.Server.exe file with install as an argument, like so: The path to the executable file has to match the one on your machine of course \ud83d\ude09 Right after that start the service: Start-Service Shibari . Dom . Server Check that the service is running: Get-Service Shibari . Dom . Server Done, delightful \ud83d\ude03 My controller is randomly pressing buttons or axes jitter, bug!!1! Nope, this isn't and never was a software issue. Any misbehavior in regards to reported inputs comes from the controller hardware itself, not my tools. In short: your device is damaged or reached the end of its lifespan, sorry! Time to replace! \ud83d\ude14 If you sport some of those lovely fake aftermarket devices from questionable stores from far away costing only a dime or two then you might have been screwed over and my software is not here to fix hardware manufacturers cuts, get proper genuine hardware or at least higher quality replicas Copyright (C) 2018-2021 - Nefarius Software Solutions e.U. This is a community project and not affiliated with Sony Interactive Entertainment Inc. in any way. \"PlayStation\", \"PSP\", \"PS2\", \"PS one\", \"DUALSHOCK\" and \"SIXAXIS\" are registered trademarks of Sony Interactive Entertainment Inc.","title":"Installation Guide (Shibari Edition)"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#installation-guide-shibari-edition","text":"\ud83d\udea8 Obsolete solution \ud83d\udea8 DsHidMini (official successor) has been released, please use that instead! This article will remain online for historic reasons but use is discouraged as no more updates will follow!","title":"Installation Guide (Shibari Edition)"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#whats-this","text":"Ever wanted to use those pesky outdated yet absolutely lovely game controller devices shipped with your PlayStation(R) 3 on the Windows platform without constantly tripping over wires in your living room and risking becoming a victim of gravity? Well fear no more, you've come to the right place, mate! We got just the piece of magnificent software you need and all it will cost you is a few minutes of your precious time! Coming to you from the Austrian University of Awesome (AUA ), BthPS3 has surfaced as the result of research and development by one crazed fella; Dr. Nefarius ! Known for his expertise of building software nobody knows how to even install or, for that matter, getting rid of! Sounds exciting? Want to join the herd and risk getting your PC turned into something even greater than before? Well, what are you even waiting for, keep on reading, spirited traveler!","title":"What's this"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#uh-what-do-you-need-from-me","text":"Simple! Just latest Windows 10 and any Bluetooth USB device or integrated card (like those you commonly find in portable computers, a.k.a. Laptops) running stock (a.k.a vanilla) drivers! No SCP , no AirBender , just the defaults (well, not quite, but keep on reading 'till the bottom of the page! )","title":"Uh, what do you need from me"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#sweet-give-me-how-to-install","text":"Download Setup for Windows 10 Latest BthPS3 Bluetooth Drivers Grab and run the setup, it will tell you everything you need to know, just click through it Now is the time to plug in your Bluetooth dongle, if you haven't already If you have an integrated card - like on laptops - make sure it is turned ON before you continue! If you don't, setup will be very sad and will abort mission. So play along and ensure it's happy, will ya","title":"Sweet, give me! How to install"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#alright-that-was-scary-what-to-do-next","text":"Fear not, we're almost at the finish line! Now comes the part that's a bit rough but together we shall succeed!","title":"Alright, that was scary, what to do next?"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#get-all-the-files","text":"Download and store all the fun listed here somewhere on your battle station Get the latest Shibari.zip from here (always pick the highest version number from the bottom for most recent release) This plays the \"middle man\" between all those drivers you'll install Get the latest FireShock.zip from here This is required for USB connection and automatic pairing Get the latest ViGEm Bus Driver from here This is required for presenting the devices as either Xbox 360 or DualShock 4 controllers to games","title":"Get all the files"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#install-drivers","text":"Extract the FireShock archive somewhere and simply execute the dpinst (or dpinst64 ) tool included which will install the USB driver Run the ViGEm Bus Driver setup and simply click through it until finished","title":"Install drivers"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#ready-for-some-action","text":"You made it this far? Great! Remember that Shibari archive from earlier? Extract that somewhere and have a look into the resulting folder. Simply fire up Shibari.Dom.Server.exe in there and your connected DS3 should spawn a virtual Xbox 360 and DualShock 4 controller which your games can pick up. Keep Shibari running for everything to work properly! Check the following F.A.Q. to see how to make it run permanently. Enjoy!","title":"Ready for some action"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#faq","text":"","title":"F.A.Q."},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#have-you-gone-insane","text":"Maybe! When you stare into the kernel for too long, the kernel stares back","title":"Have you gone insane?"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#is-this-some-official-sony-thing","text":"Well, obviously not, as clearly stated literally everywhere! It's a research project I started for fun and pushed towards becoming production-ready and thought it might be of use to my fellow gamers!","title":"Is this some official Sony thing?"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#does-this-thing-phone-home-i-see-some-network-traffic-once-a-day","text":"I ship a self-updater with my drivers since pushing security/stability critical enhancements is vital for drivers. The updater checks updates.vigem.org once a day and remains silent if you're sporting the most recent version. There's a scheduled task called BthPS3Updater you can disable/delete by hand if this makes you nervous. Not a thing anymore since v1.3.x of BthPS3.","title":"Does this thing phone home? I see some network traffic once a day..."},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#why-dont-you-cover-windows-versions-lower-than-10","text":"Production-signing is unfortunately fairly annoying and unnecessary complicated for drivers targeting multiple major revisions of Windows so to keep my sanity I went for Windows 10 only. The code of BthPS3 is - as we speak - technically compatible from Windows 7 to 10 so it could be back-ported in the future with little efforts. Starting with this commit Windows 7 support is no longer given due to the introduction of a dependency not present in older OS versions.","title":"Why don't you cover Windows versions lower than 10?"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#why-is-this-shibari-thingy-necessary-to-run-this-clutter","text":"I have plans for getting completely rid of this requirement, but that requires additional drivers which I've started working on but currently don't have the drive or capacity to deal with. Maybe if support and interest from the community rises above a certain threshold I'll tackle that topic some day again! No need, use DsHidMini instead of Shibari and FireShock!","title":"Why is this Shibari thingy necessary to run this clutter?"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#how-do-i-get-pressure-sensitive-buttons-in-pcsx2-with-this","text":"That is possible but out of the scope of this project. DsHidMini can do that for you !","title":"How do I get pressure sensitive buttons in PCSX2 with this?"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#can-i-use-the-motion-capabilities-of-the-ps3-controllers","text":"That is possible but out of the scope of this project.","title":"Can I use the motion capabilities of the PS3 controllers?"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#i-want-some-battery-charge-indicator-like-scp","text":"That is possible but out of the scope of this project. DsHidMini can do that for you !","title":"I want some battery charge indicator, like SCP!"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#can-i-have-all-scp-features-like-quick-disconnect-combo-etc","text":"That is possible but out of the scope of this project. DsHidMini can do that for you !","title":"Can I have all SCP features like quick disconnect combo etc.?"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#i-sometimes-need-to-power-on-the-controller-twice-or-more-until-it-stays-connected","text":"That's due to how certain connection details get stored within the Microsoft Bluetooth DDIs and when the driver attaches, there's no way around that other than just powering the controller on again!","title":"I sometimes need to power on the controller twice or more until it stays connected..."},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#the-setup-version-doesnt-match-the-driver-version-it-installs","text":"That's intentional; not every tweak and fix the setup itself receives necessarily requires an update of the driver binaries. So all fine there!","title":"The setup version doesn't match the driver version it installs..."},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#i-want-a-dualshock-4-emulated-not-an-xbox-360-controller","text":"Open settings.json in your Shibari folder and check out the comments in the \"sinks\" section","title":"I want a DualShock 4 emulated, not an Xbox 360 controller!"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#ever-since-ive-installed-this-my-ds3-isnt-working-anymore-in-psnow","text":"FireShock and Sonys official sixaxis driver they ship with PSNow unfortunately can't coexist on the same system, if you want \"traditional\" USB support back you need to uninstall FireShock : Use DsHidMini instead to get that feature back!","title":"Ever since I've installed this, my DS3 isn't working anymore in PSNow!"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#ever-since-ive-installed-this-my-ds4-isnt-connecting-anymore-at-all","text":"This is a bit tricky at the moment; I've added a workaround to combat this where you should be able to use it like before without any troubles if you simply power it on, let it shut off after one or two seconds and then within a time span of ten seconds power it on again and it should work.","title":"Ever since I've installed this, my DS4 isn't connecting anymore at all!"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#how-can-i-keep-shibari-running-in-the-background","text":"Shibari can easily be installed as a Windows Service running in the background without the need to start it every time you'd like to use your devices and have an additional Window open all the time. Fire up PowerShell as Administrator and run the Shibari.Dom.Server.exe file with install as an argument, like so: The path to the executable file has to match the one on your machine of course \ud83d\ude09 Right after that start the service: Start-Service Shibari . Dom . Server Check that the service is running: Get-Service Shibari . Dom . Server Done, delightful \ud83d\ude03","title":"How can I keep Shibari running in the background?"},{"location":"projects/BthPS3/Installation-Guide-Shibari-Edition/#my-controller-is-randomly-pressing-buttons-or-axes-jitter-bug1","text":"Nope, this isn't and never was a software issue. Any misbehavior in regards to reported inputs comes from the controller hardware itself, not my tools. In short: your device is damaged or reached the end of its lifespan, sorry! Time to replace! \ud83d\ude14 If you sport some of those lovely fake aftermarket devices from questionable stores from far away costing only a dime or two then you might have been screwed over and my software is not here to fix hardware manufacturers cuts, get proper genuine hardware or at least higher quality replicas Copyright (C) 2018-2021 - Nefarius Software Solutions e.U. This is a community project and not affiliated with Sony Interactive Entertainment Inc. in any way. \"PlayStation\", \"PSP\", \"PS2\", \"PS one\", \"DUALSHOCK\" and \"SIXAXIS\" are registered trademarks of Sony Interactive Entertainment Inc.","title":"My controller is randomly pressing buttons or axes jitter, bug!!1!"},{"location":"projects/DsHidMini/","text":"About DsHidMini DsHidMini is a universal driver for the dated yet beloved DualShock 3 Controllers used by the Sony PlayStation 3 (Navigation and Motion Controller support is planned). It's aimed to be a full, modern replacement of the discontinued ScpToolkit, feature-rich yet lightweight providing a wide range of compatibility with existing Games, Tools and Emulators. Developed for and compatible with latest Windows 10. Installation Join the cool-kids-gang and simply follow the installation instructions ! Demo-Videos 2021-03-08 DsHidMini DS4 mode custom LED Demo 2021-03-08 DsHidMini SDF mode explained with PCSX2 v1.7.0 2021-02-27 DsHidMini Demo RPCS3 2021-02-10 DsHidMini USB LED Charging Animation 2020-10-20 Rumble Racing ForeFeedback packet tracing PCSX2 1.5.0 2020-03-18 DsHidMini Demo PCSX2 1.5.0 Copyright (C) 2020-2021 - Nefarius Software Solutions e.U. This is a community project and not affiliated with Sony Interactive Entertainment Inc. in any way. \"PlayStation\", \"PSP\", \"PS2\", \"PS one\", \"DUALSHOCK\" and \"SIXAXIS\" are registered trademarks of Sony Interactive Entertainment Inc.","title":"About DsHidMini"},{"location":"projects/DsHidMini/#about-dshidmini","text":"DsHidMini is a universal driver for the dated yet beloved DualShock 3 Controllers used by the Sony PlayStation 3 (Navigation and Motion Controller support is planned). It's aimed to be a full, modern replacement of the discontinued ScpToolkit, feature-rich yet lightweight providing a wide range of compatibility with existing Games, Tools and Emulators. Developed for and compatible with latest Windows 10.","title":"About DsHidMini"},{"location":"projects/DsHidMini/#installation","text":"Join the cool-kids-gang and simply follow the installation instructions !","title":"Installation"},{"location":"projects/DsHidMini/#demo-videos","text":"","title":"Demo-Videos"},{"location":"projects/DsHidMini/#2021-03-08-dshidmini-ds4-mode-custom-led-demo","text":"","title":"2021-03-08 DsHidMini DS4 mode custom LED Demo"},{"location":"projects/DsHidMini/#2021-03-08-dshidmini-sdf-mode-explained-with-pcsx2-v170","text":"","title":"2021-03-08 DsHidMini SDF mode explained with PCSX2 v1.7.0"},{"location":"projects/DsHidMini/#2021-02-27-dshidmini-demo-rpcs3","text":"","title":"2021-02-27 DsHidMini Demo RPCS3"},{"location":"projects/DsHidMini/#2021-02-10-dshidmini-usb-led-charging-animation","text":"","title":"2021-02-10 DsHidMini USB LED Charging Animation"},{"location":"projects/DsHidMini/#2020-10-20-rumble-racing-forefeedback-packet-tracing-pcsx2-150","text":"","title":"2020-10-20 Rumble Racing ForeFeedback packet tracing PCSX2 1.5.0"},{"location":"projects/DsHidMini/#2020-03-18-dshidmini-demo-pcsx2-150","text":"Copyright (C) 2020-2021 - Nefarius Software Solutions e.U. This is a community project and not affiliated with Sony Interactive Entertainment Inc. in any way. \"PlayStation\", \"PSP\", \"PS2\", \"PS one\", \"DUALSHOCK\" and \"SIXAXIS\" are registered trademarks of Sony Interactive Entertainment Inc.","title":"2020-03-18 DsHidMini Demo PCSX2 1.5.0"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/","text":"DS4Windows Mode User Guide Jays2Kings' DS4Windows IS NOT SUPPORTED ! If you just search \"DS4Windows\" on Google/Bing/whatever the first result will probably be the obsolete Jays2Kings' version In DS4Windows HID Device Mode, the controller appears as a custom device that can only be detected by Ryochan7's DS4Windows , allowing the user to then emulate a DualShock 4 or Xbox 360 ( XInput ) controller as well as make use of most of its features. What does work Xbox 360 ( XInput ) / DualShock 4 emulation according to the selected profile settings in DS4Windows Rumble works as normal DS4's Touchpad Button can be used by remapping a button to it (e.g.: use Select as the TP button instead of Share ) DS3's LEDs can be controlled by setting the correct Light Bar colors (more on that on a later section) DS4Windows's Flash Lightbar at High Latency function makes the LEDs flash accordingly Basically every other DS4Windows function that is not related to the Light Bar or motion works as intended What does not work DS3 controllers are always recognized as if they were connected by USB. As such, DS4Windows Bluetooth functions like auto-disconnect on idle and disconnect on button combo are not supported. This is a limitation on DsHidMini side and can't be fixed by DS4Windows. The built-in equivalent functions of DsHidMini should be used instead Motion/UDP server is not supported and will remain so until someone manages to translate the motion info from the DS3 to the DS4 motion standard Settings that make the Light Bar color flash, pulse or change randomly (rainbow mode) are not supported Specific DS4 touchpad movements are not supported, only the Touchpad Button (another button needs to be remapped to it) Using the controller with DS4Windows To start, the controller must be in DS4Windows mode Download the latest Ryochan7's DS4Windows release package according to your Windows 10 version Extract the package to an easily accessible folder Run DS4Windows.exe Install the ViGEmBus Driver if asked to After that, the controller should be properly recognized by DS4Windows. If it's not, verify again if it is in \" DS4Windows mode \". What now? From here, DS4Windows can be used mostly as usual. XInput and DS4 emulation, as well other functions, can then be set-up in the profiles settings according to the user needs. Besides that: Keep in mind: Select and Start buttons are recognized as the Share and Options buttons in DS4Windows In case you need, there are more detailed instructions on how to change to DS4 emulation If you want your controller's LEDs to represent the current battery level, see Simple Led Control -> Example 2 If you want the current selected profile to be represented by a specific LED or LED combination on the controller, read the Light Bar to LEDs translation section It's recommended you have a quick look at the DS4Windows Frequently Asked Questions section, read at least the title of the topics Light Bar color to LEDs translation Optional section Read this section if you want to control your controller's LEDs to show the current battery or selected profile By setting the correct Light Bar color values in the profile settings it is possible to control the LEDs on the DS3, which can be useful to: Make the controller's LEDs represent the current battery level Represent the current selected profile as a specific LED Indicate the battery level by using Special Actions in the profile's settings Beware that functions in DS4Windows that make the Light Bar flash, pulse or randomize the colors ( rainbow mode ) are not supported and can make the LEDs change to an undesired state, though the Flash Light Bar at High Latency function do is supported and will make the LEDs flash at a high frequency. Simple LED control Simple to set-up Good to represent which profile is active (see example 1) Necessary when making DS4Windows show the controller's battery level and for battery related Special Actions (see examples 2 and 3 respectively) When this form of translation is active, the Red color value will be translated to the LEDs state according to the following table: RED value (Dec) LED state 0 - 64 Blinking LED 1 65 - 94 LED 1 95 - 148 LED 2 149 - 201 LED 3 202 - 255 LED 4 FORMS OF ACTIVATION: Simple LED control mode How to activate Description Single mode Green and Blue = 0 Only the chosen LED is ON Filling Mode Green = 0, Blue = 255 The chosen LED and the ones before it are ON e.g. 1: Setting up a profile to be represented as LED 3 only ( single mode ). e.g. 2: Setting up a profile to reflect the controller's battery level. e.g. 3: Setting up a Special Action to make the LEDs reflect the controller's battery level. Complete LED control \"Harder\" to set-up (not really) Allows any combination of LEDs on Useful if the user wants to differentiate between more than 4 profiles HOW TO ACTIVATE: Green and Blue = 255 When this form of translation is active, the Red color value from 0 to 15 will be translated to the LEDs state according to the following table: LED 4 LED 3 LED 2 LED 1 RED value (Dec) 0 ON 1 ON 2 ON ON 3 ON 4 ON ON 5 ON ON 6 ON ON ON 7 ON 8 ON ON 9 ON ON 10 ON ON ON 11 ON ON 12 ON ON ON 13 ON ON ON 14 ON ON ON ON 15 e.g.: Setting up a profile to be represented as LEDs 4 and 2. Frequently Asked Questions How do I change between XInput and DS4 emulation? The controller that DS4Windows emulates is dependent on the current selected profile. By default, the profile that comes with DS4Windows called... Default ... is set to emulate a Xbox 360 controller. You can create new profiles with different settings to best fit your use case, though this section will focus solely on creating a profile with DS4 emulation: Go to the Profiles tab Click on the \"New\" button to create a new profile When asked if a preset is to be used, choose \"yes\" Select Gamepad and then DualShock 4 at the Output Controller Adjust the Light Bar color to what you desire acordingly to the Light Bar to LEDs translation section (in the example below the profile will be represented by LED 2) Give a name to your profile (e.g.: DS3 to DS4) Save the profile Back in the Controllers tab, click on the Selected profile box and change from default to the profile you just created And done, now you can switch between XInput/DS4 emulation by changing between profiles. Keep in mind that some games that support DS4 controllers use the Touch Pad for options/to open the map/etc. In this case, you'll need to remap a button as the Touch Pad button on a new profile to use it. Select button is not recognized in some games when emulating a DS4 / How do I use the Touch Pad button? A DS3 controller has 13 buttons while a real DS4 controller has 14, this extra button being the Touch Pad button which can't be mapped directly to the DS3 by DsHidMini. Some games that support DS4 controllers use the Touch Pad for options, opening the map, etc. To work around this, the user needs to remap an existing button to the TP one. Usually, games that use the TP button don't use the Share button (the default Select ), so the usual bet is to remap it to the TP , though any other one can be chosen. So, after creating a profile with DS4 emulation: Duplicate your DS4 profile, choose a different name to it Edit the new profile On the left side, in the DualShock 4 picture, click on the button you want to remap On the new window that appears, select the middle of the Touch Pad Save your profile and switch to it If a game uses both the Share and TP buttons, you can have a profile with Share as it is and the PS button remapped to the TP . Or, if you want more advanced solutions, you can use special actions in the profile settings so you can switch between different profiles by button combinations mid-game. I can't control Steam's Big Picture when using a emulated DS4 / Steam doesn't detect my controller when it's emulated as a DS4, only when emulated as a Xbox 360 Steam (and some really specific games, super rare case) will fully ignore DS4 controllers if it detects that DS4Windows is running. This happens so users don't accidentally have both DS4Windows and Steam remapping the controller. Regardless if Steam is detecting or not the emulated DS4, 99.9% of the games that support DS4 controllers should detect the emulated one as normal . For Steam to stop ignoring the emulated DS4 controller you need run DS4Windows under a custom .exe name: Open DS4Windows Go into the Settings Tab Write the name you want on the Custom exe name box (In the image below the name \"DS4Win\" is used as an example) After the name is set, fully close then re-open DS4Windows and then Steam should detect it as normal It's also recommended going into the Steam's settings -> Controller -> General Controller Configurations -> Leave Playstation Configuration Supported UNCHECKED, so Steam doesn't remap your controller again when you don't want it to. 'X' game does not detect my emulated DS4 / my game is not showing PS button icons First, double check if the game actually supports DS4 controllers and has native PS icons when played with a DualShock 4. There is no direct way to check this besides just testing, Googling around and looking at forums If the game does not support DualShock 4/PS icons then that's in no way related to us and we can't do anything about it If you are 100% sure the game supports PS button icons/DualShock 4, then it may be detecting that DS4Windows is running and then ignoring DS4 controllers (super rare case, only 1 game is known to do it). Check the topic above on how to solve this If the game still doesn't recognize the emulated DualShock 4 then we have no idea what's going on and you are welcome on reaching us through the proper means How do I do 'X' thing on DS4Windows DS4Windows is a really amazing tool that can do lots of things, but the purpose of this guide isn't covering DS4Windows in itself, it's to give users the minimum necessary to have XInput/DS4 emulation and to cover DsHidMini related functions, like Light Bar color to LEDs translation. Because the other things it can do are not related to DsHidMini then it's recommended that you look in its wiki or google around for online tutorials.","title":"DS4Windows Mode User Guide"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#ds4windows-mode-user-guide","text":"Jays2Kings' DS4Windows IS NOT SUPPORTED ! If you just search \"DS4Windows\" on Google/Bing/whatever the first result will probably be the obsolete Jays2Kings' version In DS4Windows HID Device Mode, the controller appears as a custom device that can only be detected by Ryochan7's DS4Windows , allowing the user to then emulate a DualShock 4 or Xbox 360 ( XInput ) controller as well as make use of most of its features.","title":"DS4Windows Mode User Guide"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#what-does-work","text":"Xbox 360 ( XInput ) / DualShock 4 emulation according to the selected profile settings in DS4Windows Rumble works as normal DS4's Touchpad Button can be used by remapping a button to it (e.g.: use Select as the TP button instead of Share ) DS3's LEDs can be controlled by setting the correct Light Bar colors (more on that on a later section) DS4Windows's Flash Lightbar at High Latency function makes the LEDs flash accordingly Basically every other DS4Windows function that is not related to the Light Bar or motion works as intended","title":"What does work"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#what-does-not-work","text":"DS3 controllers are always recognized as if they were connected by USB. As such, DS4Windows Bluetooth functions like auto-disconnect on idle and disconnect on button combo are not supported. This is a limitation on DsHidMini side and can't be fixed by DS4Windows. The built-in equivalent functions of DsHidMini should be used instead Motion/UDP server is not supported and will remain so until someone manages to translate the motion info from the DS3 to the DS4 motion standard Settings that make the Light Bar color flash, pulse or change randomly (rainbow mode) are not supported Specific DS4 touchpad movements are not supported, only the Touchpad Button (another button needs to be remapped to it)","title":"What does not work"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#using-the-controller-with-ds4windows","text":"To start, the controller must be in DS4Windows mode Download the latest Ryochan7's DS4Windows release package according to your Windows 10 version Extract the package to an easily accessible folder Run DS4Windows.exe Install the ViGEmBus Driver if asked to After that, the controller should be properly recognized by DS4Windows. If it's not, verify again if it is in \" DS4Windows mode \".","title":"Using the controller with DS4Windows"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#what-now","text":"From here, DS4Windows can be used mostly as usual. XInput and DS4 emulation, as well other functions, can then be set-up in the profiles settings according to the user needs. Besides that: Keep in mind: Select and Start buttons are recognized as the Share and Options buttons in DS4Windows In case you need, there are more detailed instructions on how to change to DS4 emulation If you want your controller's LEDs to represent the current battery level, see Simple Led Control -> Example 2 If you want the current selected profile to be represented by a specific LED or LED combination on the controller, read the Light Bar to LEDs translation section It's recommended you have a quick look at the DS4Windows Frequently Asked Questions section, read at least the title of the topics","title":"What now?"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#light-bar-color-to-leds-translation","text":"Optional section Read this section if you want to control your controller's LEDs to show the current battery or selected profile By setting the correct Light Bar color values in the profile settings it is possible to control the LEDs on the DS3, which can be useful to: Make the controller's LEDs represent the current battery level Represent the current selected profile as a specific LED Indicate the battery level by using Special Actions in the profile's settings Beware that functions in DS4Windows that make the Light Bar flash, pulse or randomize the colors ( rainbow mode ) are not supported and can make the LEDs change to an undesired state, though the Flash Light Bar at High Latency function do is supported and will make the LEDs flash at a high frequency.","title":"Light Bar color to LEDs translation"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#simple-led-control","text":"Simple to set-up Good to represent which profile is active (see example 1) Necessary when making DS4Windows show the controller's battery level and for battery related Special Actions (see examples 2 and 3 respectively) When this form of translation is active, the Red color value will be translated to the LEDs state according to the following table: RED value (Dec) LED state 0 - 64 Blinking LED 1 65 - 94 LED 1 95 - 148 LED 2 149 - 201 LED 3 202 - 255 LED 4 FORMS OF ACTIVATION: Simple LED control mode How to activate Description Single mode Green and Blue = 0 Only the chosen LED is ON Filling Mode Green = 0, Blue = 255 The chosen LED and the ones before it are ON e.g. 1: Setting up a profile to be represented as LED 3 only ( single mode ). e.g. 2: Setting up a profile to reflect the controller's battery level. e.g. 3: Setting up a Special Action to make the LEDs reflect the controller's battery level.","title":"Simple LED control"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#complete-led-control","text":"\"Harder\" to set-up (not really) Allows any combination of LEDs on Useful if the user wants to differentiate between more than 4 profiles HOW TO ACTIVATE: Green and Blue = 255 When this form of translation is active, the Red color value from 0 to 15 will be translated to the LEDs state according to the following table: LED 4 LED 3 LED 2 LED 1 RED value (Dec) 0 ON 1 ON 2 ON ON 3 ON 4 ON ON 5 ON ON 6 ON ON ON 7 ON 8 ON ON 9 ON ON 10 ON ON ON 11 ON ON 12 ON ON ON 13 ON ON ON 14 ON ON ON ON 15 e.g.: Setting up a profile to be represented as LEDs 4 and 2.","title":"Complete LED control"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#how-do-i-change-between-xinput-and-ds4-emulation","text":"The controller that DS4Windows emulates is dependent on the current selected profile. By default, the profile that comes with DS4Windows called... Default ... is set to emulate a Xbox 360 controller. You can create new profiles with different settings to best fit your use case, though this section will focus solely on creating a profile with DS4 emulation: Go to the Profiles tab Click on the \"New\" button to create a new profile When asked if a preset is to be used, choose \"yes\" Select Gamepad and then DualShock 4 at the Output Controller Adjust the Light Bar color to what you desire acordingly to the Light Bar to LEDs translation section (in the example below the profile will be represented by LED 2) Give a name to your profile (e.g.: DS3 to DS4) Save the profile Back in the Controllers tab, click on the Selected profile box and change from default to the profile you just created And done, now you can switch between XInput/DS4 emulation by changing between profiles. Keep in mind that some games that support DS4 controllers use the Touch Pad for options/to open the map/etc. In this case, you'll need to remap a button as the Touch Pad button on a new profile to use it.","title":"How do I change between XInput and DS4 emulation?"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#select-button-is-not-recognized-in-some-games-when-emulating-a-ds4-how-do-i-use-the-touch-pad-button","text":"A DS3 controller has 13 buttons while a real DS4 controller has 14, this extra button being the Touch Pad button which can't be mapped directly to the DS3 by DsHidMini. Some games that support DS4 controllers use the Touch Pad for options, opening the map, etc. To work around this, the user needs to remap an existing button to the TP one. Usually, games that use the TP button don't use the Share button (the default Select ), so the usual bet is to remap it to the TP , though any other one can be chosen. So, after creating a profile with DS4 emulation: Duplicate your DS4 profile, choose a different name to it Edit the new profile On the left side, in the DualShock 4 picture, click on the button you want to remap On the new window that appears, select the middle of the Touch Pad Save your profile and switch to it If a game uses both the Share and TP buttons, you can have a profile with Share as it is and the PS button remapped to the TP . Or, if you want more advanced solutions, you can use special actions in the profile settings so you can switch between different profiles by button combinations mid-game.","title":"Select button is not recognized in some games when emulating a DS4 / How do I use the Touch Pad button?"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#i-cant-control-steams-big-picture-when-using-a-emulated-ds4-steam-doesnt-detect-my-controller-when-its-emulated-as-a-ds4-only-when-emulated-as-a-xbox-360","text":"Steam (and some really specific games, super rare case) will fully ignore DS4 controllers if it detects that DS4Windows is running. This happens so users don't accidentally have both DS4Windows and Steam remapping the controller. Regardless if Steam is detecting or not the emulated DS4, 99.9% of the games that support DS4 controllers should detect the emulated one as normal . For Steam to stop ignoring the emulated DS4 controller you need run DS4Windows under a custom .exe name: Open DS4Windows Go into the Settings Tab Write the name you want on the Custom exe name box (In the image below the name \"DS4Win\" is used as an example) After the name is set, fully close then re-open DS4Windows and then Steam should detect it as normal It's also recommended going into the Steam's settings -> Controller -> General Controller Configurations -> Leave Playstation Configuration Supported UNCHECKED, so Steam doesn't remap your controller again when you don't want it to.","title":"I can't control Steam's Big Picture when using a emulated DS4 / Steam doesn't detect my controller when it's emulated as a DS4, only when emulated as a Xbox 360"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#x-game-does-not-detect-my-emulated-ds4-my-game-is-not-showing-ps-button-icons","text":"First, double check if the game actually supports DS4 controllers and has native PS icons when played with a DualShock 4. There is no direct way to check this besides just testing, Googling around and looking at forums If the game does not support DualShock 4/PS icons then that's in no way related to us and we can't do anything about it If you are 100% sure the game supports PS button icons/DualShock 4, then it may be detecting that DS4Windows is running and then ignoring DS4 controllers (super rare case, only 1 game is known to do it). Check the topic above on how to solve this If the game still doesn't recognize the emulated DualShock 4 then we have no idea what's going on and you are welcome on reaching us through the proper means","title":"'X' game does not detect my emulated DS4 / my game is not showing PS button icons"},{"location":"projects/DsHidMini/DS4-Mode-User-Guide/#how-do-i-do-x-thing-on-ds4windows","text":"DS4Windows is a really amazing tool that can do lots of things, but the purpose of this guide isn't covering DS4Windows in itself, it's to give users the minimum necessary to have XInput/DS4 emulation and to cover DsHidMini related functions, like Light Bar color to LEDs translation. Because the other things it can do are not related to DsHidMini then it's recommended that you look in its wiki or google around for online tutorials.","title":"How do I do 'X' thing on DS4Windows"},{"location":"projects/DsHidMini/FAQ/","text":"Frequently Asked Questions XInput? DS3? DS4? What are you talking about? Know the terms The controller shipped with the Sony PlayStation 3 \ud83d\udc49 DualShock 3 ( DS3 ) The controller shipped with the Sony PlayStation 4 \ud83d\udc49 DualShock 4 ( DS4 ) Xbox 360 controller \ud83d\udc49 XInput (compatible) controller/device What is DsHidMini? Check out the repository README and the main project page . I am already using ScpToolKit / MotionInJoy / Shibari / Whatever, should I move to DsHidMini? That is entirely up to you of course \ud83d\ude42 Do you wish to stick with abandoned, outdated, unmaintained, complex and potentially untrustworthy software that will work less and less the further Windows and Games advance or do you want to step into the light and use fresh, stable, thought-through open software that simple delivers what it promises? Your call \ud83d\ude09 How do I use it? Follow the How to Install guide Learn the about different DsHidMini HID Device Modes your controller can be, the characteristics each mode and how to change between them After DsHidMini is active and the controller connected, you just need to change to the mode best suited to your use case. Keep in mind that if you want to use your controller as a XInput (Xbox 360) or DualShock 4 controller, there are a few extra steps left to be followed . Does my fake PS3 controller work with DsHidMini? Short answer: it depends. Long answer: it depends \ud83d\ude42 This is community software with no ties to any hardware manufacturer, all we can provide is knowledge based on research and reverse engineering. What are the HID Device Modes? Which one should I use? Go back to the How do I use it? question. What does my controllers' LED represent? How do I quickly disconnect the controller on Bluetooth? Read the Features section of the main GitHub page of DsHidMini. How do I use my controller as a Xbox 360 or DualShock 4? Recommended method Set the controller into DS4Windows Mode and use it with Ryochan7's DS4Windows . For more detailed instructions and other information, follow the DS4Windows Mode User Guide and you'll be good to go. Alternative methods If, for whatever reason, you don't want to use DS4Windows and prefer to choose your own remapping tool, then you have the following options: Using the Controller in SXS Mode + Steam: Steam will detect the controller as an official PlayStation 3 controller as long as PlayStation configuration support is enabled. XInput and DS4 emulation are then done automatically according to what Steam thinks the game supports. Using the controller in SDF or GPJ Mode + another remapping software: in SDF/GPJ Mode the controller is presented as a generic gamepad which can then be used with remapping tools like x360ce, UCR etc. What is the best way to use my controller in games/emulators? The answer is: it depends . You need to verify which Input API is supported in whatever you are using and if you want to use DS3 specific functions, like pressure buttons or motion controls. The following table should help you: \"I want to...\" How to use your DS3 (recommendation) Notes Play modern PC games XInput or DualShock 4 Check the How do I use my controller as a Xbox 360 or DualShock 4? section . Not all modern games support DS4 controllers, and those that do support it sometimes don't support its rumble Use the DS3 as a common gamepad for most emulators XInput or GPJ Mode The gamepad part of GPJ Mode should be compatible with emulators that support only DirectInput Use RetroArch XInput Though RetroArch does support DirectInput , its rumble support is currently broken. XInput should be used instead to have working rumble Use RPCS3 SXS Mode Check the How do I use DsHidMini with RPCS3? section Use the DS3 in PCSX2 with pressure buttons SDF Mode Check the How do I set the controller's pressure buttons in PCSX2? section How do I use DsHidMini with RPCS3? A video demonstration of DsHidMini with RPCS3 video is also available It's recommended that you use your DS3 controller in SXS Mode and then choose on RPCS3's controller settings the DualShock 3 Handler. When doing so, RPCS3 should automatically pick and set your DS3, with full support to all its functions including LEDs, pressure buttons and motion. How do I set the controller's pressure buttons in PCSX2? A video demonstration of DsHidMini's pressure buttons with PCSX2 is also available The recommended method is the following: Set the controller into SDF Mode Go to PCSX2 input settings Make sure DirectInput is activated at the Game Devices APIs options ( DO NOT CHECK the DualShock 3 native mode box) Open the DsHidMini Control Client and check the Mute digital pressure buttons checkbox Back to PCSX2 input settings, on the Pad X tab, configure everything EXCEPT L3 / R3 / Start / Select / Analog / Mouse Go into the DsHidMini Control Client and uncheck the Mute digital pressure buttons Finish setting the L3 / R3 / Start / Select buttons. The Analog and Mouse buttons are not necessary At the Add Force Feedback Effect select your DS3 controller Only Constant Force is required/supported, don't select any other effect, it will not work Finish by clicking on OK How do I use the motion sensors with emulators? The only emulator that can use the DS3 motion sensors is the RPCS3 when using the DualShock 3 handler. For now, it's impossible to use the controller's motion with other emulators , like CEMU, Yuzu, Dolphin etc. The reason for this is that the PS3 controller only has 1 gyroscope, while modern controllers have 3 gyros. While it's possible to \"emulate\" the missing gyros by using the sensors it does have, the whole process involves many maths that are not implemented at the moment and are at the very bottom of DsHidMini's To-Do list. I'm having \"X\" problem when using DsHidMini, what should I do? Trouble when installing DsHidMini or connecting your controllers to the computer: check the How to Install Troubleshooting section Controller works normally most of the time but have random button presses or buttons fail to register: most likely a hardware fault, not related to DsHidMini If you have a different situation than the ones above, feel free to reach us through the proper means .","title":"Frequently Asked Questions"},{"location":"projects/DsHidMini/FAQ/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"projects/DsHidMini/FAQ/#xinput-ds3-ds4-what-are-you-talking-about","text":"Know the terms The controller shipped with the Sony PlayStation 3 \ud83d\udc49 DualShock 3 ( DS3 ) The controller shipped with the Sony PlayStation 4 \ud83d\udc49 DualShock 4 ( DS4 ) Xbox 360 controller \ud83d\udc49 XInput (compatible) controller/device","title":"XInput? DS3? DS4? What are you talking about?"},{"location":"projects/DsHidMini/FAQ/#what-is-dshidmini","text":"Check out the repository README and the main project page .","title":"What is DsHidMini?"},{"location":"projects/DsHidMini/FAQ/#i-am-already-using-scptoolkit-motioninjoy-shibari-whatever-should-i-move-to-dshidmini","text":"That is entirely up to you of course \ud83d\ude42 Do you wish to stick with abandoned, outdated, unmaintained, complex and potentially untrustworthy software that will work less and less the further Windows and Games advance or do you want to step into the light and use fresh, stable, thought-through open software that simple delivers what it promises? Your call \ud83d\ude09","title":"I am already using ScpToolKit / MotionInJoy / Shibari / Whatever, should I move to DsHidMini?"},{"location":"projects/DsHidMini/FAQ/#how-do-i-use-it","text":"Follow the How to Install guide Learn the about different DsHidMini HID Device Modes your controller can be, the characteristics each mode and how to change between them After DsHidMini is active and the controller connected, you just need to change to the mode best suited to your use case. Keep in mind that if you want to use your controller as a XInput (Xbox 360) or DualShock 4 controller, there are a few extra steps left to be followed .","title":"How do I use it?"},{"location":"projects/DsHidMini/FAQ/#does-my-fake-ps3-controller-work-with-dshidmini","text":"Short answer: it depends. Long answer: it depends \ud83d\ude42 This is community software with no ties to any hardware manufacturer, all we can provide is knowledge based on research and reverse engineering.","title":"Does my fake PS3 controller work with DsHidMini?"},{"location":"projects/DsHidMini/FAQ/#what-are-the-hid-device-modes-which-one-should-i-use","text":"Go back to the How do I use it? question.","title":"What are the HID Device Modes? Which one should I use?"},{"location":"projects/DsHidMini/FAQ/#what-does-my-controllers-led-represent-how-do-i-quickly-disconnect-the-controller-on-bluetooth","text":"Read the Features section of the main GitHub page of DsHidMini.","title":"What does my controllers' LED represent? How do I quickly disconnect the controller on Bluetooth?"},{"location":"projects/DsHidMini/FAQ/#how-do-i-use-my-controller-as-a-xbox-360-or-dualshock-4","text":"","title":"How do I use my controller as a Xbox 360 or DualShock 4?"},{"location":"projects/DsHidMini/FAQ/#recommended-method","text":"Set the controller into DS4Windows Mode and use it with Ryochan7's DS4Windows . For more detailed instructions and other information, follow the DS4Windows Mode User Guide and you'll be good to go.","title":"Recommended method"},{"location":"projects/DsHidMini/FAQ/#alternative-methods","text":"If, for whatever reason, you don't want to use DS4Windows and prefer to choose your own remapping tool, then you have the following options: Using the Controller in SXS Mode + Steam: Steam will detect the controller as an official PlayStation 3 controller as long as PlayStation configuration support is enabled. XInput and DS4 emulation are then done automatically according to what Steam thinks the game supports. Using the controller in SDF or GPJ Mode + another remapping software: in SDF/GPJ Mode the controller is presented as a generic gamepad which can then be used with remapping tools like x360ce, UCR etc.","title":"Alternative methods"},{"location":"projects/DsHidMini/FAQ/#what-is-the-best-way-to-use-my-controller-in-gamesemulators","text":"The answer is: it depends . You need to verify which Input API is supported in whatever you are using and if you want to use DS3 specific functions, like pressure buttons or motion controls. The following table should help you: \"I want to...\" How to use your DS3 (recommendation) Notes Play modern PC games XInput or DualShock 4 Check the How do I use my controller as a Xbox 360 or DualShock 4? section . Not all modern games support DS4 controllers, and those that do support it sometimes don't support its rumble Use the DS3 as a common gamepad for most emulators XInput or GPJ Mode The gamepad part of GPJ Mode should be compatible with emulators that support only DirectInput Use RetroArch XInput Though RetroArch does support DirectInput , its rumble support is currently broken. XInput should be used instead to have working rumble Use RPCS3 SXS Mode Check the How do I use DsHidMini with RPCS3? section Use the DS3 in PCSX2 with pressure buttons SDF Mode Check the How do I set the controller's pressure buttons in PCSX2? section","title":"What is the best way to use my controller in games/emulators?"},{"location":"projects/DsHidMini/FAQ/#how-do-i-use-dshidmini-with-rpcs3","text":"A video demonstration of DsHidMini with RPCS3 video is also available It's recommended that you use your DS3 controller in SXS Mode and then choose on RPCS3's controller settings the DualShock 3 Handler. When doing so, RPCS3 should automatically pick and set your DS3, with full support to all its functions including LEDs, pressure buttons and motion.","title":"How do I use DsHidMini with RPCS3?"},{"location":"projects/DsHidMini/FAQ/#how-do-i-set-the-controllers-pressure-buttons-in-pcsx2","text":"A video demonstration of DsHidMini's pressure buttons with PCSX2 is also available The recommended method is the following: Set the controller into SDF Mode Go to PCSX2 input settings Make sure DirectInput is activated at the Game Devices APIs options ( DO NOT CHECK the DualShock 3 native mode box) Open the DsHidMini Control Client and check the Mute digital pressure buttons checkbox Back to PCSX2 input settings, on the Pad X tab, configure everything EXCEPT L3 / R3 / Start / Select / Analog / Mouse Go into the DsHidMini Control Client and uncheck the Mute digital pressure buttons Finish setting the L3 / R3 / Start / Select buttons. The Analog and Mouse buttons are not necessary At the Add Force Feedback Effect select your DS3 controller Only Constant Force is required/supported, don't select any other effect, it will not work Finish by clicking on OK","title":"How do I set the controller's pressure buttons in PCSX2?"},{"location":"projects/DsHidMini/FAQ/#how-do-i-use-the-motion-sensors-with-emulators","text":"The only emulator that can use the DS3 motion sensors is the RPCS3 when using the DualShock 3 handler. For now, it's impossible to use the controller's motion with other emulators , like CEMU, Yuzu, Dolphin etc. The reason for this is that the PS3 controller only has 1 gyroscope, while modern controllers have 3 gyros. While it's possible to \"emulate\" the missing gyros by using the sensors it does have, the whole process involves many maths that are not implemented at the moment and are at the very bottom of DsHidMini's To-Do list.","title":"How do I use the motion sensors with emulators?"},{"location":"projects/DsHidMini/FAQ/#im-having-x-problem-when-using-dshidmini-what-should-i-do","text":"Trouble when installing DsHidMini or connecting your controllers to the computer: check the How to Install Troubleshooting section Controller works normally most of the time but have random button presses or buttons fail to register: most likely a hardware fault, not related to DsHidMini If you have a different situation than the ones above, feel free to reach us through the proper means .","title":"I'm having \"X\" problem when using DsHidMini, what should I do?"},{"location":"projects/DsHidMini/HID-Device-Modes-Explained/","text":"HID Device Modes Explained Important topic This is one of the core features of the driver and understanding it is vital for great gaming experience so take your time and study thoroughly \ud83d\ude18 DsHidMini aims for maximum possible compatibility with existing tools or games without the need for any custom code. It supports different \"HID Device emulation modes\", meaning upon boot-up it can present the controller as different types of HID devices, each sporting a unique set of specialized features outlined below. The device mode you choose dictates the level of compatibility with certain 3rd party software and how the controller is \"seen\" by processes. Read on for details. How to adjust the settings Connected controllers using DsHidMini can be adjusted in the DsHidMini Control UI tool ( DSHMC.exe ) that is downloaded along the driver. It needs to be run as Administrator to allow changing the current HID Device Mode. After every change, press the \"Apply changes\" button to make them effective, which will cause the affected controller to disconnect on Bluetooth and restart on USB. For Bluetooth it needs to be powered on again manually afterwards by pressing the \"PS\" button. The HID Device Mode is a per device, per connection type setting, meaning that: Each connected controller can be set to a different mode The same controller can be in different modes when wired or wireless, so always check which mode the device is set to when transitioning from wired to wireless and vice versa HID Device Modes The games and tools outlined here are recommendations , please feel free to experiment to your heart's content \u2764\ufe0f SDF TL;DR: Use this mode for best compatibility with the PCSX2 PlayStation 2 Emulator . Single Device with Force Feedback mode. In this mode, the controller is presented as one \"almost\"-DirectInput-compatible HID device with pressure sensitive features exposed as additional sliders. The rumble motors can be controlled via Force Feedback effects (Constant Force Effect). The advantage of this mode is a 100% compatibility with all unmodified versions of PCSX2 with the LilyPad gamepad plugin (shipped by default). The downside of this mode is, that the pressure axes exceed the limit of supported axes per device and therefore pressure sensitive axes will not be available in games using DirectInput. They will however work fine with any engine using the low level HID API instead. The default LED behavior in this mode is the charging animation and can't be altered. GPJ TL;DR: Use this mode with x360ce or to experiment with older games. Gamepad plus Joystick mode. In this mode, the controller is presented as two separate HID devices ; a traditional gamepad featuring the same set of features like a common Xbox 360 controller and a Joystick, only handling the pressure axes. This mode guarantees the best potential compatibility with legacy solutions purely relying on DirectInput and works around the mentioned axis limit. The rumble motors can be controlled via Force Feedback effects (Constant Force Effect). The default LED behavior in this mode is the charging animation and can't be altered. SXS TL;DR: Use this mode with Steam or the RPCS3 PlayStation 3 Emulator . SIXAXIS.SYS mode. In this mode, the driver emulates the behavior of the official Sony sixaxis.sys driver shipped with the PS Now application. Use this mode to ensure compatibility with Steam , the PS Now application or the RPCS3 PlayStation 3 Emulator . The default LED behavior in this mode is the charging animation. If a compatible application sends output reports to the device, the driver will \"hand over\" control to the application and stops the charging indicator until the device has been restarted. DS4Windows TL;DR: Use this mode with Ryochan7's DS4Windows . Follow these instructions to set it up properly. DualShock 4 mode. In this mode, the driver emulates a DualShock 4 with an artificial Vendor & Product ID supported by the \"Ryochan7 Edition\" of DS4Windows . You can use almost all features DS4Windows offers with a DualShock 3 (excluding nonexistent features like the track pad or the light bar) including XInput emulation . The default LED behavior in this mode is the charging animation. Once the controller is picked up by DS4Windows, light bar changes will get translated to LED states ( see this article for details ) and rumble requests passed through. Motion controls are currently not supported (no gyroscope or accelerometer) and therefore will not work with CEMU when the UDP Server is active. XInput TL;DR: Use this mode with RetroArch , Steam or any game with Xbox Controller support. Xbox One Controller mode. This is the driver default when shipped. In this mode, the controller is emulating an Xbox One Controller with an artificial Vendor & Product ID. This mode guarantees the best potential compatibility with pretty much all modern PC games with Xbox (360/One) Controller support either standalone or shipped through Steam. The default LED behavior in this mode is the charging animation and can't be altered. The lit LED does not represent the player index.","title":"HID Device Modes Explained"},{"location":"projects/DsHidMini/HID-Device-Modes-Explained/#hid-device-modes-explained","text":"Important topic This is one of the core features of the driver and understanding it is vital for great gaming experience so take your time and study thoroughly \ud83d\ude18 DsHidMini aims for maximum possible compatibility with existing tools or games without the need for any custom code. It supports different \"HID Device emulation modes\", meaning upon boot-up it can present the controller as different types of HID devices, each sporting a unique set of specialized features outlined below. The device mode you choose dictates the level of compatibility with certain 3rd party software and how the controller is \"seen\" by processes. Read on for details.","title":"HID Device Modes Explained"},{"location":"projects/DsHidMini/HID-Device-Modes-Explained/#how-to-adjust-the-settings","text":"Connected controllers using DsHidMini can be adjusted in the DsHidMini Control UI tool ( DSHMC.exe ) that is downloaded along the driver. It needs to be run as Administrator to allow changing the current HID Device Mode. After every change, press the \"Apply changes\" button to make them effective, which will cause the affected controller to disconnect on Bluetooth and restart on USB. For Bluetooth it needs to be powered on again manually afterwards by pressing the \"PS\" button. The HID Device Mode is a per device, per connection type setting, meaning that: Each connected controller can be set to a different mode The same controller can be in different modes when wired or wireless, so always check which mode the device is set to when transitioning from wired to wireless and vice versa","title":"How to adjust the settings"},{"location":"projects/DsHidMini/HID-Device-Modes-Explained/#hid-device-modes","text":"The games and tools outlined here are recommendations , please feel free to experiment to your heart's content \u2764\ufe0f","title":"HID Device Modes"},{"location":"projects/DsHidMini/HID-Device-Modes-Explained/#sdf","text":"TL;DR: Use this mode for best compatibility with the PCSX2 PlayStation 2 Emulator . Single Device with Force Feedback mode. In this mode, the controller is presented as one \"almost\"-DirectInput-compatible HID device with pressure sensitive features exposed as additional sliders. The rumble motors can be controlled via Force Feedback effects (Constant Force Effect). The advantage of this mode is a 100% compatibility with all unmodified versions of PCSX2 with the LilyPad gamepad plugin (shipped by default). The downside of this mode is, that the pressure axes exceed the limit of supported axes per device and therefore pressure sensitive axes will not be available in games using DirectInput. They will however work fine with any engine using the low level HID API instead. The default LED behavior in this mode is the charging animation and can't be altered.","title":"SDF"},{"location":"projects/DsHidMini/HID-Device-Modes-Explained/#gpj","text":"TL;DR: Use this mode with x360ce or to experiment with older games. Gamepad plus Joystick mode. In this mode, the controller is presented as two separate HID devices ; a traditional gamepad featuring the same set of features like a common Xbox 360 controller and a Joystick, only handling the pressure axes. This mode guarantees the best potential compatibility with legacy solutions purely relying on DirectInput and works around the mentioned axis limit. The rumble motors can be controlled via Force Feedback effects (Constant Force Effect). The default LED behavior in this mode is the charging animation and can't be altered.","title":"GPJ"},{"location":"projects/DsHidMini/HID-Device-Modes-Explained/#sxs","text":"TL;DR: Use this mode with Steam or the RPCS3 PlayStation 3 Emulator . SIXAXIS.SYS mode. In this mode, the driver emulates the behavior of the official Sony sixaxis.sys driver shipped with the PS Now application. Use this mode to ensure compatibility with Steam , the PS Now application or the RPCS3 PlayStation 3 Emulator . The default LED behavior in this mode is the charging animation. If a compatible application sends output reports to the device, the driver will \"hand over\" control to the application and stops the charging indicator until the device has been restarted.","title":"SXS"},{"location":"projects/DsHidMini/HID-Device-Modes-Explained/#ds4windows","text":"TL;DR: Use this mode with Ryochan7's DS4Windows . Follow these instructions to set it up properly. DualShock 4 mode. In this mode, the driver emulates a DualShock 4 with an artificial Vendor & Product ID supported by the \"Ryochan7 Edition\" of DS4Windows . You can use almost all features DS4Windows offers with a DualShock 3 (excluding nonexistent features like the track pad or the light bar) including XInput emulation . The default LED behavior in this mode is the charging animation. Once the controller is picked up by DS4Windows, light bar changes will get translated to LED states ( see this article for details ) and rumble requests passed through. Motion controls are currently not supported (no gyroscope or accelerometer) and therefore will not work with CEMU when the UDP Server is active.","title":"DS4Windows"},{"location":"projects/DsHidMini/HID-Device-Modes-Explained/#xinput","text":"TL;DR: Use this mode with RetroArch , Steam or any game with Xbox Controller support. Xbox One Controller mode. This is the driver default when shipped. In this mode, the controller is emulating an Xbox One Controller with an artificial Vendor & Product ID. This mode guarantees the best potential compatibility with pretty much all modern PC games with Xbox (360/One) Controller support either standalone or shipped through Steam. The default LED behavior in this mode is the charging animation and can't be altered. The lit LED does not represent the player index.","title":"XInput"},{"location":"projects/DsHidMini/How-to-Install/","text":"How to Install/Remove DsHidMini can only work its magic if it's the dominant driver for your controller, you may have others preinstalled that need removal, this guide covers most of the known cases. Installation No matter what software you may have preinstalled, this step is always the same \ud83d\ude00 Version 2.x.x Currently in BETA Version 2 has been release on 23rd of July 2021 and is currently in BETA. It has been tested thoroughly already but keep that in mind! If you want Bluetooth support you need to install BthPS3 first (optional for USB) Grab the release from GitHub Download the attached dshidmini_vX.X.X.X.zip archive to an arbitrary location on your machine Extract the archive (doesn't matter where to, e.g. your Downloads folder) Make sure you know your architecture On x64 navigate to x64\\dshidmini On x86 navigate to x86\\dshidmini Right-click on dshidmini.inf and select Install If you've never installed great software before \ud83d\ude09 this might show up (hit Install): Should only take a moment until success dialog Right-click on igfilter.inf and select Install ( no not miss this step ) Now connect your controller via USB This will automatically pair it to your Windows Bluetooth host if you have working Bluetooth at the time of plugging it in With your controller connected by USB, open the DsHidMini Control Utility (the DSHMC.exe file that comes along the driver archive) to see if the controller gets detected Run it as Administrator to change settings, check the documentation for details It is not required to keep the utility running for the driver to function, only if you want to observe battery level or change settings By now if you plug in your controller (or reboot the machine) chances are high that everything already works as expected. If it doesn't, worry not, read on here ! Version 1.x.x If you want Bluetooth support you need to install BthPS3 first (optional for USB) Grab the release from GitHub Download the attached dshidmini_vX.X.X.X.zip archive to an arbitrary location on your machine Extract the archive (doesn't matter where to, e.g. your Downloads folder) Make sure you know your architecture On x64 navigate to x64\\dshidmini On x86 navigate to x86\\dshidmini Right-click on dshidmini.inf and select Install If you've never installed great software before \ud83d\ude09 this might show up (hit Install): Should only take a moment until success dialog Now connect your controller via USB This will automatically pair it to your Windows Bluetooth host if you have working Bluetooth at the time of plugging it in With your controller connected by USB, open the DsHidMini Control Utility (the DSHMC.exe file that comes along the driver archive) to see if the controller gets detected Run it as Administrator to change settings, check the documentation for details It is not required to keep the utility running for the driver to function, only if you want to observe battery level or change settings By now if you plug in your controller (or reboot the machine) chances are high that everything already works as expected. If it doesn't, worry not, read on here ! Updating If you want to update, simply follow all the same steps of the installation and overwrite any existing files. Reboot your machine to be extra safe if it didn't work right away. Removal If you want to remove DsHidMini from your computer you first need to delete it from Windows Driver Store: Use Driver Store Explorer to remove the dshidmini.inf driver: The driver will still be loaded for controllers that were using it, so be sure to uninstall them from Device Manager Plug in your controllers Open Device Manager by pressing Win + X and select it from the menu: Expand Nefarius HID Devices For each device under Nefarius HID Devices , right click it and select Uninstall Device , then select Uninstall on the appearing confirmation window After that, DsHidMini should be fully gone from your computer \ud83d\ude25 Troubleshooting Verifying if the controller is loading the correct driver The driver can't do anything if it is not being used, so to check this: Connect your controller by USB cable Open Device Manager by pressing Win + X and select it from the menu Search for and expand the category Nefarius HID Devices , your controller should appear there. Double click on it to check the driver status: If the device appears there but the driver status indicates some error (e.g. This device cannot start (Error Code 10) ) try pressing the Reset button on the back of your controller and then reconnecting it. Rebooting your computer is also worth a shot. If the controller does not appear under Nefarius HID Devices or if this section doesn't exist at all, you probably have another driver taking priority over DsHidMini. To solve this you need to remove those rogue drivers. See how to do so on the removing conflicting drivers section. Removing conflicting drivers We need to first determine if any other conflicting device driver is present on the system and remove it so DsHidMini can take over that job. The steps outlined here may or may not be applicable to your system, it entirely depends on your past \ud83d\ude1c and the stuff you potentially installed. Worry not though, together we shall succeed \u2728 ScpToolkit If you had ScpToolkit installed, you need to purge every remains from your machine. Follow this comprehensive removal guide . Official Sony driver If you have/had PS Now installed, chances are high you have the official Sony sixaxis.sys on your system. Follow this procedure to remove it . FireShock If you've used Shibari before you probably have FireShock installed, lets rectify that: Use Driver Store Explorer to remove the fireshock.inf driver: Done \ud83c\udf89 Controller does not connect by Bluetooth Let's go step-by-step with this: Open Device Manager by pressing Win + X and select it from the menu Check if your Bluetooth Link Manager spec is supported Check if BthPS3 is correctly installed, its status and if its version is v1.3.108 or higher: Connect your controller by USB Open the DsHidMini Control Utility ( DSHMC.exe file that comes along the driver archive) Check if your device is correctly paired to the current Bluetooth host address. If it's not, try reconnecting your controller by USB sometimes until the pairing completes successfully If the \"pairing\" check is Ok like in the picture above but the device is still not connecting by Bluetooth, try resetting your controller by pressing the reset button on its back, connecting by USB again to have it re-paired to the current Bluetooth address then trying connecting wireless again. Remember to always confirm in the DsHidMini Control UI Tool if the pairing was successful before trying to connect wireless If after all those tries the device still fails to connect, then maybe : Your Bluetooth dongle is somehow faulty/unsupported. Try other ones/try using DsHidMini/BthPS3 in another computer/notebook with Bluetooth support to try your luck You have a fake/copycat controller that expects some specific PS3 behavior that is not mimicked by DsHidMini. You can try reaching us to try seeing this through You may have a fake, copy-cat DS3 controller that uses insecure connections (unsolvable issue). Be sure to see how to check if this is the case before giving up, since this is a really rare and specific case, not a common issue","title":"How to Install/Remove"},{"location":"projects/DsHidMini/How-to-Install/#how-to-installremove","text":"DsHidMini can only work its magic if it's the dominant driver for your controller, you may have others preinstalled that need removal, this guide covers most of the known cases.","title":"How to Install/Remove"},{"location":"projects/DsHidMini/How-to-Install/#installation","text":"No matter what software you may have preinstalled, this step is always the same \ud83d\ude00","title":"Installation"},{"location":"projects/DsHidMini/How-to-Install/#version-2xx","text":"Currently in BETA Version 2 has been release on 23rd of July 2021 and is currently in BETA. It has been tested thoroughly already but keep that in mind! If you want Bluetooth support you need to install BthPS3 first (optional for USB) Grab the release from GitHub Download the attached dshidmini_vX.X.X.X.zip archive to an arbitrary location on your machine Extract the archive (doesn't matter where to, e.g. your Downloads folder) Make sure you know your architecture On x64 navigate to x64\\dshidmini On x86 navigate to x86\\dshidmini Right-click on dshidmini.inf and select Install If you've never installed great software before \ud83d\ude09 this might show up (hit Install): Should only take a moment until success dialog Right-click on igfilter.inf and select Install ( no not miss this step ) Now connect your controller via USB This will automatically pair it to your Windows Bluetooth host if you have working Bluetooth at the time of plugging it in With your controller connected by USB, open the DsHidMini Control Utility (the DSHMC.exe file that comes along the driver archive) to see if the controller gets detected Run it as Administrator to change settings, check the documentation for details It is not required to keep the utility running for the driver to function, only if you want to observe battery level or change settings By now if you plug in your controller (or reboot the machine) chances are high that everything already works as expected. If it doesn't, worry not, read on here !","title":"Version 2.x.x"},{"location":"projects/DsHidMini/How-to-Install/#version-1xx","text":"If you want Bluetooth support you need to install BthPS3 first (optional for USB) Grab the release from GitHub Download the attached dshidmini_vX.X.X.X.zip archive to an arbitrary location on your machine Extract the archive (doesn't matter where to, e.g. your Downloads folder) Make sure you know your architecture On x64 navigate to x64\\dshidmini On x86 navigate to x86\\dshidmini Right-click on dshidmini.inf and select Install If you've never installed great software before \ud83d\ude09 this might show up (hit Install): Should only take a moment until success dialog Now connect your controller via USB This will automatically pair it to your Windows Bluetooth host if you have working Bluetooth at the time of plugging it in With your controller connected by USB, open the DsHidMini Control Utility (the DSHMC.exe file that comes along the driver archive) to see if the controller gets detected Run it as Administrator to change settings, check the documentation for details It is not required to keep the utility running for the driver to function, only if you want to observe battery level or change settings By now if you plug in your controller (or reboot the machine) chances are high that everything already works as expected. If it doesn't, worry not, read on here !","title":"Version 1.x.x"},{"location":"projects/DsHidMini/How-to-Install/#updating","text":"If you want to update, simply follow all the same steps of the installation and overwrite any existing files. Reboot your machine to be extra safe if it didn't work right away.","title":"Updating"},{"location":"projects/DsHidMini/How-to-Install/#removal","text":"If you want to remove DsHidMini from your computer you first need to delete it from Windows Driver Store: Use Driver Store Explorer to remove the dshidmini.inf driver: The driver will still be loaded for controllers that were using it, so be sure to uninstall them from Device Manager Plug in your controllers Open Device Manager by pressing Win + X and select it from the menu: Expand Nefarius HID Devices For each device under Nefarius HID Devices , right click it and select Uninstall Device , then select Uninstall on the appearing confirmation window After that, DsHidMini should be fully gone from your computer \ud83d\ude25","title":"Removal"},{"location":"projects/DsHidMini/How-to-Install/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"projects/DsHidMini/How-to-Install/#verifying-if-the-controller-is-loading-the-correct-driver","text":"The driver can't do anything if it is not being used, so to check this: Connect your controller by USB cable Open Device Manager by pressing Win + X and select it from the menu Search for and expand the category Nefarius HID Devices , your controller should appear there. Double click on it to check the driver status: If the device appears there but the driver status indicates some error (e.g. This device cannot start (Error Code 10) ) try pressing the Reset button on the back of your controller and then reconnecting it. Rebooting your computer is also worth a shot. If the controller does not appear under Nefarius HID Devices or if this section doesn't exist at all, you probably have another driver taking priority over DsHidMini. To solve this you need to remove those rogue drivers. See how to do so on the removing conflicting drivers section.","title":"Verifying if the controller is loading the correct driver"},{"location":"projects/DsHidMini/How-to-Install/#removing-conflicting-drivers","text":"We need to first determine if any other conflicting device driver is present on the system and remove it so DsHidMini can take over that job. The steps outlined here may or may not be applicable to your system, it entirely depends on your past \ud83d\ude1c and the stuff you potentially installed. Worry not though, together we shall succeed \u2728","title":"Removing conflicting drivers"},{"location":"projects/DsHidMini/How-to-Install/#scptoolkit","text":"If you had ScpToolkit installed, you need to purge every remains from your machine. Follow this comprehensive removal guide .","title":"ScpToolkit"},{"location":"projects/DsHidMini/How-to-Install/#official-sony-driver","text":"If you have/had PS Now installed, chances are high you have the official Sony sixaxis.sys on your system. Follow this procedure to remove it .","title":"Official Sony driver"},{"location":"projects/DsHidMini/How-to-Install/#fireshock","text":"If you've used Shibari before you probably have FireShock installed, lets rectify that: Use Driver Store Explorer to remove the fireshock.inf driver: Done \ud83c\udf89","title":"FireShock"},{"location":"projects/DsHidMini/How-to-Install/#controller-does-not-connect-by-bluetooth","text":"Let's go step-by-step with this: Open Device Manager by pressing Win + X and select it from the menu Check if your Bluetooth Link Manager spec is supported Check if BthPS3 is correctly installed, its status and if its version is v1.3.108 or higher: Connect your controller by USB Open the DsHidMini Control Utility ( DSHMC.exe file that comes along the driver archive) Check if your device is correctly paired to the current Bluetooth host address. If it's not, try reconnecting your controller by USB sometimes until the pairing completes successfully If the \"pairing\" check is Ok like in the picture above but the device is still not connecting by Bluetooth, try resetting your controller by pressing the reset button on its back, connecting by USB again to have it re-paired to the current Bluetooth address then trying connecting wireless again. Remember to always confirm in the DsHidMini Control UI Tool if the pairing was successful before trying to connect wireless If after all those tries the device still fails to connect, then maybe : Your Bluetooth dongle is somehow faulty/unsupported. Try other ones/try using DsHidMini/BthPS3 in another computer/notebook with Bluetooth support to try your luck You have a fake/copycat controller that expects some specific PS3 behavior that is not mimicked by DsHidMini. You can try reaching us to try seeing this through You may have a fake, copy-cat DS3 controller that uses insecure connections (unsolvable issue). Be sure to see how to check if this is the case before giving up, since this is a really rare and specific case, not a common issue","title":"Controller does not connect by Bluetooth"},{"location":"projects/DsHidMini/Output-Rate-Control-Explained/","text":"Output Rate Control Explained TL;DR: This feature is primarily for Bluetooth , it is shipped off on USB by default. Feel free to tinker with it though, the defaults are a recommendation that works for a majority of users, but maybe not for you! Experiment! \ud83e\udd70 Why Certain revisions (meaning: the same model has been reworked slightly over time and put into production) of the SIXAXIS/DualShock 3 suffer from being susceptible to \"packet flooding\" over Bluetooth. Depending on the circumstances these controllers can start misbehaving if the host (Windows in this case) sends them packets (so called \"Output Reports\") too fast, which means with a time frame between packets smaller than 150ms . This can cause the controller to \"lock up\", like not responding to rumble request or LED state changes for a few seconds or sometimes even until it is power-cycled. The driver takes these flaws into consideration and applies rate control logic to all outgoing packets if these options are enabled. How Adding artificial delays in between packets seems like an easy fix, but causes a clearly user-noticeable delay to rumble requests for games which trigger a series of small rumble on/off requests per second. Simply dropping packets when the driver is flagged \"busy\" can work too, but runs the risk of e.g. rumble off commands getting discarded on error which causes the controller to rumble longer than intended, or even indefinitely. The following \"intelligent\" mechanisms are available to mitigate the issue as transparent and clever as possible. Output Report Rate Control This is the big brain one \ud83d\ude01 When the time period between to-be-sent output report requests (like Force Feedback Effects) drops below a user-configurable value (default value is 150ms ), the following chain of events will happen: Instead of being sent, the request packet will be copied to a \"cache\", put aside and not getting sent to the controller The wait-period is calculated (minimum required delay subtracted by actual calculated period) E.g. if a 2nd packet comes in after 50ms with a configured minimum delay of 150ms, we need to wait for the remaining 100ms A timer is activated to go off after the calculated delay period If new packets arrive during the timer is active, the last cached packet will be replaced by the current to-be-sent-but-still-to-fast-packet This prevents the rumble off command getting lost, which typically comes in last after a \"packet burst\" After the timer wait period has elapsed the most recent cached packet is queued to get sent again with a \"high priority\" flag so it won't get accidentally stuck in a timer delay loop again The timer is finished and reset, the cycle begins again if another flooding condition is detected This may appear confusing and over-engineered at first but in our tests fixed around 99.9% of all known controller lockup issues so I'd say we did a rather fabulous job \ud83d\ude0a It's recommended to keep the default shipped value, which is on . Output Report Deduplication This is a simple one. If enabled, a succeeding packet will be memory-compared to the previous one and if identical, will get discarded . This approach is obviously risky as \"bursts\" of rumble on commands can get thrown away by mistake so this option is only really useful for very special cases. Feel free to experiment \ud83d\udc96 It's recommended to keep the default shipped value, which is off . Affected Controller Models Work in progress This is a list curated by community member efforts, if you don't see your particular model here, consider reaching out and contribute to extend the list \ud83d\udc96 You can check if your own controller is affected from this issue by comparing the model number you can find on the sticker on the back of your device. SIXAXIS Models The original SIXAXIS has no rumble motors so the only property to control are the LEDs. CECHZC1U DualShock 3 Models The DualShock 3 offers rumble/vibration effects via two (strong and weak) motors included in the handpiece. CECHZC2U CECHZC2E A1","title":"Output Rate Control Explained"},{"location":"projects/DsHidMini/Output-Rate-Control-Explained/#output-rate-control-explained","text":"TL;DR: This feature is primarily for Bluetooth , it is shipped off on USB by default. Feel free to tinker with it though, the defaults are a recommendation that works for a majority of users, but maybe not for you! Experiment! \ud83e\udd70","title":"Output Rate Control Explained"},{"location":"projects/DsHidMini/Output-Rate-Control-Explained/#why","text":"Certain revisions (meaning: the same model has been reworked slightly over time and put into production) of the SIXAXIS/DualShock 3 suffer from being susceptible to \"packet flooding\" over Bluetooth. Depending on the circumstances these controllers can start misbehaving if the host (Windows in this case) sends them packets (so called \"Output Reports\") too fast, which means with a time frame between packets smaller than 150ms . This can cause the controller to \"lock up\", like not responding to rumble request or LED state changes for a few seconds or sometimes even until it is power-cycled. The driver takes these flaws into consideration and applies rate control logic to all outgoing packets if these options are enabled.","title":"Why"},{"location":"projects/DsHidMini/Output-Rate-Control-Explained/#how","text":"Adding artificial delays in between packets seems like an easy fix, but causes a clearly user-noticeable delay to rumble requests for games which trigger a series of small rumble on/off requests per second. Simply dropping packets when the driver is flagged \"busy\" can work too, but runs the risk of e.g. rumble off commands getting discarded on error which causes the controller to rumble longer than intended, or even indefinitely. The following \"intelligent\" mechanisms are available to mitigate the issue as transparent and clever as possible.","title":"How"},{"location":"projects/DsHidMini/Output-Rate-Control-Explained/#output-report-rate-control","text":"This is the big brain one \ud83d\ude01 When the time period between to-be-sent output report requests (like Force Feedback Effects) drops below a user-configurable value (default value is 150ms ), the following chain of events will happen: Instead of being sent, the request packet will be copied to a \"cache\", put aside and not getting sent to the controller The wait-period is calculated (minimum required delay subtracted by actual calculated period) E.g. if a 2nd packet comes in after 50ms with a configured minimum delay of 150ms, we need to wait for the remaining 100ms A timer is activated to go off after the calculated delay period If new packets arrive during the timer is active, the last cached packet will be replaced by the current to-be-sent-but-still-to-fast-packet This prevents the rumble off command getting lost, which typically comes in last after a \"packet burst\" After the timer wait period has elapsed the most recent cached packet is queued to get sent again with a \"high priority\" flag so it won't get accidentally stuck in a timer delay loop again The timer is finished and reset, the cycle begins again if another flooding condition is detected This may appear confusing and over-engineered at first but in our tests fixed around 99.9% of all known controller lockup issues so I'd say we did a rather fabulous job \ud83d\ude0a It's recommended to keep the default shipped value, which is on .","title":"Output Report Rate Control"},{"location":"projects/DsHidMini/Output-Rate-Control-Explained/#output-report-deduplication","text":"This is a simple one. If enabled, a succeeding packet will be memory-compared to the previous one and if identical, will get discarded . This approach is obviously risky as \"bursts\" of rumble on commands can get thrown away by mistake so this option is only really useful for very special cases. Feel free to experiment \ud83d\udc96 It's recommended to keep the default shipped value, which is off .","title":"Output Report Deduplication"},{"location":"projects/DsHidMini/Output-Rate-Control-Explained/#affected-controller-models","text":"Work in progress This is a list curated by community member efforts, if you don't see your particular model here, consider reaching out and contribute to extend the list \ud83d\udc96 You can check if your own controller is affected from this issue by comparing the model number you can find on the sticker on the back of your device.","title":"Affected Controller Models"},{"location":"projects/DsHidMini/Output-Rate-Control-Explained/#sixaxis-models","text":"The original SIXAXIS has no rumble motors so the only property to control are the LEDs. CECHZC1U","title":"SIXAXIS Models"},{"location":"projects/DsHidMini/Output-Rate-Control-Explained/#dualshock-3-models","text":"The DualShock 3 offers rumble/vibration effects via two (strong and weak) motors included in the handpiece. CECHZC2U CECHZC2E A1","title":"DualShock 3 Models"},{"location":"projects/DsHidMini/SIXAXIS.SYS-to-DsHidMini-Guide/","text":"Switch from SIXAXIS.SYS to DsHidMini If the Sony SIXAXIS.SYS driver is present on your system, it may take priority over DsHidMini (on USB) and you need to manually switch drivers like outlined below: Plug in your controller Open Device Manager by pressing Win + X and select it from the menu: Expand Human Interface Devices and look for Wireless controller for PLAYSTATION(R)3 Right-click it and select Update driver Follow the wizard: Use Driver Store Explorer to remove the sixaxis.inf driver: Done \ud83c\udf89","title":"Switch from SIXAXIS.SYS to DsHidMini"},{"location":"projects/DsHidMini/SIXAXIS.SYS-to-DsHidMini-Guide/#switch-from-sixaxissys-to-dshidmini","text":"If the Sony SIXAXIS.SYS driver is present on your system, it may take priority over DsHidMini (on USB) and you need to manually switch drivers like outlined below: Plug in your controller Open Device Manager by pressing Win + X and select it from the menu: Expand Human Interface Devices and look for Wireless controller for PLAYSTATION(R)3 Right-click it and select Update driver Follow the wizard: Use Driver Store Explorer to remove the sixaxis.inf driver: Done \ud83c\udf89","title":"Switch from SIXAXIS.SYS to DsHidMini"},{"location":"projects/FireShock/","text":"About FireShock Work in progress","title":"About FireShock"},{"location":"projects/FireShock/#about-fireshock","text":"Work in progress","title":"About FireShock"},{"location":"projects/HidGuardian/","text":"About HidGuardian Work in progress","title":"About HidGuardian"},{"location":"projects/HidGuardian/#about-hidguardian","text":"Work in progress","title":"About HidGuardian"},{"location":"projects/HidGuardian/Hall-of-fame/","text":"Users of HidGuardian Over its lifespan the project has seen some adoption in the following projects. This list is most probably incomplete, please help expanding it by contributing to it . The projects listed are made by 3rd party individuals, we can not provide any form of warranty or support. Appearance in no particular order. DS4Windows DS4Windows is a portable program that allows you to get the best experience while using a DualShock 4 on your PC. By emulating a Xbox 360 controller, many more games are accessible. x360ce \"Xbox 360 Controller Emulator\" allows your controller (gamepad, joystick, wheel, etc.) to function as an Xbox 360 controller. For example, it lets you play games such as \"Grand Theft Auto\" (GTA) or \"Mafia II\" using a Logitech Wheel. XOutput If you have an older or not supported game controller (gamepad, wheel, joystick, etc.), but XBox 360 controllers are supported you can use this software and enjoy gaming with your controller. XOutput is a software that can convert DirectInput into XInput. DirectInput data is read and sent to a virtual XInput (Xbox 360 Controller) device. XInput is the new standard game controller input on windows, and DirectInput can no longer be used with Universal Windows Platform software, but with this tool you can use DirectInput devices as well. InputMapper Input Mapper is designed to bridge the gap between the devices you use and the games you play. HidVanguard A tool for configuring and automating HidGuardian. HIDer HIDer is an open source application that allows you to manage HidGuardian in order to hide chosen controllers from being seen by games/applications (that are not whitelisted). This is useful when some games/applications have issues with specific controllers that are connected. JoyShockMapper The Sony PlayStation DualSense, DualShock 4, Nintendo Switch JoyCons (used in pairs), and Nintendo Switch Pro Controller have much in common. They have many of the features expected of modern game controllers. They also have an incredibly versatile and underutilised input that their biggest rival (Microsoft's Xbox One controller) doesn't have: a 3-axis gyroscope (from here on, \u201cgyro\u201d). My goal with JoyShockMapper is to enable you to play PC games with DS, DS4, JoyCons, and Pro Controllers even better than you can on their respective consoles -- and demonstrate that more games should use these features in these ways. Joystick Gremlin Joystick Gremlin is a program that allows the configuration of joystick like devices, similar to what CH Control Manager and Thrustmaster's T.A.R.G.E.T. do for their respectively supported joysticks. However, Joystick Gremlin works with any device be it from different manufacturers or custom devices that appear as a joystick to Windows. Joystick Gremlin uses the virtual joysticks provided by vJoy to map physical to virtual inputs and apply various other transformations such as response curves to analogue axes. In addition to customizing joysticks, Joystick Gremlin also provides powerful macro functionalities, a flexible mode system, scripting using Python, and many other features. BetterJoy Allows the Nintendo Switch Pro Controller, Joycons and SNES controller to be used with CEMU, Citra, Dolphin, Yuzu and as generic XInput. ProconXInput A Windows user-mode XInput driver for the Switch Pro Controller. Auto-Whitelister This is a solution for stopping games from seeing a DirectInput stick (Basically any stick except Xbox controllers) on your system. For ages we have been able to create virtual controllers and remap a stick to that, but in the past we have not been able to stop the game from seeing the physical stick. Well now we have a proper solution: The HidGuardian / HidCerberus components from ViGEm. HidGuardian is a device driver that you install which can hide sticks from the system. HidCerberus is a windows service that allows you to \"whitelist\" a process (eg your AHK script) so that your script is the ONLY thing on the system that can see through HidGuardian and read the stick. The stick even disappears from the joystick control panel in windows!","title":"Users of HidGuardian"},{"location":"projects/HidGuardian/Hall-of-fame/#users-of-hidguardian","text":"Over its lifespan the project has seen some adoption in the following projects. This list is most probably incomplete, please help expanding it by contributing to it . The projects listed are made by 3rd party individuals, we can not provide any form of warranty or support. Appearance in no particular order.","title":"Users of HidGuardian"},{"location":"projects/HidGuardian/Hall-of-fame/#ds4windows","text":"DS4Windows is a portable program that allows you to get the best experience while using a DualShock 4 on your PC. By emulating a Xbox 360 controller, many more games are accessible.","title":"DS4Windows"},{"location":"projects/HidGuardian/Hall-of-fame/#x360ce","text":"\"Xbox 360 Controller Emulator\" allows your controller (gamepad, joystick, wheel, etc.) to function as an Xbox 360 controller. For example, it lets you play games such as \"Grand Theft Auto\" (GTA) or \"Mafia II\" using a Logitech Wheel.","title":"x360ce"},{"location":"projects/HidGuardian/Hall-of-fame/#xoutput","text":"If you have an older or not supported game controller (gamepad, wheel, joystick, etc.), but XBox 360 controllers are supported you can use this software and enjoy gaming with your controller. XOutput is a software that can convert DirectInput into XInput. DirectInput data is read and sent to a virtual XInput (Xbox 360 Controller) device. XInput is the new standard game controller input on windows, and DirectInput can no longer be used with Universal Windows Platform software, but with this tool you can use DirectInput devices as well.","title":"XOutput"},{"location":"projects/HidGuardian/Hall-of-fame/#inputmapper","text":"Input Mapper is designed to bridge the gap between the devices you use and the games you play.","title":"InputMapper"},{"location":"projects/HidGuardian/Hall-of-fame/#hidvanguard","text":"A tool for configuring and automating HidGuardian.","title":"HidVanguard"},{"location":"projects/HidGuardian/Hall-of-fame/#hider","text":"HIDer is an open source application that allows you to manage HidGuardian in order to hide chosen controllers from being seen by games/applications (that are not whitelisted). This is useful when some games/applications have issues with specific controllers that are connected.","title":"HIDer"},{"location":"projects/HidGuardian/Hall-of-fame/#joyshockmapper","text":"The Sony PlayStation DualSense, DualShock 4, Nintendo Switch JoyCons (used in pairs), and Nintendo Switch Pro Controller have much in common. They have many of the features expected of modern game controllers. They also have an incredibly versatile and underutilised input that their biggest rival (Microsoft's Xbox One controller) doesn't have: a 3-axis gyroscope (from here on, \u201cgyro\u201d). My goal with JoyShockMapper is to enable you to play PC games with DS, DS4, JoyCons, and Pro Controllers even better than you can on their respective consoles -- and demonstrate that more games should use these features in these ways.","title":"JoyShockMapper"},{"location":"projects/HidGuardian/Hall-of-fame/#joystick-gremlin","text":"Joystick Gremlin is a program that allows the configuration of joystick like devices, similar to what CH Control Manager and Thrustmaster's T.A.R.G.E.T. do for their respectively supported joysticks. However, Joystick Gremlin works with any device be it from different manufacturers or custom devices that appear as a joystick to Windows. Joystick Gremlin uses the virtual joysticks provided by vJoy to map physical to virtual inputs and apply various other transformations such as response curves to analogue axes. In addition to customizing joysticks, Joystick Gremlin also provides powerful macro functionalities, a flexible mode system, scripting using Python, and many other features.","title":"Joystick Gremlin"},{"location":"projects/HidGuardian/Hall-of-fame/#betterjoy","text":"Allows the Nintendo Switch Pro Controller, Joycons and SNES controller to be used with CEMU, Citra, Dolphin, Yuzu and as generic XInput.","title":"BetterJoy"},{"location":"projects/HidGuardian/Hall-of-fame/#proconxinput","text":"A Windows user-mode XInput driver for the Switch Pro Controller.","title":"ProconXInput"},{"location":"projects/HidGuardian/Hall-of-fame/#auto-whitelister","text":"This is a solution for stopping games from seeing a DirectInput stick (Basically any stick except Xbox controllers) on your system. For ages we have been able to create virtual controllers and remap a stick to that, but in the past we have not been able to stop the game from seeing the physical stick. Well now we have a proper solution: The HidGuardian / HidCerberus components from ViGEm. HidGuardian is a device driver that you install which can hide sticks from the system. HidCerberus is a windows service that allows you to \"whitelist\" a process (eg your AHK script) so that your script is the ONLY thing on the system that can see through HidGuardian and read the stick. The stick even disappears from the joystick control panel in windows!","title":"Auto-Whitelister"},{"location":"projects/HidGuardian/Taming-HidGuardian-Gen1/","text":"Taming HidGuardian (Gen1) Is your Xbox/DualShock/Switch Pro/ insert gaming peripheral here controller device not detectable by games, Steam or even the entire Windows system ( joy.cpl )? Then you might have installed software which in turn placed a driver called HidGuardian on your machine and left its configuration in a state which accidentally permanently hid this device from other processes. Worry not though, with a bit of command line magic outlined below you'll be back in the game in no time! First, fire up PowerShell as Administrator , then proceed with the outlined steps below. Copy and paste the commands as one line unaltered, hit enter afterwards and observe the returned information. Now, first of all let's see if HidGuardian is even present (because if not, well, hardly can be the culprit then): PowerShell Get-PnpDevice -FriendlyName \"HidGuardian Virtual Device\" -ErrorAction SilentlyContinue This may result in no, one or more new lines like so: If there is at least one result like shown above chances are high we're on the right track. Next, execute: PowerShell Get-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Class\\{745a17a0-74d3-11d0-b6fe-00a0c90f57da}' -Name 'UpperFilters' -ErrorAction SilentlyContinue If UpperFilters exists and contains the string HidGuardian , the track has gotten red hot and we're onto something! Keep on reading! Next we check a particular registry value: PowerShell Get-ChildItem 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\HidGuardian\\Parameters\\AffectedDevices' -ErrorAction SilentlyContinue Chances are you might see a similar output. Now we're certain that HidGuardian is at fault hiding the controller. Oh No! Let's mitigate the situation by safely removing this value: PowerShell Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\HidGuardian\\Parameters' -Name 'AffectedDevices' This command should produce no output upon execution. And you're done! Either reopen the game/tool which didn't work before, unplug and plug back in the controller in question or - to be extra thorough - reboot the computer and try again!","title":"Taming HidGuardian (Gen1)"},{"location":"projects/HidGuardian/Taming-HidGuardian-Gen1/#taming-hidguardian-gen1","text":"Is your Xbox/DualShock/Switch Pro/ insert gaming peripheral here controller device not detectable by games, Steam or even the entire Windows system ( joy.cpl )? Then you might have installed software which in turn placed a driver called HidGuardian on your machine and left its configuration in a state which accidentally permanently hid this device from other processes. Worry not though, with a bit of command line magic outlined below you'll be back in the game in no time! First, fire up PowerShell as Administrator , then proceed with the outlined steps below. Copy and paste the commands as one line unaltered, hit enter afterwards and observe the returned information. Now, first of all let's see if HidGuardian is even present (because if not, well, hardly can be the culprit then): PowerShell Get-PnpDevice -FriendlyName \"HidGuardian Virtual Device\" -ErrorAction SilentlyContinue This may result in no, one or more new lines like so: If there is at least one result like shown above chances are high we're on the right track. Next, execute: PowerShell Get-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Class\\{745a17a0-74d3-11d0-b6fe-00a0c90f57da}' -Name 'UpperFilters' -ErrorAction SilentlyContinue If UpperFilters exists and contains the string HidGuardian , the track has gotten red hot and we're onto something! Keep on reading! Next we check a particular registry value: PowerShell Get-ChildItem 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\HidGuardian\\Parameters\\AffectedDevices' -ErrorAction SilentlyContinue Chances are you might see a similar output. Now we're certain that HidGuardian is at fault hiding the controller. Oh No! Let's mitigate the situation by safely removing this value: PowerShell Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Services\\HidGuardian\\Parameters' -Name 'AffectedDevices' This command should produce no output upon execution. And you're done! Either reopen the game/tool which didn't work before, unplug and plug back in the controller in question or - to be extra thorough - reboot the computer and try again!","title":"Taming HidGuardian (Gen1)"},{"location":"projects/HidHide/","text":"About HidHide HidHide is an \"input device firewall\" inspired by HidGuardian but designed and written from scratch. It allows for blocking individual applications access to HID and XInput devices, allowing users to re-route and re-map controller inputs as they please. Fresh release The binaries have been released ! \ud83e\udd73 More documentation coming soon \ud83d\ude01","title":"About HidHide"},{"location":"projects/HidHide/#about-hidhide","text":"HidHide is an \"input device firewall\" inspired by HidGuardian but designed and written from scratch. It allows for blocking individual applications access to HID and XInput devices, allowing users to re-route and re-map controller inputs as they please. Fresh release The binaries have been released ! \ud83e\udd73 More documentation coming soon \ud83d\ude01","title":"About HidHide"},{"location":"projects/HidHide/API-Documentation/","text":"API Documentation Topic intended for developers This topic is intended for developers who'd like to build upon the capabilities of HidHide and alter driver configuration. As an end-user you can simply use the client UI application shipped along with the driver setup. This article describes how an application can interact with the driver to influence which device instances get blocked and which processes get granted access. The steps outlined here are the only supported and safe way (besides the control application shipped along the driver) to interact with the driver and should be read carefully and thoroughly. Control Device The filter driver uses the common concept of exposing a Control Device which can be opened from any user-land process and used to send I/O Control Commands to. No elevated privileges are required (and thus should be avoided) to access the control device. Use the CreateFile Windows API within the language/framework of your choice and open the path \\\\.\\HidHide . See examples below for .NET or good ol' C/C++: Obtain Control Device handle C# // Use e.g. https://github.com/dotnet/pinvoke/ // Install-Package PInvoke.Kernel32 using ( var handle = Kernel32 . CreateFile ( \"\\\\\\\\.\\\\HidHide\" , Kernel32 . ACCESS_MASK . GenericRight . GENERIC_READ , Kernel32 . FileShare . FILE_SHARE_READ | Kernel32 . FileShare . FILE_SHARE_WRITE , IntPtr . Zero , Kernel32 . CreationDisposition . OPEN_EXISTING , Kernel32 . CreateFileFlags . FILE_ATTRIBUTE_NORMAL , Kernel32 . SafeObjectHandle . Null )) { // call DeviceIoControl here } C/C++ #include <Windows.h> HANDLE handle = CreateFile ( \" \\\\\\\\ . \\\\ HidHide\" , GENERIC_READ , ( FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE ), NULL , OPEN_EXISTING , FILE_ATTRIBUTE_NORMAL , NULL ); // call DeviceIoControl here CloseHandle ( handle ); For other frameworks and languages please consult the appropriate documentation. Exclusive handle access enforced Reading and altering the lists of denied/allowed entities is not an atomic operation, therefore only one handle (process) is allowed to open the control device and issue requests at a time. Make sure to close the handle shortly after your operations are done to not block other processes which may want to talk to the driver. I/O Control Commands Driver behavior is altered entirely through the DeviceIoControl Windows API and outlined below. Arrays of strings are exchanged as a double-null-terminated wide-character-string literal so make sure to apply proper conversion and specify the correct buffer lengths (include all NULL-characters and multiply times sizeof(wchar_t) ). Get Blacklist Retrieves the current blacklist/block-list/deny-list of Device Instance IDs which are currently blocked access to. Parameter Description dwIoControlCode IOCTL_GET_BLACKLIST lpInBuffer NULL nInBufferSize 0 lpOutBuffer Pre-allocated buffer receiving the current list of blocked (hidden) device instance identifiers as a double-null-terminated wide-character-string literal . nOutBufferSize The size of the buffer in bytes. lpBytesReturned The required buffer size in bytes. Set Blacklist Submits a new blacklist/block-list/deny-list of Device Instance IDs which are then blocked access to. Parameter Description dwIoControlCode IOCTL_SET_BLACKLIST lpInBuffer Buffer containing the new list of blocked (hidden) device instance identifiers as a double-null-terminated wide-character-string literal . nInBufferSize The size of the buffer in bytes. lpOutBuffer NULL nOutBufferSize 0 Get Whitelist Retrieves the current whitelist/allow-list of absolute DOS device paths to applications which are currently allowed to see blocked devices. Parameter Description dwIoControlCode IOCTL_GET_WHITELIST lpInBuffer NULL nInBufferSize 0 lpOutBuffer Pre-allocated buffer receiving the current list of whitelisted (allowed) file paths to processes in DOS device notation as a double-null-terminated wide-character-string literal . nOutBufferSize The size of the buffer in bytes. lpBytesReturned The required buffer size in bytes. Set Whitelist Submits a new whitelist/allow-list of absolute DOS device paths to applications which will then be allowed to see blocked devices. Parameter Description dwIoControlCode IOCTL_SET_WHITELIST lpInBuffer Buffer containing the new list of whitelisted (allowed) file paths to processes in DOS device notation as a double-null-terminated wide-character-string literal . nInBufferSize The size of the buffer in bytes. lpOutBuffer NULL nOutBufferSize 0 Get Status Retrieves the current global status of blocking capabilities. Returns a boolean value if the the driver is currently blocking configured devices ( true ) or on pass-through ( false ). Parameter Description dwIoControlCode IOCTL_GET_ACTIVE lpInBuffer NULL nInBufferSize 0 lpOutBuffer Gets the current state of the hiding capabilities ( 1 = device hiding active, 0 = device hiding inactive). nOutBufferSize sizeof(BOOLEAN) (1 byte) Set Status Submits the new global status of blocking capabilities. Sets a boolean value if the the driver is currently blocking configured devices ( true ) or on pass-through ( false ). Parameter Description dwIoControlCode IOCTL_SET_ACTIVE lpInBuffer Sets the new state of the hiding capabilities ( 1 = device hiding active, 0 = device hiding inactive). nInBufferSize sizeof(BOOLEAN) (1 byte) lpOutBuffer NULL nOutBufferSize 0 Usage examples The API usage should be fairly self-explanatory to anyone experienced with the basic Windows API, if in doubt, consult the Microsoft documentation for usage details \ud83d\ude09 For other high-level languages like C#/.NET wrapper libraries exist for the few required functions. A sample implementation is provided below (C#). Preparation First, since .NET doesn't really offer any convenience methods to deal with double-null-terminated wide-character-string literals I've thrown together this simple helper class: Dealing with the application list requires translating the native executable file path to the DOS device path the driver works with. This is a tricky task as it involves quite a few native API calls and logic taking NTFS mount points (junctions) into account. Feel free to utilise yet another helper class: With that out of the way we need the IOCTL definitions for the DeviceIoControl call. The values are simply computed from the helper macros which are not available in managed code: IOCTL code definitions C# private const uint IOCTL_GET_WHITELIST = 0 x80016000 ; private const uint IOCTL_SET_WHITELIST = 0 x80016004 ; private const uint IOCTL_GET_BLACKLIST = 0 x80016008 ; private const uint IOCTL_SET_BLACKLIST = 0 x8001600C ; private const uint IOCTL_GET_ACTIVE = 0 x80016010 ; private const uint IOCTL_SET_ACTIVE = 0 x80016014 ; Retrieve, alter and submit deny-list Retrieve, alter and submit allow-list","title":"API Documentation"},{"location":"projects/HidHide/API-Documentation/#api-documentation","text":"Topic intended for developers This topic is intended for developers who'd like to build upon the capabilities of HidHide and alter driver configuration. As an end-user you can simply use the client UI application shipped along with the driver setup. This article describes how an application can interact with the driver to influence which device instances get blocked and which processes get granted access. The steps outlined here are the only supported and safe way (besides the control application shipped along the driver) to interact with the driver and should be read carefully and thoroughly.","title":"API Documentation"},{"location":"projects/HidHide/API-Documentation/#control-device","text":"The filter driver uses the common concept of exposing a Control Device which can be opened from any user-land process and used to send I/O Control Commands to. No elevated privileges are required (and thus should be avoided) to access the control device. Use the CreateFile Windows API within the language/framework of your choice and open the path \\\\.\\HidHide . See examples below for .NET or good ol' C/C++: Obtain Control Device handle C# // Use e.g. https://github.com/dotnet/pinvoke/ // Install-Package PInvoke.Kernel32 using ( var handle = Kernel32 . CreateFile ( \"\\\\\\\\.\\\\HidHide\" , Kernel32 . ACCESS_MASK . GenericRight . GENERIC_READ , Kernel32 . FileShare . FILE_SHARE_READ | Kernel32 . FileShare . FILE_SHARE_WRITE , IntPtr . Zero , Kernel32 . CreationDisposition . OPEN_EXISTING , Kernel32 . CreateFileFlags . FILE_ATTRIBUTE_NORMAL , Kernel32 . SafeObjectHandle . Null )) { // call DeviceIoControl here } C/C++ #include <Windows.h> HANDLE handle = CreateFile ( \" \\\\\\\\ . \\\\ HidHide\" , GENERIC_READ , ( FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE ), NULL , OPEN_EXISTING , FILE_ATTRIBUTE_NORMAL , NULL ); // call DeviceIoControl here CloseHandle ( handle ); For other frameworks and languages please consult the appropriate documentation. Exclusive handle access enforced Reading and altering the lists of denied/allowed entities is not an atomic operation, therefore only one handle (process) is allowed to open the control device and issue requests at a time. Make sure to close the handle shortly after your operations are done to not block other processes which may want to talk to the driver.","title":"Control Device"},{"location":"projects/HidHide/API-Documentation/#io-control-commands","text":"Driver behavior is altered entirely through the DeviceIoControl Windows API and outlined below. Arrays of strings are exchanged as a double-null-terminated wide-character-string literal so make sure to apply proper conversion and specify the correct buffer lengths (include all NULL-characters and multiply times sizeof(wchar_t) ).","title":"I/O Control Commands"},{"location":"projects/HidHide/API-Documentation/#get-blacklist","text":"Retrieves the current blacklist/block-list/deny-list of Device Instance IDs which are currently blocked access to. Parameter Description dwIoControlCode IOCTL_GET_BLACKLIST lpInBuffer NULL nInBufferSize 0 lpOutBuffer Pre-allocated buffer receiving the current list of blocked (hidden) device instance identifiers as a double-null-terminated wide-character-string literal . nOutBufferSize The size of the buffer in bytes. lpBytesReturned The required buffer size in bytes.","title":"Get Blacklist"},{"location":"projects/HidHide/API-Documentation/#set-blacklist","text":"Submits a new blacklist/block-list/deny-list of Device Instance IDs which are then blocked access to. Parameter Description dwIoControlCode IOCTL_SET_BLACKLIST lpInBuffer Buffer containing the new list of blocked (hidden) device instance identifiers as a double-null-terminated wide-character-string literal . nInBufferSize The size of the buffer in bytes. lpOutBuffer NULL nOutBufferSize 0","title":"Set Blacklist"},{"location":"projects/HidHide/API-Documentation/#get-whitelist","text":"Retrieves the current whitelist/allow-list of absolute DOS device paths to applications which are currently allowed to see blocked devices. Parameter Description dwIoControlCode IOCTL_GET_WHITELIST lpInBuffer NULL nInBufferSize 0 lpOutBuffer Pre-allocated buffer receiving the current list of whitelisted (allowed) file paths to processes in DOS device notation as a double-null-terminated wide-character-string literal . nOutBufferSize The size of the buffer in bytes. lpBytesReturned The required buffer size in bytes.","title":"Get Whitelist"},{"location":"projects/HidHide/API-Documentation/#set-whitelist","text":"Submits a new whitelist/allow-list of absolute DOS device paths to applications which will then be allowed to see blocked devices. Parameter Description dwIoControlCode IOCTL_SET_WHITELIST lpInBuffer Buffer containing the new list of whitelisted (allowed) file paths to processes in DOS device notation as a double-null-terminated wide-character-string literal . nInBufferSize The size of the buffer in bytes. lpOutBuffer NULL nOutBufferSize 0","title":"Set Whitelist"},{"location":"projects/HidHide/API-Documentation/#get-status","text":"Retrieves the current global status of blocking capabilities. Returns a boolean value if the the driver is currently blocking configured devices ( true ) or on pass-through ( false ). Parameter Description dwIoControlCode IOCTL_GET_ACTIVE lpInBuffer NULL nInBufferSize 0 lpOutBuffer Gets the current state of the hiding capabilities ( 1 = device hiding active, 0 = device hiding inactive). nOutBufferSize sizeof(BOOLEAN) (1 byte)","title":"Get Status"},{"location":"projects/HidHide/API-Documentation/#set-status","text":"Submits the new global status of blocking capabilities. Sets a boolean value if the the driver is currently blocking configured devices ( true ) or on pass-through ( false ). Parameter Description dwIoControlCode IOCTL_SET_ACTIVE lpInBuffer Sets the new state of the hiding capabilities ( 1 = device hiding active, 0 = device hiding inactive). nInBufferSize sizeof(BOOLEAN) (1 byte) lpOutBuffer NULL nOutBufferSize 0","title":"Set Status"},{"location":"projects/HidHide/API-Documentation/#usage-examples","text":"The API usage should be fairly self-explanatory to anyone experienced with the basic Windows API, if in doubt, consult the Microsoft documentation for usage details \ud83d\ude09 For other high-level languages like C#/.NET wrapper libraries exist for the few required functions. A sample implementation is provided below (C#).","title":"Usage examples"},{"location":"projects/HidHide/API-Documentation/#preparation","text":"First, since .NET doesn't really offer any convenience methods to deal with double-null-terminated wide-character-string literals I've thrown together this simple helper class: Dealing with the application list requires translating the native executable file path to the DOS device path the driver works with. This is a tricky task as it involves quite a few native API calls and logic taking NTFS mount points (junctions) into account. Feel free to utilise yet another helper class: With that out of the way we need the IOCTL definitions for the DeviceIoControl call. The values are simply computed from the helper macros which are not available in managed code: IOCTL code definitions C# private const uint IOCTL_GET_WHITELIST = 0 x80016000 ; private const uint IOCTL_SET_WHITELIST = 0 x80016004 ; private const uint IOCTL_GET_BLACKLIST = 0 x80016008 ; private const uint IOCTL_SET_BLACKLIST = 0 x8001600C ; private const uint IOCTL_GET_ACTIVE = 0 x80016010 ; private const uint IOCTL_SET_ACTIVE = 0 x80016014 ;","title":"Preparation"},{"location":"projects/HidHide/API-Documentation/#retrieve-alter-and-submit-deny-list","text":"","title":"Retrieve, alter and submit deny-list"},{"location":"projects/HidHide/API-Documentation/#retrieve-alter-and-submit-allow-list","text":"","title":"Retrieve, alter and submit allow-list"},{"location":"projects/HidHide/Simple-Setup-Guide/","text":"Simple setup guide HidHide is only supported on 64 bits Windows 10 as for the day this article was written What is HidHide HidHide is a filter driver than can \"hide\" Gamepads/joysticks devices, ensuring Windows and other applications stop detecting it as a game controller and allowing only chosen applications to see them. Specially useful when the user is remapping a real controller into an emulated one. Why one might need it Imagine the following scenario: you have a generic gamepad that you want to \"convert\" into a XInput Device (a Xbox 360 controller) or DualShock 4, since most games are already pre-configured to these controllers, or maybe your game doesn't even detect your generic one as it is. So you start using a remapping program ( x360ce / XOutput / UCR / etc ) to do so. This put you in a problematic situation: you don't end-up just with the emulated controller that you want to use. No no, you end-up with 2 controllers: the real and the emulated one. If the games you are playing don't even detect your real controller, then all good. The issue starts when the game detects both real and emulated controllers while you only want it to recognize the latter. Since most games auto-detect controllers, the game will think there are 2 separate controllers connected, leading to the famous Double-Input and mis-input issue. Examples: Rocket league will start 2 player mode randomly Blasphemous will switch randomly between generic and XInput/DS4 button icons Need for Speed: Most Wanted (2012) will keep warning the player an unknown device needs to be setup, interfering with gameplay This issue can be solved by using HidHide to: Hide the real controller Only allow the remapping tool of your choice to see the controller, since it needs to pick its input to translate them to the emulated one Verifying if HidGuardian is installed and uninstalling it HidHide and HidGuardian MUST NOT be together on the same system HidHide is HidGuardian's successor and both have the same function. Having the two installed simultaneously can cause confusion at best and actual issues at worst. HidGuardian's installer utility can check if it's installed and correctly uninstall it in case it is, so that's what we are going to use: Download and extract this archive Inside the extracted folder, run HidGuardianInstaller.exe Check in the text log if HidGuardian is installed. If it is not, you can close the utility and move on to the next section If HidGuardian is installed, click on the \"Uninstall\" button Wait until the utility finishes uninstalling HidGuardian, keep and eye on the text log to know what its status After the tool finishes uninstalling HidGuardian, close it then reboot your PC Setting up HidHide (quick guide) Attention! This section is for users who know more or less what they are doing. If you want a more detailed, step-by-step guide, jump to the next section. Download the Latest release of HidHide (It should be a file called HidHideMSI.msi). Remember to install its prerequisites as written on the page After installation, reboot your computer Open the HidHide Configuration Client in the start menu On the Applications tab, add the applications that should be able to see the devices even when they are hidden On the Devices tab mark the controllers you want to be hidden (a red lock should appear), then mark the Enable device hiding Checkbox Reconnect your controllers to make the changes effective DONE. Be happy. Still, be sure to give a read on the last sections of this article. Setting up HidHide (step-by-step guide) Installing HidHide Install HidHide's prerequisites according to your Windows 10 version Download the Latest release of HidHide (it should be a file called HidHideMSI.msi ) Open the downloaded file and install HidHide as instructed at default settings (just click Next until it finishes installing) After the installation, reboot your computer Hiding the controller Open the \"HidHide Configuration Client\" in the start menu On the Configuration Client, click on the Devices tab to show the list of connected controllers Have the controllers you want to hide connected to your computer On your controllers entries, mark the white box before their names. A red lock icon should appear If your controller can connect both via cable and Bluetooth, reconnect your controllers via the other connection method and also mark their new entries Mark the box in the bottom called \"Enable Device Hiding\" to (obviously) activate the hiding of the marked devices Verifying if the controllers are hidden At this point, your controllers should be hidden to everything. To verify, open Windows' joy.cpl by one of the following methods: Pressing the key combination Win + R and then entering joy.cpl OR Searching and opening on Windows' Start Menu Set up USB Game Controllers Assuming the hidden controllers are the only ones connected to the system and there are no virtual controllers being emulated, no device should show up in the Game Controller's list. If your real controller is still on the list, try reconnecting them. Allowing chosen applications to see hidden devices Now that it's confirmed your controllers are hidden, you need to select which applications should be able to detect them anyway: On the Configuration Client, click on the Applications tab Click on the + icon and add the executable file of your application ( ApplicationName.exe ) to whitelist it Repeat the step above for each application that should whitelisted After that, fully close then reopen your application (in case it was running) for it to detect the hidden devices. Alternatively, just reconnect your controllers. From this point, the applications on the list should be able to detect the hidden devices. The image below is an example of the application \"UCR\" being able to see a hidden Controller and emulating a DualShock 4: Users of DS4Windows: PAY ATTENTION! If you are running DS4Windows under a custom .exe name (look at your DS4Windows' Other tab) then the custom named executable must also be added to the list What now? If you've set everything correctly then all that is left is for you to enjoy! Before you leave, have a quick look in the next section and on the Frequently Asked Questions article on the left side-bar (I mean... if it has already been created). Things to keep in mind Common things to know regarding using HidHide with your controllers: Contrary to HidGuardian, HidHide affects isolated devices instead of device types. This means that if you have (for example) 4 different controllers that are the exact same model, you would still need to mark each one as hidden separately, both on USB and on Bluetooth HidHide whitelists applications based on their location in your computer. This means that if you whitelist \"UCR.exe\" that is on your desktop, but then move it to another folder you will need to whitelist it again on its new location If you think something is wrong and want to disable HidHide to run tests, just open the HidHide Configuration Utility , go into the Devices tab and un-check the Enable Device Hiding checkbox. If this doesn't make the devices visible again, try then reconnecting them Applications may add native support to HidHide in future updates, automating the process by whitelisting themselves and auto-hiding detected controllers","title":"Simple setup guide"},{"location":"projects/HidHide/Simple-Setup-Guide/#simple-setup-guide","text":"HidHide is only supported on 64 bits Windows 10 as for the day this article was written","title":"Simple setup guide"},{"location":"projects/HidHide/Simple-Setup-Guide/#what-is-hidhide","text":"HidHide is a filter driver than can \"hide\" Gamepads/joysticks devices, ensuring Windows and other applications stop detecting it as a game controller and allowing only chosen applications to see them. Specially useful when the user is remapping a real controller into an emulated one.","title":"What is HidHide"},{"location":"projects/HidHide/Simple-Setup-Guide/#why-one-might-need-it","text":"Imagine the following scenario: you have a generic gamepad that you want to \"convert\" into a XInput Device (a Xbox 360 controller) or DualShock 4, since most games are already pre-configured to these controllers, or maybe your game doesn't even detect your generic one as it is. So you start using a remapping program ( x360ce / XOutput / UCR / etc ) to do so. This put you in a problematic situation: you don't end-up just with the emulated controller that you want to use. No no, you end-up with 2 controllers: the real and the emulated one. If the games you are playing don't even detect your real controller, then all good. The issue starts when the game detects both real and emulated controllers while you only want it to recognize the latter. Since most games auto-detect controllers, the game will think there are 2 separate controllers connected, leading to the famous Double-Input and mis-input issue. Examples: Rocket league will start 2 player mode randomly Blasphemous will switch randomly between generic and XInput/DS4 button icons Need for Speed: Most Wanted (2012) will keep warning the player an unknown device needs to be setup, interfering with gameplay This issue can be solved by using HidHide to: Hide the real controller Only allow the remapping tool of your choice to see the controller, since it needs to pick its input to translate them to the emulated one","title":"Why one might need it"},{"location":"projects/HidHide/Simple-Setup-Guide/#verifying-if-hidguardian-is-installed-and-uninstalling-it","text":"HidHide and HidGuardian MUST NOT be together on the same system HidHide is HidGuardian's successor and both have the same function. Having the two installed simultaneously can cause confusion at best and actual issues at worst. HidGuardian's installer utility can check if it's installed and correctly uninstall it in case it is, so that's what we are going to use: Download and extract this archive Inside the extracted folder, run HidGuardianInstaller.exe Check in the text log if HidGuardian is installed. If it is not, you can close the utility and move on to the next section If HidGuardian is installed, click on the \"Uninstall\" button Wait until the utility finishes uninstalling HidGuardian, keep and eye on the text log to know what its status After the tool finishes uninstalling HidGuardian, close it then reboot your PC","title":"Verifying if HidGuardian is installed and uninstalling it"},{"location":"projects/HidHide/Simple-Setup-Guide/#setting-up-hidhide-quick-guide","text":"Attention! This section is for users who know more or less what they are doing. If you want a more detailed, step-by-step guide, jump to the next section. Download the Latest release of HidHide (It should be a file called HidHideMSI.msi). Remember to install its prerequisites as written on the page After installation, reboot your computer Open the HidHide Configuration Client in the start menu On the Applications tab, add the applications that should be able to see the devices even when they are hidden On the Devices tab mark the controllers you want to be hidden (a red lock should appear), then mark the Enable device hiding Checkbox Reconnect your controllers to make the changes effective DONE. Be happy. Still, be sure to give a read on the last sections of this article.","title":"Setting up HidHide (quick guide)"},{"location":"projects/HidHide/Simple-Setup-Guide/#setting-up-hidhide-step-by-step-guide","text":"","title":"Setting up HidHide (step-by-step guide)"},{"location":"projects/HidHide/Simple-Setup-Guide/#installing-hidhide","text":"Install HidHide's prerequisites according to your Windows 10 version Download the Latest release of HidHide (it should be a file called HidHideMSI.msi ) Open the downloaded file and install HidHide as instructed at default settings (just click Next until it finishes installing) After the installation, reboot your computer","title":"Installing HidHide"},{"location":"projects/HidHide/Simple-Setup-Guide/#hiding-the-controller","text":"Open the \"HidHide Configuration Client\" in the start menu On the Configuration Client, click on the Devices tab to show the list of connected controllers Have the controllers you want to hide connected to your computer On your controllers entries, mark the white box before their names. A red lock icon should appear If your controller can connect both via cable and Bluetooth, reconnect your controllers via the other connection method and also mark their new entries Mark the box in the bottom called \"Enable Device Hiding\" to (obviously) activate the hiding of the marked devices","title":"Hiding the controller"},{"location":"projects/HidHide/Simple-Setup-Guide/#verifying-if-the-controllers-are-hidden","text":"At this point, your controllers should be hidden to everything. To verify, open Windows' joy.cpl by one of the following methods: Pressing the key combination Win + R and then entering joy.cpl OR Searching and opening on Windows' Start Menu Set up USB Game Controllers Assuming the hidden controllers are the only ones connected to the system and there are no virtual controllers being emulated, no device should show up in the Game Controller's list. If your real controller is still on the list, try reconnecting them.","title":"Verifying if the controllers are hidden"},{"location":"projects/HidHide/Simple-Setup-Guide/#allowing-chosen-applications-to-see-hidden-devices","text":"Now that it's confirmed your controllers are hidden, you need to select which applications should be able to detect them anyway: On the Configuration Client, click on the Applications tab Click on the + icon and add the executable file of your application ( ApplicationName.exe ) to whitelist it Repeat the step above for each application that should whitelisted After that, fully close then reopen your application (in case it was running) for it to detect the hidden devices. Alternatively, just reconnect your controllers. From this point, the applications on the list should be able to detect the hidden devices. The image below is an example of the application \"UCR\" being able to see a hidden Controller and emulating a DualShock 4: Users of DS4Windows: PAY ATTENTION! If you are running DS4Windows under a custom .exe name (look at your DS4Windows' Other tab) then the custom named executable must also be added to the list","title":"Allowing chosen applications to see hidden devices"},{"location":"projects/HidHide/Simple-Setup-Guide/#what-now","text":"If you've set everything correctly then all that is left is for you to enjoy! Before you leave, have a quick look in the next section and on the Frequently Asked Questions article on the left side-bar (I mean... if it has already been created).","title":"What now?"},{"location":"projects/HidHide/Simple-Setup-Guide/#things-to-keep-in-mind","text":"Common things to know regarding using HidHide with your controllers: Contrary to HidGuardian, HidHide affects isolated devices instead of device types. This means that if you have (for example) 4 different controllers that are the exact same model, you would still need to mark each one as hidden separately, both on USB and on Bluetooth HidHide whitelists applications based on their location in your computer. This means that if you whitelist \"UCR.exe\" that is on your desktop, but then move it to another folder you will need to whitelist it again on its new location If you think something is wrong and want to disable HidHide to run tests, just open the HidHide Configuration Utility , go into the Devices tab and un-check the Enable Device Hiding checkbox. If this doesn't make the devices visible again, try then reconnecting them Applications may add native support to HidHide in future updates, automating the process by whitelisting themselves and auto-hiding detected controllers","title":"Things to keep in mind"},{"location":"projects/ScpToolkit/","text":"About ScpToolkit This project has been discontinued and will not receive any updates or support TBD","title":"About ScpToolkit"},{"location":"projects/ScpToolkit/#about-scptoolkit","text":"This project has been discontinued and will not receive any updates or support TBD","title":"About ScpToolkit"},{"location":"projects/ScpToolkit/History/","text":"History of SCP Back to the future My little attempt to piece together a rough timeline of SCPs progression through history \ud83d\ude05 August 2011 Birth of ScpServer Saga . The Epoch moment! A mysterious and to this day anonymous user of the nickname Scarlet.Crush has started publishing and documenting work to tackle the issue of the DualShock 3 not behaving properly with Windows stock drivers. This solution also evolved heavily over time, had seen different components and strategies come and go and is a treasure chest of reverse engineering information. May 2014 Scarlet.Crush last post . A saddening point in history where Scarlet.Crush was last seen alive. Probably gotten consumed by wolves in the wild while going on a hike. Or a potentially less dramatic explanation of simply becoming tired of community support and moving on with life. Might have even gotten married or finally retired the Sony controllers and gave into the dark side purchasing an Xbox 360 controller. One can only speculate! July 2015 Nefarius enters the stage . A young, naive, inexperienced and slightly less cynical individual enters the stage. I've stumbled upon this project after buying a Sony DualShock 3 controller in a local electronics market on accident for the sole purpose of playing on Windows (in Nintendo emulators to be precise). As I've never owned a game console myself before (PC/Microsoft fanboy \ud83d\ude07) I simply assumed that any controller with the trusty familiar Bluetooth logo on the packaging implicitly means that Windows will eat it up just fine. Oh boy, was I wrong! But being the curious (and lazy) soul I was instead of returning it for an Xbox controller I started a little web search and found the - now abandoned yet risen in popularity - SCP Server project. Intrigued by the fact that the author also left the full source code behind and it being C# (a language I was fairly familiar with back in the days) I tried my spin on it to answer the cries for updates and fixes, especially with Windows 10 on the rise and making the project work in this new OS version. From that point in time it's been code, test, code, read, code, revert, read, code, study, test, support, reply, code, read, code, support, ... you get the idea \ud83d\ude05 August 2015 New Thread announcement . Time to move! The crowd had accepted me as their new lord and saviour (narcissist much?) so I decided to move to my own fresh thread for the now re-branded \"ScpToolkit\" - a name chosen simply because of the sheer amount of sub-projects within the solution for all the various tasks (driver installer, service, stand-alone server, tray application, troubleshooter component, etc.). I had no idea how popular it would become so I simply kept the \"SCP\" prefix, which is not related to the SCP Foundation but simply stands for \"Scarlet.Crush Productions\", a fictitious company name chosen by our vanished predecessor. New Thread created . From now on, most of the communication (change-log snippets, exchanged ideas, support inquiries, etc.) happens here as more and more users hop onto the ScpToolkit train. January 2016 Last stable release . Time flies and we come close to the realization that SCP as a ginormous C# project isn't really sustainable and maintainable in the long run. SCP did everything a device driver (or set of) should have done in user-land. It was insane. It worked but was still insane. Things had to change. And they did. April 2016 Last Beta release One last attempt to learn from past mistakes, a polished release with a new overhauled driver installer wizard holding the hands of the user but limiting their freedom to tinker in comparison to version 1.6. It should never see another (stable) update \ud83d\ude27 This was also the time where the first experiments with the ViGEm Bus Driver arose in secrecy. June 2017 Last commits fizzle out . As an overwhelming amount of feature and support requests kept pouring in, basically obstructing any meaningful push towards a new update, the last attempts to keep motivation up started to dry up. SCP got killed by too high of a demand and too little of the FOSS spirit: contributions. I had to pull the plug or I would've lost my hopes in open-source software and coding in general entirely as I've been forced into the position of a help desk operator. Not something I enjoy to spend my free time with \ud83d\ude42 Working on ViGEm's early designs was far more challenging and interesting than babysitting people flooding the issue tracker with duplicates, off-topic content and an overall disgusting trend towards entitlement for something they received for absolutely free. Go figure! So in a sense, the (grown rather big) portion of the user-base of entitled crybabies is what killed SCP in the long run \ud83d\udd25 January 2018 Last commit cleaning the issue tracker . Not gonna lie, this was a fun task to pull of. I grabbed all the open issue IDs through the GitHub API and crafted one last apocalyptic commit triggering GitHub's automation to close all remaining issues so the project could be archived on a clean slate. After that, the project got archived for good. So long \ud83d\udd96 January 2019 Official death announcement . As other projects had started to take priority in my life I left SCP bubble around (especially the threads on the PCSX2 forums which received the most traffic, still) and finally a year later made the official statement in those places, that the ride had indeed ended and people needed to move on. The end \u2764\ufe0f","title":"History of SCP"},{"location":"projects/ScpToolkit/History/#history-of-scp","text":"Back to the future My little attempt to piece together a rough timeline of SCPs progression through history \ud83d\ude05","title":"History of SCP"},{"location":"projects/ScpToolkit/History/#august-2011","text":"Birth of ScpServer Saga . The Epoch moment! A mysterious and to this day anonymous user of the nickname Scarlet.Crush has started publishing and documenting work to tackle the issue of the DualShock 3 not behaving properly with Windows stock drivers. This solution also evolved heavily over time, had seen different components and strategies come and go and is a treasure chest of reverse engineering information.","title":"August 2011"},{"location":"projects/ScpToolkit/History/#may-2014","text":"Scarlet.Crush last post . A saddening point in history where Scarlet.Crush was last seen alive. Probably gotten consumed by wolves in the wild while going on a hike. Or a potentially less dramatic explanation of simply becoming tired of community support and moving on with life. Might have even gotten married or finally retired the Sony controllers and gave into the dark side purchasing an Xbox 360 controller. One can only speculate!","title":"May 2014"},{"location":"projects/ScpToolkit/History/#july-2015","text":"Nefarius enters the stage . A young, naive, inexperienced and slightly less cynical individual enters the stage. I've stumbled upon this project after buying a Sony DualShock 3 controller in a local electronics market on accident for the sole purpose of playing on Windows (in Nintendo emulators to be precise). As I've never owned a game console myself before (PC/Microsoft fanboy \ud83d\ude07) I simply assumed that any controller with the trusty familiar Bluetooth logo on the packaging implicitly means that Windows will eat it up just fine. Oh boy, was I wrong! But being the curious (and lazy) soul I was instead of returning it for an Xbox controller I started a little web search and found the - now abandoned yet risen in popularity - SCP Server project. Intrigued by the fact that the author also left the full source code behind and it being C# (a language I was fairly familiar with back in the days) I tried my spin on it to answer the cries for updates and fixes, especially with Windows 10 on the rise and making the project work in this new OS version. From that point in time it's been code, test, code, read, code, revert, read, code, study, test, support, reply, code, read, code, support, ... you get the idea \ud83d\ude05","title":"July 2015"},{"location":"projects/ScpToolkit/History/#august-2015","text":"New Thread announcement . Time to move! The crowd had accepted me as their new lord and saviour (narcissist much?) so I decided to move to my own fresh thread for the now re-branded \"ScpToolkit\" - a name chosen simply because of the sheer amount of sub-projects within the solution for all the various tasks (driver installer, service, stand-alone server, tray application, troubleshooter component, etc.). I had no idea how popular it would become so I simply kept the \"SCP\" prefix, which is not related to the SCP Foundation but simply stands for \"Scarlet.Crush Productions\", a fictitious company name chosen by our vanished predecessor. New Thread created . From now on, most of the communication (change-log snippets, exchanged ideas, support inquiries, etc.) happens here as more and more users hop onto the ScpToolkit train.","title":"August 2015"},{"location":"projects/ScpToolkit/History/#january-2016","text":"Last stable release . Time flies and we come close to the realization that SCP as a ginormous C# project isn't really sustainable and maintainable in the long run. SCP did everything a device driver (or set of) should have done in user-land. It was insane. It worked but was still insane. Things had to change. And they did.","title":"January 2016"},{"location":"projects/ScpToolkit/History/#april-2016","text":"Last Beta release One last attempt to learn from past mistakes, a polished release with a new overhauled driver installer wizard holding the hands of the user but limiting their freedom to tinker in comparison to version 1.6. It should never see another (stable) update \ud83d\ude27 This was also the time where the first experiments with the ViGEm Bus Driver arose in secrecy.","title":"April 2016"},{"location":"projects/ScpToolkit/History/#june-2017","text":"Last commits fizzle out . As an overwhelming amount of feature and support requests kept pouring in, basically obstructing any meaningful push towards a new update, the last attempts to keep motivation up started to dry up. SCP got killed by too high of a demand and too little of the FOSS spirit: contributions. I had to pull the plug or I would've lost my hopes in open-source software and coding in general entirely as I've been forced into the position of a help desk operator. Not something I enjoy to spend my free time with \ud83d\ude42 Working on ViGEm's early designs was far more challenging and interesting than babysitting people flooding the issue tracker with duplicates, off-topic content and an overall disgusting trend towards entitlement for something they received for absolutely free. Go figure! So in a sense, the (grown rather big) portion of the user-base of entitled crybabies is what killed SCP in the long run \ud83d\udd25","title":"June 2017"},{"location":"projects/ScpToolkit/History/#january-2018","text":"Last commit cleaning the issue tracker . Not gonna lie, this was a fun task to pull of. I grabbed all the open issue IDs through the GitHub API and crafted one last apocalyptic commit triggering GitHub's automation to close all remaining issues so the project could be archived on a clean slate. After that, the project got archived for good. So long \ud83d\udd96","title":"January 2018"},{"location":"projects/ScpToolkit/History/#january-2019","text":"Official death announcement . As other projects had started to take priority in my life I left SCP bubble around (especially the threads on the PCSX2 forums which received the most traffic, still) and finally a year later made the official statement in those places, that the ride had indeed ended and people needed to move on. The end \u2764\ufe0f","title":"January 2019"},{"location":"projects/ScpToolkit/ScpToolkit-Removal-Guide/","text":"Manual removal of ScpToolkit residue This article will walk you through the process of removing any traces of various versions of ScpToolkit from your machine \ud83d\ude0a How to determine ScpToolkit version If you're not sure if you're either running version 1.6.x or 1.7.x you can check this by going to Programs and Features and inspect the version column like demonstrated below: In this case, version 1.6.x is installed and the according removal procedures apply. Don't worry if it's not there If you don't find this entry because your installation is damaged or partially removed, don't worry, just read on and try all the steps provided in this guide! Stop processes, remove the service Administrative permissions required Make sure to run the following commands in an administrative prompt ! These instructions terminate all SCP components that might currently run: CMD taskkill /F /IM ScpServer.exe taskkill /F /IM ScpMonitor.exe taskkill /F /IM ScpTrayApp.exe Should look similar to this output (notice that the server wasn't running, therefore displaying an error): If none were running, that's perfectly fine, just continue. Now let's stop and delete the background service: CMD sc stop Ds3Service sc delete Ds3Service Resulting in: Errors can be ignored Depending on your installation, the service might not be installed. In that case, just ignore reported errors. Remove drivers from v1.6 Connect all your devices For this procedure to work properly make sure you've got your controller(s) and Bluetooth dongle(s) connected. If you don't have enough USB ports just repeat the described steps for each device, plugging it in one after another. Download and run the DriverStore Explorer tool. We'll use this to safely remove the driver files from the system. Make sure to run it with administrative permissions! You'll be presented with a list of drivers found on your machine: The highlighted entries belong to the toolkit installation. Select those, tick the Force Deletion box on the right and then click Delete Package : Confirm the, uhm, confirmation \ud83d\ude03 A few moments later they shall be gone: Sweet! Now we need to instruct Windows to revert the devices to their default drivers. Open Device Manager and look for a node titled libusbK USB Devices : Expanding said node shall reveal the devices running under SCP's drivers: Right-click on each of those and select Uninstall : We're sure we wanna do that \ud83d\ude0b Same goes for the Bluetooth host: Alternatively the section and device names may differ, depending on your specific case, like so: There's a catch You might think that you're done now but there's a twist! A copy of the driver can still remain in memory and therefore won't be deleted. I strongly recommend you re-plug all devices and check if they are still running under the SCP drivers! If your controller or Bluetooth dongle is still showing up in the libusbK node, right-click, uninstall and re-plug until it's gone for good Observe and repeat carefully or you'll be left with unusable devices If you've done well, this is how your devices should pop up as again: Great! Now there's the Bluetooth dongle back running the default Windows drivers and the controller is under Human Interface Devices where it belongs Remove drivers from v1.7 The procedure for 1.7 is very similar to the steps described for 1.6 above, except that the node you'll find the devices under is called Universal Serial Bus devices : In Driver Store Explorer, things will pop up slightly different, nevertheless select and force removal: Then, in Device Manager go through the same \"right-click, Uninstall\" procedure: Rinse and repeat until the devices won't show up under this node anymore. Remove SCP Virtual Bus driver While still in Device Manager, expand the System devices node: Locate the device named Scp Virtual Bus Driver : Same deal here; right-click, select Uninstall and confirm: But are the drivers really gone though? Not sure if everything's cleaned up like it should? Devices still not showing up normally or behaving funny? How about this: Get the free tool DevManView from Nir Sofer (download link at the bottom of the page) Extract it somewhere Launch the DevManView.exe executable (you'll be prompted to give administrative consent) Look for entries with Device Name like Scp Virtual Bus Driver Bluetooth Host (ScpToolkit) DualShock 3 Controller (ScpToolkit) DualShock 4 Controller (ScpToolkit) Example of some ScpToolkit v1.7.x residue: If that's the case scroll back up and have a go at it again Remove program files As a last step you can now safely delete the ScpToolkit installation directory, typically C:\\Program Files\\Nefarius Software Solutions\\ScpToolkit (may be subject to change depending on your installation, consult your brain memory to find the correct path ) Congratulate yourself and reboot You've done it! You escaped the curse! Give yourself a pat on the back and reboot your PC, just to be sure","title":"Manual removal of ScpToolkit residue"},{"location":"projects/ScpToolkit/ScpToolkit-Removal-Guide/#manual-removal-of-scptoolkit-residue","text":"This article will walk you through the process of removing any traces of various versions of ScpToolkit from your machine \ud83d\ude0a","title":"Manual removal of ScpToolkit residue"},{"location":"projects/ScpToolkit/ScpToolkit-Removal-Guide/#how-to-determine-scptoolkit-version","text":"If you're not sure if you're either running version 1.6.x or 1.7.x you can check this by going to Programs and Features and inspect the version column like demonstrated below: In this case, version 1.6.x is installed and the according removal procedures apply. Don't worry if it's not there If you don't find this entry because your installation is damaged or partially removed, don't worry, just read on and try all the steps provided in this guide!","title":"How to determine ScpToolkit version"},{"location":"projects/ScpToolkit/ScpToolkit-Removal-Guide/#stop-processes-remove-the-service","text":"Administrative permissions required Make sure to run the following commands in an administrative prompt ! These instructions terminate all SCP components that might currently run: CMD taskkill /F /IM ScpServer.exe taskkill /F /IM ScpMonitor.exe taskkill /F /IM ScpTrayApp.exe Should look similar to this output (notice that the server wasn't running, therefore displaying an error): If none were running, that's perfectly fine, just continue. Now let's stop and delete the background service: CMD sc stop Ds3Service sc delete Ds3Service Resulting in: Errors can be ignored Depending on your installation, the service might not be installed. In that case, just ignore reported errors.","title":"Stop processes, remove the service"},{"location":"projects/ScpToolkit/ScpToolkit-Removal-Guide/#remove-drivers-from-v16","text":"Connect all your devices For this procedure to work properly make sure you've got your controller(s) and Bluetooth dongle(s) connected. If you don't have enough USB ports just repeat the described steps for each device, plugging it in one after another. Download and run the DriverStore Explorer tool. We'll use this to safely remove the driver files from the system. Make sure to run it with administrative permissions! You'll be presented with a list of drivers found on your machine: The highlighted entries belong to the toolkit installation. Select those, tick the Force Deletion box on the right and then click Delete Package : Confirm the, uhm, confirmation \ud83d\ude03 A few moments later they shall be gone: Sweet! Now we need to instruct Windows to revert the devices to their default drivers. Open Device Manager and look for a node titled libusbK USB Devices : Expanding said node shall reveal the devices running under SCP's drivers: Right-click on each of those and select Uninstall : We're sure we wanna do that \ud83d\ude0b Same goes for the Bluetooth host: Alternatively the section and device names may differ, depending on your specific case, like so: There's a catch You might think that you're done now but there's a twist! A copy of the driver can still remain in memory and therefore won't be deleted. I strongly recommend you re-plug all devices and check if they are still running under the SCP drivers! If your controller or Bluetooth dongle is still showing up in the libusbK node, right-click, uninstall and re-plug until it's gone for good Observe and repeat carefully or you'll be left with unusable devices If you've done well, this is how your devices should pop up as again: Great! Now there's the Bluetooth dongle back running the default Windows drivers and the controller is under Human Interface Devices where it belongs","title":"Remove drivers from v1.6"},{"location":"projects/ScpToolkit/ScpToolkit-Removal-Guide/#remove-drivers-from-v17","text":"The procedure for 1.7 is very similar to the steps described for 1.6 above, except that the node you'll find the devices under is called Universal Serial Bus devices : In Driver Store Explorer, things will pop up slightly different, nevertheless select and force removal: Then, in Device Manager go through the same \"right-click, Uninstall\" procedure: Rinse and repeat until the devices won't show up under this node anymore.","title":"Remove drivers from v1.7"},{"location":"projects/ScpToolkit/ScpToolkit-Removal-Guide/#remove-scp-virtual-bus-driver","text":"While still in Device Manager, expand the System devices node: Locate the device named Scp Virtual Bus Driver : Same deal here; right-click, select Uninstall and confirm:","title":"Remove SCP Virtual Bus driver"},{"location":"projects/ScpToolkit/ScpToolkit-Removal-Guide/#but-are-the-drivers-really-gone-though","text":"Not sure if everything's cleaned up like it should? Devices still not showing up normally or behaving funny? How about this: Get the free tool DevManView from Nir Sofer (download link at the bottom of the page) Extract it somewhere Launch the DevManView.exe executable (you'll be prompted to give administrative consent) Look for entries with Device Name like Scp Virtual Bus Driver Bluetooth Host (ScpToolkit) DualShock 3 Controller (ScpToolkit) DualShock 4 Controller (ScpToolkit) Example of some ScpToolkit v1.7.x residue: If that's the case scroll back up and have a go at it again","title":"But are the drivers really gone though?"},{"location":"projects/ScpToolkit/ScpToolkit-Removal-Guide/#remove-program-files","text":"As a last step you can now safely delete the ScpToolkit installation directory, typically C:\\Program Files\\Nefarius Software Solutions\\ScpToolkit (may be subject to change depending on your installation, consult your brain memory to find the correct path )","title":"Remove program files"},{"location":"projects/ScpToolkit/ScpToolkit-Removal-Guide/#congratulate-yourself-and-reboot","text":"You've done it! You escaped the curse! Give yourself a pat on the back and reboot your PC, just to be sure","title":"Congratulate yourself and reboot"},{"location":"projects/Shibari/","text":"About Shibari Work in progress","title":"About Shibari"},{"location":"projects/Shibari/#about-shibari","text":"Work in progress","title":"About Shibari"},{"location":"projects/ViGEm/","text":"About ViGEm Work in progress","title":"About ViGEm"},{"location":"projects/ViGEm/#about-vigem","text":"Work in progress","title":"About ViGEm"},{"location":"projects/ViGEm/How-to-Install/","text":"How to Install/Remove There is no GUI ViGEmBus is a low-level emulator library (framework) for USB game controllers, it doesn't have a user interface. You need software building upon ViGEmBus to make things happen \ud83d\ude09 If you don't know what that means, you're in the wrong place and most probably shouldn't install it \ud83d\ude18 Installation Download the latest setup of ViGEmBus matching your system architecture . It's a file named ViGEmBusSetup_xXX.msi Run the setup and follow the instructions Congratulations! That was it, ViGEmBus is now ready to use. In case you are experiencing issues, have a look at the troubleshooting section . Updating Updating simply involves downloading the latest setup and following the exact same steps. Removal This depends on the software you use Some programs \"bundle\" ViGEmBus with it (e.g. silently install a copy on their own), either with or without the users consent. THis method is out of our reach; please contact the distributor of said software, we can't aid in this case. Apps and Features method The usual way consists in using its built-in uninstaller: Open Windows 10's Apps and Features by pressing Win + X and selecting it from the menu Use the search box in the center to look for Emulation or Nefarius Click on Nefarius Nefarius Gamepad Emulation Bus Driver and select Uninstall Follow the uninstaller's instructions Done. If you get prompted to reboot, do so and that's it! .msi installer method This method is useful when the ViGEmBus entry doesn't appear in the Windows' Apps lists at Apps and Features : Just follow the same steps of the installation section , but choose the remove when it appears Done. If you get prompted to reboot, do so and that's it! That should do the trick. If you want to be absolutely sure that there are no traces left of the ViGEmBus on your system, have a look at the troubleshooting section Troubleshooting Section based on the latest version! The whole troubleshooting section is based on top of the latest version of ViGEmBus . If you are using or trying to install an older version, then your experience will greatly differ and following this section may actually cause more issues. Use common sense \ud83d\ude42 General health checks The ViGEmBus has no user interface, but don't worry, it's easy to verify if everything is working as expected when you know where to look: Open Device Manager by pressing Win + X and selecting it from the menu: Click on the View tab at the top and change the view type to Devices by connection Look for entries named Nefarius Virtual Gamepad Emulation Bus or Virtual Gamepad Emulation Bus If more than one entry appears, you might have multiple version of ViGEmBus installed which may cause conflicts. Follow the full clean section . If you have only one entry and it is the one starting with Nefarius then continue following this section: Right click on the Nefarius Virtual Gamepad Emulation Bus then select Properties At the General tab, its status should be working properly At the Driver tab the Driver Version should match the latest version you downloaded and installed If everything matches the instructions, then things should work as expected. A special case is when the user has a laptop from the HP Omen Gaming line. If this is your case, have a look at the ViGEm issues in HP Omen laptops section . ViGEmBus issues in HP Omen laptops HP's line of Omen gaming Laptops/Desktops come pre-installed with a modified (forked) version of the ViGEmBus driver (from 2018). Apps trying to locate the latest ViGEmBus may end up detecting the modified HP driver instead, causing all sorts of issue since it is based on an outdated version. If this is your situation, follow the guide outlined here . Purging every trace of ViGEmBus If you are facing issues and/or have multiple ViGEmBus entries in your Device Manager it's best to remove every trace of it from your system to start clean again: First, follow the removal section to uninstall ViGEmBus via the normal way so we can tackle things in order After uninstalling ViGEmBus by using its uninstaller, reboot your computer Open Device Manager by pressing Win + X and selecting it from the menu Click on the View tab at the top and select Devices by connection For each entry that exists with the name of Nefarius Virtual Gamepad Emulation Bus or Virtual Gamepad Emulation Bus , right click on them and select Uninstall then give confirmation when asked to Having no ViGEmBus entries left at the Device Manager does not mean your system is fully rid of it, so let's continue: Download and open the Driver Store Explorer On its interface, click at the INF bar at the top left side so the list gets ordered by name Scroll to the V letter section and mark every entry of vigembus.inf . BE CAREFUL TO NOT MARK ANYTHING ELSE! After that, on the right side, mark the Force Deletion checkbox and then click on Delete Driver Reboot your computer Verify again on the Driver Store Explorer if there are no entries left of vigembus.inf and if there are no entries left of (Nefarius) Virtual Gamepad Emulation Bus on the Device Manager. If there are, repeat this section And done, no ViGEmBus left anywhere! Now it's safe to try re-installing the latest version according to the installation section . Other issues This guide should cover all known issues regarding the ViGEmBus setup, so give it a good read. If you are facing another issue that is not covered here, feel free to reach us through the proper means .","title":"How to Install/Remove"},{"location":"projects/ViGEm/How-to-Install/#how-to-installremove","text":"There is no GUI ViGEmBus is a low-level emulator library (framework) for USB game controllers, it doesn't have a user interface. You need software building upon ViGEmBus to make things happen \ud83d\ude09 If you don't know what that means, you're in the wrong place and most probably shouldn't install it \ud83d\ude18","title":"How to Install/Remove"},{"location":"projects/ViGEm/How-to-Install/#installation","text":"Download the latest setup of ViGEmBus matching your system architecture . It's a file named ViGEmBusSetup_xXX.msi Run the setup and follow the instructions Congratulations! That was it, ViGEmBus is now ready to use. In case you are experiencing issues, have a look at the troubleshooting section .","title":"Installation"},{"location":"projects/ViGEm/How-to-Install/#updating","text":"Updating simply involves downloading the latest setup and following the exact same steps.","title":"Updating"},{"location":"projects/ViGEm/How-to-Install/#removal","text":"This depends on the software you use Some programs \"bundle\" ViGEmBus with it (e.g. silently install a copy on their own), either with or without the users consent. THis method is out of our reach; please contact the distributor of said software, we can't aid in this case.","title":"Removal"},{"location":"projects/ViGEm/How-to-Install/#apps-and-features-method","text":"The usual way consists in using its built-in uninstaller: Open Windows 10's Apps and Features by pressing Win + X and selecting it from the menu Use the search box in the center to look for Emulation or Nefarius Click on Nefarius Nefarius Gamepad Emulation Bus Driver and select Uninstall Follow the uninstaller's instructions Done. If you get prompted to reboot, do so and that's it!","title":"Apps and Features method"},{"location":"projects/ViGEm/How-to-Install/#msi-installer-method","text":"This method is useful when the ViGEmBus entry doesn't appear in the Windows' Apps lists at Apps and Features : Just follow the same steps of the installation section , but choose the remove when it appears Done. If you get prompted to reboot, do so and that's it! That should do the trick. If you want to be absolutely sure that there are no traces left of the ViGEmBus on your system, have a look at the troubleshooting section","title":".msi installer method"},{"location":"projects/ViGEm/How-to-Install/#troubleshooting","text":"Section based on the latest version! The whole troubleshooting section is based on top of the latest version of ViGEmBus . If you are using or trying to install an older version, then your experience will greatly differ and following this section may actually cause more issues. Use common sense \ud83d\ude42","title":"Troubleshooting"},{"location":"projects/ViGEm/How-to-Install/#general-health-checks","text":"The ViGEmBus has no user interface, but don't worry, it's easy to verify if everything is working as expected when you know where to look: Open Device Manager by pressing Win + X and selecting it from the menu: Click on the View tab at the top and change the view type to Devices by connection Look for entries named Nefarius Virtual Gamepad Emulation Bus or Virtual Gamepad Emulation Bus If more than one entry appears, you might have multiple version of ViGEmBus installed which may cause conflicts. Follow the full clean section . If you have only one entry and it is the one starting with Nefarius then continue following this section: Right click on the Nefarius Virtual Gamepad Emulation Bus then select Properties At the General tab, its status should be working properly At the Driver tab the Driver Version should match the latest version you downloaded and installed If everything matches the instructions, then things should work as expected. A special case is when the user has a laptop from the HP Omen Gaming line. If this is your case, have a look at the ViGEm issues in HP Omen laptops section .","title":"General health checks"},{"location":"projects/ViGEm/How-to-Install/#vigembus-issues-in-hp-omen-laptops","text":"HP's line of Omen gaming Laptops/Desktops come pre-installed with a modified (forked) version of the ViGEmBus driver (from 2018). Apps trying to locate the latest ViGEmBus may end up detecting the modified HP driver instead, causing all sorts of issue since it is based on an outdated version. If this is your situation, follow the guide outlined here .","title":"ViGEmBus issues in HP Omen laptops"},{"location":"projects/ViGEm/How-to-Install/#purging-every-trace-of-vigembus","text":"If you are facing issues and/or have multiple ViGEmBus entries in your Device Manager it's best to remove every trace of it from your system to start clean again: First, follow the removal section to uninstall ViGEmBus via the normal way so we can tackle things in order After uninstalling ViGEmBus by using its uninstaller, reboot your computer Open Device Manager by pressing Win + X and selecting it from the menu Click on the View tab at the top and select Devices by connection For each entry that exists with the name of Nefarius Virtual Gamepad Emulation Bus or Virtual Gamepad Emulation Bus , right click on them and select Uninstall then give confirmation when asked to Having no ViGEmBus entries left at the Device Manager does not mean your system is fully rid of it, so let's continue: Download and open the Driver Store Explorer On its interface, click at the INF bar at the top left side so the list gets ordered by name Scroll to the V letter section and mark every entry of vigembus.inf . BE CAREFUL TO NOT MARK ANYTHING ELSE! After that, on the right side, mark the Force Deletion checkbox and then click on Delete Driver Reboot your computer Verify again on the Driver Store Explorer if there are no entries left of vigembus.inf and if there are no entries left of (Nefarius) Virtual Gamepad Emulation Bus on the Device Manager. If there are, repeat this section And done, no ViGEmBus left anywhere! Now it's safe to try re-installing the latest version according to the installation section .","title":"Purging every trace of ViGEmBus"},{"location":"projects/ViGEm/How-to-Install/#other-issues","text":"This guide should cover all known issues regarding the ViGEmBus setup, so give it a good read. If you are facing another issue that is not covered here, feel free to reach us through the proper means .","title":"Other issues"},{"location":"projects/WireShock/","text":"About WireShock WireShock was a kernel-mode USB driver providing a custom Bluetooth stack for USB Bluetooth dongles to support Sony PlayStation 3 Controllers on Windows. It was in development from May 2018 to October 2018 until it got archived in favour of better solutions. Its direct successor is BthPS3. The driver is a C-port of the C# implementation used in ScpToolkit and therefore \"occupies\" an entire Bluetooth dongle (radio) to function, making it impossible to use with conventional Bluetooth device (headphones, mice, ...) until uninstalled. It is not advised to use WireShock due to missing support and potentially remaining issues in design and code. No stable or pre-release binaries have ever been released or signed.","title":"About WireShock"},{"location":"projects/WireShock/#about-wireshock","text":"WireShock was a kernel-mode USB driver providing a custom Bluetooth stack for USB Bluetooth dongles to support Sony PlayStation 3 Controllers on Windows. It was in development from May 2018 to October 2018 until it got archived in favour of better solutions. Its direct successor is BthPS3. The driver is a C-port of the C# implementation used in ScpToolkit and therefore \"occupies\" an entire Bluetooth dongle (radio) to function, making it impossible to use with conventional Bluetooth device (headphones, mice, ...) until uninstalled. It is not advised to use WireShock due to missing support and potentially remaining issues in design and code. No stable or pre-release binaries have ever been released or signed.","title":"About WireShock"},{"location":"research/","text":"Research area Hello! \ud83d\udc4b This is a general-purpose section where mixed content ends up that doesn't really fall into a specific category. Think of it as a very chaotic wiki/knowledge-base for stuff you probably never need \ud83d\ude01","title":"Research area"},{"location":"research/#research-area","text":"Hello! \ud83d\udc4b This is a general-purpose section where mixed content ends up that doesn't really fall into a specific category. Think of it as a very chaotic wiki/knowledge-base for stuff you probably never need \ud83d\ude01","title":"Research area"},{"location":"research/CORSAIR-GLAIVE-RGB-native-HID-Report-Descriptor/","text":"CORSAIR GLAIVE RGB native HID Report Descriptor Byte array 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x02 , // Usage (Mouse) 0xA1 , 0x01 , // Collection (Application) 0x85 , 0x01 , // Report ID (1) 0x09 , 0x01 , // Usage (Pointer) 0xA1 , 0x00 , // Collection (Physical) 0x05 , 0x09 , // Usage Page (Button) 0x19 , 0x01 , // Usage Minimum (0x01) 0x29 , 0x20 , // Usage Maximum (0x20) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x95 , 0x20 , // Report Count (32) 0x75 , 0x01 , // Report Size (1) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x16 , 0x01 , 0x80 , // Logical Minimum (-32767) 0x26 , 0xFF , 0x7F , // Logical Maximum (32767) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x02 , // Report Count (2) 0x81 , 0x06 , // Input (Data,Var,Rel,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x38 , // Usage (Wheel) 0x15 , 0x81 , // Logical Minimum (-127) 0x25 , 0x7F , // Logical Maximum (127) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x81 , 0x06 , // Input (Data,Var,Rel,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0xC0 , // End Collection 0x05 , 0x0C , // Usage Page (Consumer) 0x09 , 0x01 , // Usage (Consumer Control) 0xA1 , 0x01 , // Collection (Application) 0x85 , 0x02 , // Report ID (2) 0x05 , 0x0C , // Usage Page (Consumer) 0x19 , 0x00 , // Usage Minimum (Unassigned) 0x2A , 0x3C , 0x02 , // Usage Maximum (AC Format) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x0F , // Logical Maximum (4095) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x02 , // Report Count (2) 0x81 , 0x00 , // Input (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0x06 , 0xC1 , 0xFF , // Usage Page (Vendor Defined 0xFFC1) 0x09 , 0x02 , // Usage (0x02) 0xA1 , 0x01 , // Collection (Application) 0x85 , 0x03 , // Report ID (3) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x09 , 0x02 , // Usage (0x02) 0x95 , 0x3F , // Report Count (63) 0x75 , 0x08 , // Report Size (8) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0x06 , 0xC2 , 0xFF , // Usage Page (Vendor Defined 0xFFC2) 0x09 , 0x03 , // Usage (0x03) 0xA1 , 0x01 , // Collection (Application) 0x85 , 0x0E , // Report ID (14) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x95 , 0x3F , // Report Count (63) 0x75 , 0x08 , // Report Size (8) 0x09 , 0x03 , // Usage (0x03) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x06 , // Usage (Keyboard) 0xA1 , 0x01 , // Collection (Application) 0x85 , 0x10 , // Report ID (16) 0x05 , 0x07 , // Usage Page (Kbrd/Keypad) 0x19 , 0xE0 , // Usage Minimum (0xE0) 0x29 , 0xE7 , // Usage Maximum (0xE7) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x08 , // Report Count (8) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x19 , 0x00 , // Usage Minimum (0x00) 0x29 , 0x97 , // Usage Maximum (0x97) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x98 , // Report Count (-104) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection // 172 bytes","title":"CORSAIR GLAIVE RGB native HID Report Descriptor"},{"location":"research/CORSAIR-GLAIVE-RGB-native-HID-Report-Descriptor/#corsair-glaive-rgb-native-hid-report-descriptor","text":"Byte array 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x02 , // Usage (Mouse) 0xA1 , 0x01 , // Collection (Application) 0x85 , 0x01 , // Report ID (1) 0x09 , 0x01 , // Usage (Pointer) 0xA1 , 0x00 , // Collection (Physical) 0x05 , 0x09 , // Usage Page (Button) 0x19 , 0x01 , // Usage Minimum (0x01) 0x29 , 0x20 , // Usage Maximum (0x20) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x95 , 0x20 , // Report Count (32) 0x75 , 0x01 , // Report Size (1) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x16 , 0x01 , 0x80 , // Logical Minimum (-32767) 0x26 , 0xFF , 0x7F , // Logical Maximum (32767) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x02 , // Report Count (2) 0x81 , 0x06 , // Input (Data,Var,Rel,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x38 , // Usage (Wheel) 0x15 , 0x81 , // Logical Minimum (-127) 0x25 , 0x7F , // Logical Maximum (127) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x81 , 0x06 , // Input (Data,Var,Rel,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0xC0 , // End Collection 0x05 , 0x0C , // Usage Page (Consumer) 0x09 , 0x01 , // Usage (Consumer Control) 0xA1 , 0x01 , // Collection (Application) 0x85 , 0x02 , // Report ID (2) 0x05 , 0x0C , // Usage Page (Consumer) 0x19 , 0x00 , // Usage Minimum (Unassigned) 0x2A , 0x3C , 0x02 , // Usage Maximum (AC Format) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x0F , // Logical Maximum (4095) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x02 , // Report Count (2) 0x81 , 0x00 , // Input (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0x06 , 0xC1 , 0xFF , // Usage Page (Vendor Defined 0xFFC1) 0x09 , 0x02 , // Usage (0x02) 0xA1 , 0x01 , // Collection (Application) 0x85 , 0x03 , // Report ID (3) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x09 , 0x02 , // Usage (0x02) 0x95 , 0x3F , // Report Count (63) 0x75 , 0x08 , // Report Size (8) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0x06 , 0xC2 , 0xFF , // Usage Page (Vendor Defined 0xFFC2) 0x09 , 0x03 , // Usage (0x03) 0xA1 , 0x01 , // Collection (Application) 0x85 , 0x0E , // Report ID (14) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x95 , 0x3F , // Report Count (63) 0x75 , 0x08 , // Report Size (8) 0x09 , 0x03 , // Usage (0x03) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x06 , // Usage (Keyboard) 0xA1 , 0x01 , // Collection (Application) 0x85 , 0x10 , // Report ID (16) 0x05 , 0x07 , // Usage Page (Kbrd/Keypad) 0x19 , 0xE0 , // Usage Minimum (0xE0) 0x29 , 0xE7 , // Usage Maximum (0xE7) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x08 , // Report Count (8) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x19 , 0x00 , // Usage Minimum (0x00) 0x29 , 0x97 , // Usage Maximum (0x97) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x98 , // Report Count (-104) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection // 172 bytes","title":"CORSAIR GLAIVE RGB native HID Report Descriptor"},{"location":"research/How-to-check-architecture/","text":"How to check which architecture I'm running Press the key combination Win + R enter msinfo32 in the upcoming box and hit enter. Check out the System Type item: X64-based means you need the 64-Bit (x64) variants of a driver, X86-based means 32-Bit (x86) is applicable. You can not mix these up, it will result in all sorts of errors.","title":"How to check which architecture I'm running"},{"location":"research/How-to-check-architecture/#how-to-check-which-architecture-im-running","text":"Press the key combination Win + R enter msinfo32 in the upcoming box and hit enter. Check out the System Type item: X64-based means you need the 64-Bit (x64) variants of a driver, X86-based means 32-Bit (x86) is applicable. You can not mix these up, it will result in all sorts of errors.","title":"How to check which architecture I'm running"},{"location":"research/SIXAXIS-native-HID-Report-Descriptor/","text":"SIXAXIS/DualShock 3 native HID Report Descriptor A.k.a. the broken one that's in the firmware Byte array 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x04 , // Usage (Joystick) 0xA1 , 0x01 , // Collection (Physical) 0xA1 , 0x02 , // Collection (Application) 0x85 , 0x01 , // Report ID (1) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) // NOTE: reserved byte 0x75 , 0x01 , // Report Size (1) 0x95 , 0x13 , // Report Count (19) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0x05 , 0x09 , // Usage Page (Button) 0x19 , 0x01 , // Usage Minimum (0x01) 0x29 , 0x13 , // Usage Maximum (0x13) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x0D , // Report Count (13) 0x06 , 0x00 , 0xFF , // Usage Page (Vendor Defined 0xFF00) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) // NOTE: 32 bit integer, where 0:18 are buttons and 19:31 are reserved 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x01 , // Usage (Pointer) 0xA1 , 0x00 , // Collection (Undefined) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x04 , // Report Count (4) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x09 , 0x32 , // Usage (Z) 0x09 , 0x35 , // Usage (Rz) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) // NOTE: four joysticks 0xC0 , // End Collection 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x27 , // Report Count (39) 0x09 , 0x01 , // Usage (Pointer) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xA1 , 0x02 , // Collection (Application) 0x85 , 0x02 , // Report ID (2) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xA1 , 0x02 , // Collection (Application) 0x85 , 0xEE , // Report ID (238) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xA1 , 0x02 , // Collection (Application) 0x85 , 0xEF , // Report ID (239) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xC0 , // End Collection // 148 bytes Source SIXAXIS.SYS HID Report Descriptor #1 Byte array 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x04 , // Usage (Joystick) 0xA1 , 0x01 , // Collection (Application) 0x09 , 0x01 , // Usage (Pointer) 0xA1 , 0x00 , // Collection (Physical) 0x05 , 0x09 , // Usage Page (Button) 0x19 , 0x01 , // Usage Minimum (0x01) 0x29 , 0x18 , // Usage Maximum (0x18) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x18 , // Report Count (24) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x39 , // Usage (Hat switch) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x07 , // Logical Maximum (7) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0x3B , 0x01 , // Physical Maximum (315) 0x65 , 0x14 , // Unit (System: English Rotation, Length: Centimeter) 0x75 , 0x04 , // Report Size (4) 0x95 , 0x01 , // Report Count (1) 0x81 , 0x42 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,Null State) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x04 , // Report Count (4) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x09 , 0x32 , // Usage (Z) 0x09 , 0x35 , // Usage (Rz) 0x09 , 0x36 , // Usage (Slider) 0x09 , 0x36 , // Usage (Slider) 0x09 , 0x33 , // Usage (Rx) 0x09 , 0x34 , // Usage (Ry) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x08 , // Report Count (8) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x06 , 0x00 , 0xFF , // Usage Page (Vendor Defined 0xFF00) 0x09 , 0x01 , // Usage (0x01) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x06 , 0x00 , 0xFF , // Usage Page (Vendor Defined 0xFF00) 0x09 , 0x01 , // Usage (0x01) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x31 , // Report Count (49) 0xB1 , 0x00 , // Feature (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xC0 , // End Collection // 120 bytes HID Report Descriptor #2 Byte array 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x04 , // Usage (Joystick) 0xA1 , 0x01 , // Collection (Application) 0x09 , 0x01 , // Usage (Pointer) 0xA1 , 0x00 , // Collection (Physical) 0x05 , 0x09 , // Usage Page (Button) 0x19 , 0x01 , // Usage Minimum (0x01) 0x29 , 0x0D , // Usage Maximum (0x0D) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x0D , // Report Count (13) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x03 , // Report Count (3) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x39 , // Usage (Hat switch) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x07 , // Logical Maximum (7) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0x3B , 0x01 , // Physical Maximum (315) 0x65 , 0x14 , // Unit (System: English Rotation, Length: Centimeter) 0x75 , 0x04 , // Report Size (4) 0x95 , 0x01 , // Report Count (1) 0x81 , 0x42 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,Null State) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x04 , // Report Count (4) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x09 , 0x32 , // Usage (Z) 0x09 , 0x35 , // Usage (Rz) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x66 , 0x00 , 0x00 , // Unit (None) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x04 , // Report Count (4) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x36 , // Usage (Slider) 0x09 , 0x36 , // Usage (Slider) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x02 , // Report Count (2) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x06 , 0x00 , 0xFF , // Usage Page (Vendor Defined 0xFF00) 0x09 , 0x01 , // Usage (0x01) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x06 , 0x00 , 0xFF , // Usage Page (Vendor Defined 0xFF00) 0x09 , 0x01 , // Usage (0x01) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x31 , // Report Count (49) 0xB1 , 0x00 , // Feature (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xC0 , // End Collection // 141 bytes PS3 Move Navigation Controller native HID Report Descriptor A.k.a. the broken one that's in the firmware Byte array 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x04 , // Usage (Joystick) 0xA1 , 0x01 , // Collection (Application) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x01 , // Report ID (1) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x13 , // Report Count (19) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0x05 , 0x09 , // Usage Page (Button) 0x19 , 0x01 , // Usage Minimum (0x01) 0x29 , 0x13 , // Usage Maximum (0x13) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x0D , // Report Count (13) 0x06 , 0x00 , 0xFF , // Usage Page (Vendor Defined 0xFF00) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x01 , // Usage (Pointer) 0xA1 , 0x00 , // Collection (Physical) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x04 , // Report Count (4) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x09 , 0x32 , // Usage (Z) 0x09 , 0x35 , // Usage (Rz) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x27 , // Report Count (39) 0x09 , 0x01 , // Usage (Pointer) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x02 , // Report ID (2) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0xEE , // Report ID (-18) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0xEF , // Report ID (-17) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xC0 , // End Collection // 148 bytes Captured with USBPcap . Beautified with USB Descriptor and Request Parser .","title":"SIXAXIS/DualShock 3 native HID Report Descriptor"},{"location":"research/SIXAXIS-native-HID-Report-Descriptor/#sixaxisdualshock-3-native-hid-report-descriptor","text":"A.k.a. the broken one that's in the firmware Byte array 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x04 , // Usage (Joystick) 0xA1 , 0x01 , // Collection (Physical) 0xA1 , 0x02 , // Collection (Application) 0x85 , 0x01 , // Report ID (1) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) // NOTE: reserved byte 0x75 , 0x01 , // Report Size (1) 0x95 , 0x13 , // Report Count (19) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0x05 , 0x09 , // Usage Page (Button) 0x19 , 0x01 , // Usage Minimum (0x01) 0x29 , 0x13 , // Usage Maximum (0x13) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x0D , // Report Count (13) 0x06 , 0x00 , 0xFF , // Usage Page (Vendor Defined 0xFF00) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) // NOTE: 32 bit integer, where 0:18 are buttons and 19:31 are reserved 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x01 , // Usage (Pointer) 0xA1 , 0x00 , // Collection (Undefined) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x04 , // Report Count (4) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x09 , 0x32 , // Usage (Z) 0x09 , 0x35 , // Usage (Rz) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) // NOTE: four joysticks 0xC0 , // End Collection 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x27 , // Report Count (39) 0x09 , 0x01 , // Usage (Pointer) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xA1 , 0x02 , // Collection (Application) 0x85 , 0x02 , // Report ID (2) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xA1 , 0x02 , // Collection (Application) 0x85 , 0xEE , // Report ID (238) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xA1 , 0x02 , // Collection (Application) 0x85 , 0xEF , // Report ID (239) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xC0 , // End Collection // 148 bytes Source","title":"SIXAXIS/DualShock 3 native HID Report Descriptor"},{"location":"research/SIXAXIS-native-HID-Report-Descriptor/#sixaxissys","text":"","title":"SIXAXIS.SYS"},{"location":"research/SIXAXIS-native-HID-Report-Descriptor/#hid-report-descriptor-1","text":"Byte array 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x04 , // Usage (Joystick) 0xA1 , 0x01 , // Collection (Application) 0x09 , 0x01 , // Usage (Pointer) 0xA1 , 0x00 , // Collection (Physical) 0x05 , 0x09 , // Usage Page (Button) 0x19 , 0x01 , // Usage Minimum (0x01) 0x29 , 0x18 , // Usage Maximum (0x18) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x18 , // Report Count (24) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x39 , // Usage (Hat switch) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x07 , // Logical Maximum (7) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0x3B , 0x01 , // Physical Maximum (315) 0x65 , 0x14 , // Unit (System: English Rotation, Length: Centimeter) 0x75 , 0x04 , // Report Size (4) 0x95 , 0x01 , // Report Count (1) 0x81 , 0x42 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,Null State) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x04 , // Report Count (4) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x09 , 0x32 , // Usage (Z) 0x09 , 0x35 , // Usage (Rz) 0x09 , 0x36 , // Usage (Slider) 0x09 , 0x36 , // Usage (Slider) 0x09 , 0x33 , // Usage (Rx) 0x09 , 0x34 , // Usage (Ry) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x08 , // Report Count (8) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x06 , 0x00 , 0xFF , // Usage Page (Vendor Defined 0xFF00) 0x09 , 0x01 , // Usage (0x01) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x06 , 0x00 , 0xFF , // Usage Page (Vendor Defined 0xFF00) 0x09 , 0x01 , // Usage (0x01) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x31 , // Report Count (49) 0xB1 , 0x00 , // Feature (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xC0 , // End Collection // 120 bytes","title":"HID Report Descriptor #1"},{"location":"research/SIXAXIS-native-HID-Report-Descriptor/#hid-report-descriptor-2","text":"Byte array 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x04 , // Usage (Joystick) 0xA1 , 0x01 , // Collection (Application) 0x09 , 0x01 , // Usage (Pointer) 0xA1 , 0x00 , // Collection (Physical) 0x05 , 0x09 , // Usage Page (Button) 0x19 , 0x01 , // Usage Minimum (0x01) 0x29 , 0x0D , // Usage Maximum (0x0D) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x0D , // Report Count (13) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x03 , // Report Count (3) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x39 , // Usage (Hat switch) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x07 , // Logical Maximum (7) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0x3B , 0x01 , // Physical Maximum (315) 0x65 , 0x14 , // Unit (System: English Rotation, Length: Centimeter) 0x75 , 0x04 , // Report Size (4) 0x95 , 0x01 , // Report Count (1) 0x81 , 0x42 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,Null State) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x04 , // Report Count (4) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x09 , 0x32 , // Usage (Z) 0x09 , 0x35 , // Usage (Rz) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x66 , 0x00 , 0x00 , // Unit (None) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x04 , // Report Count (4) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x36 , // Usage (Slider) 0x09 , 0x36 , // Usage (Slider) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x02 , // Report Count (2) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x06 , 0x00 , 0xFF , // Usage Page (Vendor Defined 0xFF00) 0x09 , 0x01 , // Usage (0x01) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x06 , 0x00 , 0xFF , // Usage Page (Vendor Defined 0xFF00) 0x09 , 0x01 , // Usage (0x01) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x31 , // Report Count (49) 0xB1 , 0x00 , // Feature (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xC0 , // End Collection // 141 bytes","title":"HID Report Descriptor #2"},{"location":"research/SIXAXIS-native-HID-Report-Descriptor/#ps3-move-navigation-controller-native-hid-report-descriptor","text":"A.k.a. the broken one that's in the firmware Byte array 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x04 , // Usage (Joystick) 0xA1 , 0x01 , // Collection (Application) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x01 , // Report ID (1) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x13 , // Report Count (19) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0x05 , 0x09 , // Usage Page (Button) 0x19 , 0x01 , // Usage Minimum (0x01) 0x29 , 0x13 , // Usage Maximum (0x13) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x0D , // Report Count (13) 0x06 , 0x00 , 0xFF , // Usage Page (Vendor Defined 0xFF00) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x01 , // Usage (Pointer) 0xA1 , 0x00 , // Collection (Physical) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x04 , // Report Count (4) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x09 , 0x32 , // Usage (Z) 0x09 , 0x35 , // Usage (Rz) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x27 , // Report Count (39) 0x09 , 0x01 , // Usage (Pointer) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x02 , // Report ID (2) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0xEE , // Report ID (-18) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0xEF , // Report ID (-17) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x30 , // Report Count (48) 0x09 , 0x01 , // Usage (Pointer) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xC0 , // End Collection // 148 bytes Captured with USBPcap . Beautified with USB Descriptor and Request Parser .","title":"PS3 Move Navigation Controller native HID Report Descriptor"},{"location":"research/vJoy-HID-Report-Descriptor/","text":"vJoy HID Report Descriptor Just a dump of the full descriptor for future reference. Taken from the binaries of the last official commit and sniffed from the compiled binary. Byte array 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x15 , 0x00 , // Logical Minimum (0) 0x09 , 0x04 , // Usage (Joystick) 0xA1 , 0x01 , // Collection (Application) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x85 , 0x01 , // Report ID (1) 0x09 , 0x01 , // Usage (Pointer) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x7F , // Logical Maximum (32767) 0x75 , 0x20 , // Report Size (32) 0x95 , 0x01 , // Report Count (1) 0xA1 , 0x00 , // Collection (Physical) 0x09 , 0x30 , // Usage (X) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x31 , // Usage (Y) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x32 , // Usage (Z) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x33 , // Usage (Rx) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x34 , // Usage (Ry) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x35 , // Usage (Rz) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x36 , // Usage (Slider) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x37 , // Usage (Dial) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0x75 , 0x20 , // Report Size (32) 0x95 , 0x04 , // Report Count (4) 0x81 , 0x01 , // Input (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x09 , // Usage Page (Button) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x55 , 0x00 , // Unit Exponent (0) 0x65 , 0x00 , // Unit (None) 0x19 , 0x00 , // Usage Minimum (0x00) 0x29 , 0x00 , // Usage Maximum (0x00) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x00 , // Report Count (0) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x80 , // Report Size (-128) 0x95 , 0x01 , // Report Count (1) 0x81 , 0x01 , // Input (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x0F , // Usage Page (PID Page) 0x09 , 0x92 , // Usage (0x92) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x12 , // Report ID (18) 0x09 , 0x9F , // Usage (0x9F) 0x09 , 0xA0 , // Usage (0xA0) 0x09 , 0xA4 , // Usage (0xA4) 0x09 , 0xA5 , // Usage (0xA5) 0x09 , 0xA6 , // Usage (0xA6) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x05 , // Report Count (5) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x95 , 0x03 , // Report Count (3) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x94 , // Usage (0x94) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x01 , // Report Count (1) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x07 , // Report Size (7) 0x95 , 0x01 , // Report Count (1) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0x09 , 0x21 , // Usage (0x21) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x11 , // Report ID (17) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x25 , // Usage (0x25) 0xA1 , 0x02 , // Collection (Logical) 0x09 , 0x26 , // Usage (0x26) 0x09 , 0x27 , // Usage (0x27) 0x09 , 0x30 , // Usage (0x30) 0x09 , 0x31 , // Usage (0x31) 0x09 , 0x32 , // Usage (0x32) 0x09 , 0x33 , // Usage (0x33) 0x09 , 0x34 , // Usage (0x34) 0x09 , 0x40 , // Usage (0x40) 0x09 , 0x41 , // Usage (0x41) 0x09 , 0x42 , // Usage (0x42) 0x09 , 0x43 , // Usage (0x43) 0x09 , 0x29 , // Usage (0x29) 0x25 , 0x0C , // Logical Maximum (12) 0x15 , 0x01 , // Logical Minimum (1) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x0C , // Physical Maximum (12) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x00 , // Output (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x50 , // Usage (0x50) 0x09 , 0x54 , // Usage (0x54) 0x09 , 0x51 , // Usage (0x51) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x7F , // Logical Maximum (32767) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x7F , // Physical Maximum (32767) 0x66 , 0x03 , 0x10 , // Unit (System: English Linear, Time: Seconds) 0x55 , 0xFD , // Unit Exponent 0x75 , 0x10 , // Report Size (16) 0x95 , 0x03 , // Report Count (3) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x55 , 0x00 , // Unit Exponent (0) 0x66 , 0x00 , 0x00 , // Unit (None) 0x09 , 0x52 , // Usage (0x52) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x53 , // Usage (0x53) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x08 , // Logical Maximum (8) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x08 , // Physical Maximum (8) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x55 , // Usage (0x55) 0xA1 , 0x02 , // Collection (Logical) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x05 , 0x0F , // Usage Page (PID Page) 0x09 , 0x56 , // Usage (0x56) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x95 , 0x05 , // Report Count (5) 0x91 , 0x03 , // Output (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x57 , // Usage (0x57) 0xA1 , 0x02 , // Collection (Logical) 0x0B , 0x01 , 0x00 , 0x0A , 0x00 , // Usage (0x0A0001) 0x0B , 0x02 , 0x00 , 0x0A , 0x00 , // Usage (0x0A0002) 0x66 , 0x14 , 0x00 , // Unit (System: English Rotation, Length: Centimeter) 0x55 , 0xFE , // Unit Exponent 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x47 , 0xA0 , 0x8C , 0x00 , 0x00 , // Physical Maximum (35999) 0x66 , 0x00 , 0x00 , // Unit (None) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x55 , 0x00 , // Unit Exponent (0) 0x66 , 0x00 , 0x00 , // Unit (None) 0xC0 , // End Collection 0x05 , 0x0F , // Usage Page (PID Page) 0x09 , 0x58 , // Usage (0x58) 0xA1 , 0x02 , // Collection (Logical) 0x0B , 0x01 , 0x00 , 0x0A , 0x00 , // Usage (0x0A0001) 0x0B , 0x02 , 0x00 , 0x0A , 0x00 , // Usage (0x0A0002) 0x26 , 0xFD , 0x7F , // Logical Maximum (32765) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xC0 , // End Collection 0x09 , 0x5A , // Usage (0x5A) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x12 , // Report ID (18) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x5B , // Usage (0x5B) 0x09 , 0x5D , // Usage (0x5D) 0x16 , 0x00 , 0x00 , // Logical Minimum (0) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0x00 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x5C , // Usage (0x5C) 0x09 , 0x5E , // Usage (0x5E) 0x66 , 0x03 , 0x10 , // Unit (System: English Linear, Time: Seconds) 0x55 , 0xFD , // Unit Exponent 0x27 , 0xFF , 0x7F , 0x00 , 0x00 , // Logical Maximum (32766) 0x47 , 0xFF , 0x7F , 0x00 , 0x00 , // Physical Maximum (32766) 0x75 , 0x20 , // Report Size (32) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x45 , 0x00 , // Physical Maximum (0) 0x66 , 0x00 , 0x00 , // Unit (None) 0x55 , 0x00 , // Unit Exponent (0) 0xC0 , // End Collection 0x09 , 0x5F , // Usage (0x5F) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x13 , // Report ID (19) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x23 , // Usage (0x23) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x03 , // Logical Maximum (3) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x03 , // Physical Maximum (3) 0x75 , 0x04 , // Report Size (4) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x58 , // Usage (0x58) 0xA1 , 0x02 , // Collection (Logical) 0x0B , 0x01 , 0x00 , 0x0A , 0x00 , // Usage (0x0A0001) 0x0B , 0x02 , 0x00 , 0x0A , 0x00 , // Usage (0x0A0002) 0x75 , 0x02 , // Report Size (2) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x16 , 0xF0 , 0xD8 , // Logical Minimum (-10000) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0xF0 , 0xD8 , // Physical Minimum (-10000) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x09 , 0x60 , // Usage (0x60) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x36 , 0xF0 , 0xD8 , // Physical Minimum (-10000) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x09 , 0x61 , // Usage (0x61) 0x09 , 0x62 , // Usage (0x62) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x16 , 0x00 , 0x00 , // Logical Minimum (0) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0x00 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x09 , 0x63 , // Usage (0x63) 0x09 , 0x64 , // Usage (0x64) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x65 , // Usage (0x65) 0x16 , 0x00 , 0x00 , // Logical Minimum (0) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0x00 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x6E , // Usage (0x6E) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x14 , // Report ID (20) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x70 , // Usage (0x70) 0x16 , 0x00 , 0x00 , // Logical Minimum (0) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0x00 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x6F , // Usage (0x6F) 0x16 , 0xF0 , 0xD8 , // Logical Minimum (-10000) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0xF0 , 0xD8 , // Physical Minimum (-10000) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x95 , 0x01 , // Report Count (1) 0x75 , 0x10 , // Report Size (16) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x71 , // Usage (0x71) 0x66 , 0x14 , 0x00 , // Unit (System: English Rotation, Length: Centimeter) 0x55 , 0xFE , // Unit Exponent 0x15 , 0x00 , // Logical Minimum (0) 0x27 , 0x9F , 0x8C , 0x00 , 0x00 , // Logical Maximum (35998) 0x35 , 0x00 , // Physical Minimum (0) 0x47 , 0x9F , 0x8C , 0x00 , 0x00 , // Physical Maximum (35998) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x72 , // Usage (0x72) 0x15 , 0x00 , // Logical Minimum (0) 0x27 , 0xFF , 0x7F , 0x00 , 0x00 , // Logical Maximum (32766) 0x35 , 0x00 , // Physical Minimum (0) 0x47 , 0xFF , 0x7F , 0x00 , 0x00 , // Physical Maximum (32766) 0x66 , 0x03 , 0x10 , // Unit (System: English Linear, Time: Seconds) 0x55 , 0xFD , // Unit Exponent 0x75 , 0x20 , // Report Size (32) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x66 , 0x00 , 0x00 , // Unit (None) 0x55 , 0x00 , // Unit Exponent (0) 0xC0 , // End Collection 0x09 , 0x73 , // Usage (0x73) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x15 , // Report ID (21) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x70 , // Usage (0x70) 0x16 , 0xF0 , 0xD8 , // Logical Minimum (-10000) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0xF0 , 0xD8 , // Physical Minimum (-10000) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x74 , // Usage (0x74) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x16 , // Report ID (22) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x75 , // Usage (0x75) 0x09 , 0x76 , // Usage (0x76) 0x16 , 0xF0 , 0xD8 , // Logical Minimum (-10000) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0xF0 , 0xD8 , // Physical Minimum (-10000) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x68 , // Usage (0x68) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x17 , // Report ID (23) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x6C , // Usage (0x6C) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x69 , // Usage (0x69) 0x15 , 0x81 , // Logical Minimum (-127) 0x25 , 0x7F , // Logical Maximum (127) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x0C , // Report Count (12) 0x92 , 0x02 , 0x01 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile,Buffered Bytes) 0xC0 , // End Collection 0x09 , 0x66 , // Usage (0x66) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x18 , // Report ID (24) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x15 , 0x81 , // Logical Minimum (-127) 0x25 , 0x7F , // Logical Maximum (127) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x05 , 0x0F , // Usage Page (PID Page) 0x09 , 0x77 , // Usage (0x77) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x1A , // Report ID (26) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x78 , // Usage (0x78) 0xA1 , 0x02 , // Collection (Logical) 0x09 , 0x79 , // Usage (0x79) 0x09 , 0x7A , // Usage (0x7A) 0x09 , 0x7B , // Usage (0x7B) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x03 , // Logical Maximum (3) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x00 , // Output (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x7C , // Usage (0x7C) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x90 , // Usage (0x90) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x1B , // Report ID (27) 0x09 , 0x22 , // Usage (0x22) 0x25 , 0x28 , // Logical Maximum (40) 0x15 , 0x01 , // Logical Minimum (1) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x96 , // Usage (0x96) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x1C , // Report ID (28) 0x09 , 0x97 , // Usage (0x97) 0x09 , 0x98 , // Usage (0x98) 0x09 , 0x99 , // Usage (0x99) 0x09 , 0x9A , // Usage (0x9A) 0x09 , 0x9B , // Usage (0x9B) 0x09 , 0x9C , // Usage (0x9C) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x06 , // Logical Maximum (6) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x00 , // Output (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x7D , // Usage (0x7D) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x1D , // Report ID (29) 0x09 , 0x7E , // Usage (0x7E) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x6B , // Usage (0x6B) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x1E , // Report ID (30) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x6D , // Usage (0x6D) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x51 , // Usage (0x51) 0x66 , 0x03 , 0x10 , // Unit (System: English Linear, Time: Seconds) 0x55 , 0xFD , // Unit Exponent 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x7F , // Logical Maximum (32767) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x7F , // Physical Maximum (32767) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x55 , 0x00 , // Unit Exponent (0) 0x66 , 0x00 , 0x00 , // Unit (None) 0xC0 , // End Collection 0x09 , 0xAB , // Usage (0xAB) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x11 , // Report ID (17) 0x09 , 0x25 , // Usage (0x25) 0xA1 , 0x02 , // Collection (Logical) 0x09 , 0x26 , // Usage (0x26) 0x09 , 0x27 , // Usage (0x27) 0x09 , 0x30 , // Usage (0x30) 0x09 , 0x31 , // Usage (0x31) 0x09 , 0x32 , // Usage (0x32) 0x09 , 0x33 , // Usage (0x33) 0x09 , 0x34 , // Usage (0x34) 0x09 , 0x40 , // Usage (0x40) 0x09 , 0x41 , // Usage (0x41) 0x09 , 0x42 , // Usage (0x42) 0x09 , 0x43 , // Usage (0x43) 0x09 , 0x29 , // Usage (0x29) 0x25 , 0x0C , // Logical Maximum (12) 0x15 , 0x01 , // Logical Minimum (1) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x0C , // Physical Maximum (12) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x00 , // Feature (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x3B , // Usage (Byte Count) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x01 , // Logical Maximum (511) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x01 , // Physical Maximum (511) 0x75 , 0x0A , // Report Size (10) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x75 , 0x06 , // Report Size (6) 0xB1 , 0x01 , // Feature (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x05 , 0x0F , // Usage Page (PID Page) 0x09 , 0x89 , // Usage (0x89) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x12 , // Report ID (18) 0x09 , 0x22 , // Usage (0x22) 0x25 , 0x28 , // Logical Maximum (40) 0x15 , 0x01 , // Logical Minimum (1) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x8B , // Usage (0x8B) 0xA1 , 0x02 , // Collection (Logical) 0x09 , 0x8C , // Usage (0x8C) 0x09 , 0x8D , // Usage (0x8D) 0x09 , 0x8E , // Usage (0x8E) 0x25 , 0x03 , // Logical Maximum (3) 0x15 , 0x01 , // Logical Minimum (1) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x03 , // Physical Maximum (3) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x00 , // Feature (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0xAC , // Usage (0xAC) 0x15 , 0x00 , // Logical Minimum (0) 0x27 , 0xFF , 0xFF , 0x00 , 0x00 , // Logical Maximum (65534) 0x35 , 0x00 , // Physical Minimum (0) 0x47 , 0xFF , 0xFF , 0x00 , 0x00 , // Physical Maximum (65534) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x00 , // Feature (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x7F , // Usage (0x7F) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x13 , // Report ID (19) 0x09 , 0x80 , // Usage (0x80) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x15 , 0x00 , // Logical Minimum (0) 0x35 , 0x00 , // Physical Minimum (0) 0x27 , 0xFF , 0xFF , 0x00 , 0x00 , // Logical Maximum (65534) 0x47 , 0xFF , 0xFF , 0x00 , 0x00 , // Physical Maximum (65534) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x83 , // Usage (0x83) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0xA9 , // Usage (0xA9) 0x09 , 0xAA , // Usage (0xAA) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x02 , // Report Count (2) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x75 , 0x06 , // Report Size (6) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x03 , // Feature (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xC0 , // End Collection // 1322 bytes","title":"vJoy HID Report Descriptor"},{"location":"research/vJoy-HID-Report-Descriptor/#vjoy-hid-report-descriptor","text":"Just a dump of the full descriptor for future reference. Taken from the binaries of the last official commit and sniffed from the compiled binary. Byte array 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x15 , 0x00 , // Logical Minimum (0) 0x09 , 0x04 , // Usage (Joystick) 0xA1 , 0x01 , // Collection (Application) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x85 , 0x01 , // Report ID (1) 0x09 , 0x01 , // Usage (Pointer) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x7F , // Logical Maximum (32767) 0x75 , 0x20 , // Report Size (32) 0x95 , 0x01 , // Report Count (1) 0xA1 , 0x00 , // Collection (Physical) 0x09 , 0x30 , // Usage (X) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x31 , // Usage (Y) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x32 , // Usage (Z) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x33 , // Usage (Rx) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x34 , // Usage (Ry) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x35 , // Usage (Rz) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x36 , // Usage (Slider) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x37 , // Usage (Dial) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0x75 , 0x20 , // Report Size (32) 0x95 , 0x04 , // Report Count (4) 0x81 , 0x01 , // Input (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x09 , // Usage Page (Button) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x55 , 0x00 , // Unit Exponent (0) 0x65 , 0x00 , // Unit (None) 0x19 , 0x00 , // Usage Minimum (0x00) 0x29 , 0x00 , // Usage Maximum (0x00) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x00 , // Report Count (0) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x75 , 0x80 , // Report Size (-128) 0x95 , 0x01 , // Report Count (1) 0x81 , 0x01 , // Input (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x05 , 0x0F , // Usage Page (PID Page) 0x09 , 0x92 , // Usage (0x92) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x12 , // Report ID (18) 0x09 , 0x9F , // Usage (0x9F) 0x09 , 0xA0 , // Usage (0xA0) 0x09 , 0xA4 , // Usage (0xA4) 0x09 , 0xA5 , // Usage (0xA5) 0x09 , 0xA6 , // Usage (0xA6) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x05 , // Report Count (5) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x95 , 0x03 , // Report Count (3) 0x81 , 0x03 , // Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x94 , // Usage (0x94) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x01 , // Report Count (1) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x07 , // Report Size (7) 0x95 , 0x01 , // Report Count (1) 0x81 , 0x02 , // Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position) 0xC0 , // End Collection 0x09 , 0x21 , // Usage (0x21) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x11 , // Report ID (17) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x25 , // Usage (0x25) 0xA1 , 0x02 , // Collection (Logical) 0x09 , 0x26 , // Usage (0x26) 0x09 , 0x27 , // Usage (0x27) 0x09 , 0x30 , // Usage (0x30) 0x09 , 0x31 , // Usage (0x31) 0x09 , 0x32 , // Usage (0x32) 0x09 , 0x33 , // Usage (0x33) 0x09 , 0x34 , // Usage (0x34) 0x09 , 0x40 , // Usage (0x40) 0x09 , 0x41 , // Usage (0x41) 0x09 , 0x42 , // Usage (0x42) 0x09 , 0x43 , // Usage (0x43) 0x09 , 0x29 , // Usage (0x29) 0x25 , 0x0C , // Logical Maximum (12) 0x15 , 0x01 , // Logical Minimum (1) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x0C , // Physical Maximum (12) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x00 , // Output (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x50 , // Usage (0x50) 0x09 , 0x54 , // Usage (0x54) 0x09 , 0x51 , // Usage (0x51) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x7F , // Logical Maximum (32767) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x7F , // Physical Maximum (32767) 0x66 , 0x03 , 0x10 , // Unit (System: English Linear, Time: Seconds) 0x55 , 0xFD , // Unit Exponent 0x75 , 0x10 , // Report Size (16) 0x95 , 0x03 , // Report Count (3) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x55 , 0x00 , // Unit Exponent (0) 0x66 , 0x00 , 0x00 , // Unit (None) 0x09 , 0x52 , // Usage (0x52) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x53 , // Usage (0x53) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x08 , // Logical Maximum (8) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x08 , // Physical Maximum (8) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x55 , // Usage (0x55) 0xA1 , 0x02 , // Collection (Logical) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x05 , 0x0F , // Usage Page (PID Page) 0x09 , 0x56 , // Usage (0x56) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x95 , 0x05 , // Report Count (5) 0x91 , 0x03 , // Output (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x57 , // Usage (0x57) 0xA1 , 0x02 , // Collection (Logical) 0x0B , 0x01 , 0x00 , 0x0A , 0x00 , // Usage (0x0A0001) 0x0B , 0x02 , 0x00 , 0x0A , 0x00 , // Usage (0x0A0002) 0x66 , 0x14 , 0x00 , // Unit (System: English Rotation, Length: Centimeter) 0x55 , 0xFE , // Unit Exponent 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x47 , 0xA0 , 0x8C , 0x00 , 0x00 , // Physical Maximum (35999) 0x66 , 0x00 , 0x00 , // Unit (None) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x55 , 0x00 , // Unit Exponent (0) 0x66 , 0x00 , 0x00 , // Unit (None) 0xC0 , // End Collection 0x05 , 0x0F , // Usage Page (PID Page) 0x09 , 0x58 , // Usage (0x58) 0xA1 , 0x02 , // Collection (Logical) 0x0B , 0x01 , 0x00 , 0x0A , 0x00 , // Usage (0x0A0001) 0x0B , 0x02 , 0x00 , 0x0A , 0x00 , // Usage (0x0A0002) 0x26 , 0xFD , 0x7F , // Logical Maximum (32765) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xC0 , // End Collection 0x09 , 0x5A , // Usage (0x5A) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x12 , // Report ID (18) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x5B , // Usage (0x5B) 0x09 , 0x5D , // Usage (0x5D) 0x16 , 0x00 , 0x00 , // Logical Minimum (0) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0x00 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x5C , // Usage (0x5C) 0x09 , 0x5E , // Usage (0x5E) 0x66 , 0x03 , 0x10 , // Unit (System: English Linear, Time: Seconds) 0x55 , 0xFD , // Unit Exponent 0x27 , 0xFF , 0x7F , 0x00 , 0x00 , // Logical Maximum (32766) 0x47 , 0xFF , 0x7F , 0x00 , 0x00 , // Physical Maximum (32766) 0x75 , 0x20 , // Report Size (32) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x45 , 0x00 , // Physical Maximum (0) 0x66 , 0x00 , 0x00 , // Unit (None) 0x55 , 0x00 , // Unit Exponent (0) 0xC0 , // End Collection 0x09 , 0x5F , // Usage (0x5F) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x13 , // Report ID (19) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x23 , // Usage (0x23) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x03 , // Logical Maximum (3) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x03 , // Physical Maximum (3) 0x75 , 0x04 , // Report Size (4) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x58 , // Usage (0x58) 0xA1 , 0x02 , // Collection (Logical) 0x0B , 0x01 , 0x00 , 0x0A , 0x00 , // Usage (0x0A0001) 0x0B , 0x02 , 0x00 , 0x0A , 0x00 , // Usage (0x0A0002) 0x75 , 0x02 , // Report Size (2) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x16 , 0xF0 , 0xD8 , // Logical Minimum (-10000) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0xF0 , 0xD8 , // Physical Minimum (-10000) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x09 , 0x60 , // Usage (0x60) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x36 , 0xF0 , 0xD8 , // Physical Minimum (-10000) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x09 , 0x61 , // Usage (0x61) 0x09 , 0x62 , // Usage (0x62) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x16 , 0x00 , 0x00 , // Logical Minimum (0) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0x00 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x09 , 0x63 , // Usage (0x63) 0x09 , 0x64 , // Usage (0x64) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x65 , // Usage (0x65) 0x16 , 0x00 , 0x00 , // Logical Minimum (0) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0x00 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x6E , // Usage (0x6E) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x14 , // Report ID (20) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x70 , // Usage (0x70) 0x16 , 0x00 , 0x00 , // Logical Minimum (0) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0x00 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x6F , // Usage (0x6F) 0x16 , 0xF0 , 0xD8 , // Logical Minimum (-10000) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0xF0 , 0xD8 , // Physical Minimum (-10000) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x95 , 0x01 , // Report Count (1) 0x75 , 0x10 , // Report Size (16) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x71 , // Usage (0x71) 0x66 , 0x14 , 0x00 , // Unit (System: English Rotation, Length: Centimeter) 0x55 , 0xFE , // Unit Exponent 0x15 , 0x00 , // Logical Minimum (0) 0x27 , 0x9F , 0x8C , 0x00 , 0x00 , // Logical Maximum (35998) 0x35 , 0x00 , // Physical Minimum (0) 0x47 , 0x9F , 0x8C , 0x00 , 0x00 , // Physical Maximum (35998) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x72 , // Usage (0x72) 0x15 , 0x00 , // Logical Minimum (0) 0x27 , 0xFF , 0x7F , 0x00 , 0x00 , // Logical Maximum (32766) 0x35 , 0x00 , // Physical Minimum (0) 0x47 , 0xFF , 0x7F , 0x00 , 0x00 , // Physical Maximum (32766) 0x66 , 0x03 , 0x10 , // Unit (System: English Linear, Time: Seconds) 0x55 , 0xFD , // Unit Exponent 0x75 , 0x20 , // Report Size (32) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x66 , 0x00 , 0x00 , // Unit (None) 0x55 , 0x00 , // Unit Exponent (0) 0xC0 , // End Collection 0x09 , 0x73 , // Usage (0x73) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x15 , // Report ID (21) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x70 , // Usage (0x70) 0x16 , 0xF0 , 0xD8 , // Logical Minimum (-10000) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0xF0 , 0xD8 , // Physical Minimum (-10000) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x74 , // Usage (0x74) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x16 , // Report ID (22) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x75 , // Usage (0x75) 0x09 , 0x76 , // Usage (0x76) 0x16 , 0xF0 , 0xD8 , // Logical Minimum (-10000) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x36 , 0xF0 , 0xD8 , // Physical Minimum (-10000) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x68 , // Usage (0x68) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x17 , // Report ID (23) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x6C , // Usage (0x6C) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0x10 , 0x27 , // Logical Maximum (10000) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x69 , // Usage (0x69) 0x15 , 0x81 , // Logical Minimum (-127) 0x25 , 0x7F , // Logical Maximum (127) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x0C , // Report Count (12) 0x92 , 0x02 , 0x01 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile,Buffered Bytes) 0xC0 , // End Collection 0x09 , 0x66 , // Usage (0x66) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x18 , // Report ID (24) 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x30 , // Usage (X) 0x09 , 0x31 , // Usage (Y) 0x15 , 0x81 , // Logical Minimum (-127) 0x25 , 0x7F , // Logical Maximum (127) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x02 , // Report Count (2) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x05 , 0x0F , // Usage Page (PID Page) 0x09 , 0x77 , // Usage (0x77) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x1A , // Report ID (26) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x78 , // Usage (0x78) 0xA1 , 0x02 , // Collection (Logical) 0x09 , 0x79 , // Usage (0x79) 0x09 , 0x7A , // Usage (0x7A) 0x09 , 0x7B , // Usage (0x7B) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x03 , // Logical Maximum (3) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x00 , // Output (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x7C , // Usage (0x7C) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x90 , // Usage (0x90) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x1B , // Report ID (27) 0x09 , 0x22 , // Usage (0x22) 0x25 , 0x28 , // Logical Maximum (40) 0x15 , 0x01 , // Logical Minimum (1) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x96 , // Usage (0x96) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x1C , // Report ID (28) 0x09 , 0x97 , // Usage (0x97) 0x09 , 0x98 , // Usage (0x98) 0x09 , 0x99 , // Usage (0x99) 0x09 , 0x9A , // Usage (0x9A) 0x09 , 0x9B , // Usage (0x9B) 0x09 , 0x9C , // Usage (0x9C) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x06 , // Logical Maximum (6) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x00 , // Output (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x7D , // Usage (0x7D) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x1D , // Report ID (29) 0x09 , 0x7E , // Usage (0x7E) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0x10 , 0x27 , // Physical Maximum (10000) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x6B , // Usage (0x6B) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x1E , // Report ID (30) 0x09 , 0x22 , // Usage (0x22) 0x15 , 0x01 , // Logical Minimum (1) 0x25 , 0x28 , // Logical Maximum (40) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x6D , // Usage (0x6D) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x51 , // Usage (0x51) 0x66 , 0x03 , 0x10 , // Unit (System: English Linear, Time: Seconds) 0x55 , 0xFD , // Unit Exponent 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x7F , // Logical Maximum (32767) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x7F , // Physical Maximum (32767) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x91 , 0x02 , // Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x55 , 0x00 , // Unit Exponent (0) 0x66 , 0x00 , 0x00 , // Unit (None) 0xC0 , // End Collection 0x09 , 0xAB , // Usage (0xAB) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x11 , // Report ID (17) 0x09 , 0x25 , // Usage (0x25) 0xA1 , 0x02 , // Collection (Logical) 0x09 , 0x26 , // Usage (0x26) 0x09 , 0x27 , // Usage (0x27) 0x09 , 0x30 , // Usage (0x30) 0x09 , 0x31 , // Usage (0x31) 0x09 , 0x32 , // Usage (0x32) 0x09 , 0x33 , // Usage (0x33) 0x09 , 0x34 , // Usage (0x34) 0x09 , 0x40 , // Usage (0x40) 0x09 , 0x41 , // Usage (0x41) 0x09 , 0x42 , // Usage (0x42) 0x09 , 0x43 , // Usage (0x43) 0x09 , 0x29 , // Usage (0x29) 0x25 , 0x0C , // Logical Maximum (12) 0x15 , 0x01 , // Logical Minimum (1) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x0C , // Physical Maximum (12) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x00 , // Feature (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x05 , 0x01 , // Usage Page (Generic Desktop Ctrls) 0x09 , 0x3B , // Usage (Byte Count) 0x15 , 0x00 , // Logical Minimum (0) 0x26 , 0xFF , 0x01 , // Logical Maximum (511) 0x35 , 0x00 , // Physical Minimum (0) 0x46 , 0xFF , 0x01 , // Physical Maximum (511) 0x75 , 0x0A , // Report Size (10) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x75 , 0x06 , // Report Size (6) 0xB1 , 0x01 , // Feature (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x05 , 0x0F , // Usage Page (PID Page) 0x09 , 0x89 , // Usage (0x89) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x12 , // Report ID (18) 0x09 , 0x22 , // Usage (0x22) 0x25 , 0x28 , // Logical Maximum (40) 0x15 , 0x01 , // Logical Minimum (1) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x28 , // Physical Maximum (40) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x8B , // Usage (0x8B) 0xA1 , 0x02 , // Collection (Logical) 0x09 , 0x8C , // Usage (0x8C) 0x09 , 0x8D , // Usage (0x8D) 0x09 , 0x8E , // Usage (0x8E) 0x25 , 0x03 , // Logical Maximum (3) 0x15 , 0x01 , // Logical Minimum (1) 0x35 , 0x01 , // Physical Minimum (1) 0x45 , 0x03 , // Physical Maximum (3) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x00 , // Feature (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0xAC , // Usage (0xAC) 0x15 , 0x00 , // Logical Minimum (0) 0x27 , 0xFF , 0xFF , 0x00 , 0x00 , // Logical Maximum (65534) 0x35 , 0x00 , // Physical Minimum (0) 0x47 , 0xFF , 0xFF , 0x00 , 0x00 , // Physical Maximum (65534) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x00 , // Feature (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0x09 , 0x7F , // Usage (0x7F) 0xA1 , 0x02 , // Collection (Logical) 0x85 , 0x13 , // Report ID (19) 0x09 , 0x80 , // Usage (0x80) 0x75 , 0x10 , // Report Size (16) 0x95 , 0x01 , // Report Count (1) 0x15 , 0x00 , // Logical Minimum (0) 0x35 , 0x00 , // Physical Minimum (0) 0x27 , 0xFF , 0xFF , 0x00 , 0x00 , // Logical Maximum (65534) 0x47 , 0xFF , 0xFF , 0x00 , 0x00 , // Physical Maximum (65534) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0x83 , // Usage (0x83) 0x26 , 0xFF , 0x00 , // Logical Maximum (255) 0x46 , 0xFF , 0x00 , // Physical Maximum (255) 0x75 , 0x08 , // Report Size (8) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x09 , 0xA9 , // Usage (0xA9) 0x09 , 0xAA , // Usage (0xAA) 0x75 , 0x01 , // Report Size (1) 0x95 , 0x02 , // Report Count (2) 0x15 , 0x00 , // Logical Minimum (0) 0x25 , 0x01 , // Logical Maximum (1) 0x35 , 0x00 , // Physical Minimum (0) 0x45 , 0x01 , // Physical Maximum (1) 0xB1 , 0x02 , // Feature (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0x75 , 0x06 , // Report Size (6) 0x95 , 0x01 , // Report Count (1) 0xB1 , 0x03 , // Feature (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile) 0xC0 , // End Collection 0xC0 , // End Collection // 1322 bytes","title":"vJoy HID Report Descriptor"}]}